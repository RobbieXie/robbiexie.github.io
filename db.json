{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1644243794696},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1644243794693},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1644243794693},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1644243794693},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1644243794694},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1644243794693},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1644243794694},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1644243794694},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1644243794696},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1644243794696},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1644243794696},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1644243794696},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1644243794697},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1644243794696},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1644243794696},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1644243794696},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1644243794697},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1644243794697},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1644243794697},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1644243794694},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1644243794697},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1644243794697},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1644243794697},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1644243794697},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1644243794697},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1644243794698},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1644243794695},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1644243794698},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1644243794698},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1644243794698},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1644243794698},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1644243794698},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1644243794698},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1644243794699},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1644243794698},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1644243794699},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1644243794699},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1644243794699},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1644243794704},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1644243794699},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1644243794704},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1644243794698},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1644243794704},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1644243794705},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1644243794705},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1644243794705},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1644243794705},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1644243794711},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1644243794712},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1644243794712},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1644243794711},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1644243794711},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1644243794711},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1644243794712},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1644243794705},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1644243794705},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1644243794712},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1644243794707},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1644243794706},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1644243794707},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1644243794707},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1644243794707},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1644243794706},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1644243794706},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1644243794710},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1644243794709},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1644243794710},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1644243794710},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1644243794710},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1644243794711},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1644243794711},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1644243794710},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1644243794710},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1644243794711},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1644243794708},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1644243794706},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1644243794709},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1644243794713},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1644243794713},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1644243794713},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1644243794713},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1644243794713},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1644243794713},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1644243794709},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1644243794710},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1644243794708},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553176816000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553176816000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553176816000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553176816000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553176816000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553176816000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553176816000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553176816000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1553176816000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1553176816000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1553176816000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1553176816000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1553176816000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1553176816000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1553176816000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1553176816000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1553176816000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1553176816000},{"_id":"themes/next/README.cn.md","hash":"263b74f1ac7c0f6f9424b8cced4b0b320ae61efc","modified":1553176816000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1553176816000},{"_id":"themes/next/README.md","hash":"287c7e6b7a6ddf75d815dda0df8bd228e3f285c5","modified":1553176816000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1553176816000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1553176816000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1553176816000},{"_id":"themes/next/_config.yml","hash":"5ff37e90e4d6812c8fc40c03fa6e1d903d743470","modified":1553176816000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1553176816000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1553176816000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1553176816000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1553176816000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1553176816000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1553176816000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1553176816000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1553176816000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1553176816000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1553176816000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1553176816000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1553176816000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1553176816000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1553176816000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1553176816000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1553176816000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1553176816000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1553176816000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1553176816000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1553176816000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1553176816000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1553176816000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1553176816000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1553176816000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1553176816000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1553176816000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1553176816000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1553176816000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1553176816000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1553176816000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1553176816000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1553176816000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1553176816000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1553176816000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1553176816000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1553176816000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1553176816000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1553176816000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1553176816000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1553176816000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1553176816000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1553176816000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1553176816000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1553176816000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1553176816000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1553176816000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1553176816000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1553176816000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1553176816000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1553176816000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1553176816000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1553176816000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1553176816000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1553176816000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1553176816000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1553176816000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1553176816000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1553176816000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1553176816000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1553176816000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1553176816000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1553176816000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1553176816000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1553176816000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1553176816000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1553176816000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1553176816000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1553176816000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1553176816000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1553176816000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1553176816000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1553176816000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1553176816000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1553176816000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1553176816000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1553176816000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1553176816000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1553176816000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1553176816000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1553176816000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1553176816000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1553176816000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1553176816000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1553176816000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1553176816000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1553176816000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1553176816000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1553176816000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1553176816000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1553176816000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1553176816000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1553176816000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1553176816000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1553176816000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1553176816000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1553176816000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1553176816000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1553176816000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1553176816000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1553176816000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1553176816000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1553176816000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1553176816000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1553176816000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1553176816000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1553176816000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1553176816000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1553176816000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1553176816000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1553176816000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1553176816000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1553176816000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1553176816000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1553176816000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1553176816000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1553176816000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1553176816000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1553176816000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1553176816000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1553176816000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1553176816000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1553176816000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1553176816000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1553176816000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1553176816000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1553176816000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1553176816000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1553176816000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1553176816000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1553176816000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1553176816000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1553176816000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1553176816000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1553176816000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1553176816000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1553176816000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1553176816000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1553176816000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1553176816000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1553176816000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1553176816000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1553176816000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1553176816000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1553176816000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1553176816000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1553176816000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1553176816000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1553176816000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1553176816000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1553176816000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1553176816000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1553176816000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1553176816000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1553176816000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1553176816000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1553176816000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1553176816000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1553176816000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1553176816000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1553176816000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1553176816000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1553176816000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1553176816000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1553176816000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1553176816000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1553176816000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1553176816000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1553176816000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1553176816000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1553176816000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1553176816000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1553176816000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1553176816000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1553176816000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1553176816000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1553176816000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1553176816000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1553176816000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1553176816000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1553176816000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1553176816000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1553176816000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1553176816000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1553176816000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1553176816000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1553176816000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1553176816000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1553176816000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1553176816000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1553176816000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1553176816000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1553176816000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1553176816000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1553176816000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1553176816000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1553176816000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1553176816000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1553176816000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1553176816000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1553176816000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1553176816000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1553176816000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1553176816000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1553176816000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1553176816000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1553176816000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1553176816000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1553176816000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1553176816000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1553176816000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1553176816000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1553176816000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1553176816000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1553176816000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1553176816000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1553176816000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1553176816000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1553176816000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1553176816000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1553176816000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1553176816000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1553176816000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1553176816000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1553176816000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1553176816000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1553176816000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1553176816000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1553176816000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1553176816000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1553176816000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1553176816000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1553176816000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1553176816000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1553176816000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1553176816000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1553176816000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1553176816000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1553176816000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1553176816000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1553176816000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1553176816000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1553176816000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1553176816000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1553176816000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1553176816000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1553176816000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1553176816000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1553176816000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1553176816000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1553176816000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1553176816000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1553176816000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1553176816000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1553176816000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1553176816000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1553176816000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1553176816000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1553176816000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1553176816000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1553176816000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1553176816000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1553176816000},{"_id":"source/_posts/network-base.md","hash":"96382da926ff5832b07956869a871c816d19b6fa","modified":1644247673971},{"_id":"source/_posts/network-base/ble_osi.png","hash":"28f046e30c26733cb6e1c60be3211339c7960be7","modified":1644244906784},{"_id":"source/_posts/network-base/hub_pic.png","hash":"b622fe47441ae60544b5d734abad02e4c8c977e2","modified":1644244906792},{"_id":"source/_posts/network-base/mac_addr.png","hash":"f280a915e5ea7b26e5d0390652881e005e6184c7","modified":1644244906800},{"_id":"source/_posts/network-base/preamble.png","hash":"e8dba837eced21d8fe0979d2f305669149516c98","modified":1644244906807},{"_id":"source/_posts/network-base/rip.png","hash":"4aa7c1e25de1c7a73c4f7a779e751ba657952b48","modified":1644244906812},{"_id":"source/_posts/network-base/网络通信.drawio","hash":"e691dca079f9a57915facc260b58b7fb0be90d34","modified":1644244906837},{"_id":"source/_posts/network-base/网络通信知识.md","hash":"0602d0fd70ba2d723390553442c3f401d2063f37","modified":1644246191488},{"_id":"source/_posts/network-base/bridge_pic.png","hash":"333cdaeb447f098fa70caa35bccdaa99b2b3f518","modified":1644244906785},{"_id":"source/_posts/network-base/data_link_layer_frame.png","hash":"685fc65810d349e3ff14719afcd54577b1024a75","modified":1644244906786},{"_id":"source/_posts/network-base/datalinklayer_sublayers.png","hash":"fab13442dcfb78a0f6af787130bcd997cf42911d","modified":1644244906788},{"_id":"source/_posts/network-base/ip_group_question.png","hash":"13c8ca065688c6252b94926e15ead46f02bfeaf7","modified":1644244906794},{"_id":"source/_posts/network-base/icmp_kinds.png","hash":"82b5c920bf8c147a4fa20e9129cfb599186f6fa1","modified":1644244906793},{"_id":"source/_posts/network-base/net_sec_key.png","hash":"959a99fd3d000dc93b7fe5ee7dc16ba923b5e8e1","modified":1644244906803},{"_id":"source/_posts/network-base/osi_transfer_example.png","hash":"b2ad5138e315a3c55410c8d36da9bcc511e59127","modified":1644244906807},{"_id":"source/_posts/network-base/real_f5.png","hash":"8f8a4e71ea20fe9680223632c0e9a2c534d34651","modified":1644244906809},{"_id":"source/_posts/network-base/osi_pdu_pass.png","hash":"6f0ed990a8ca53f838ea69872929ac90d98eb7ac","modified":1644244906806},{"_id":"source/_posts/network-base/router_trans.png","hash":"3520b2e6cbc38cb53ffe0f23e9afbbd3feb906f3","modified":1644244906814},{"_id":"source/_posts/network-base/router_trans2.png","hash":"5dda52c8e5148ed2224451ec719876c460f3887d","modified":1644244906814},{"_id":"source/_posts/network-base/rtcp.png","hash":"37f707bcaf47495257ae127e55c0eb48d32e9ba6","modified":1644244906817},{"_id":"source/_posts/network-base/signature.png","hash":"52657bce57a29c3d9baa77d8de9764c5c1c2dca8","modified":1644244906819},{"_id":"source/_posts/network-base/ssl.png","hash":"4b0dbb19f1970a163d674c64f46a3d6cfda4da32","modified":1644244906821},{"_id":"source/_posts/network-base/socket2.png","hash":"22c429af443e5391c759431a63c2dea6e47aac73","modified":1644244906821},{"_id":"source/_posts/network-base/switch_net.png","hash":"833688339bbac22020f7c144caefee3201971271","modified":1644244906823},{"_id":"source/_posts/network-base/switch_pic.png","hash":"08d5cdc59a1dd86abda41607b9163e15ace3ccbd","modified":1644244906825},{"_id":"source/_posts/network-base/tcp_congest.png","hash":"d5fcb18b09538207b024b64298c006ccdcf2bfe2","modified":1644244906828},{"_id":"source/_posts/network-base/tcp_sack.png","hash":"d5b50cf059a89f1451ea013da2a7e3b4dd58522a","modified":1644244906832},{"_id":"source/_posts/network-base/av_protocols.png","hash":"6070df5e85e2bf1104bb56cfe5d5ab750ad32697","modified":1644244906783},{"_id":"source/_posts/network-base/http_protocol.png","hash":"956a72687000b546967573ae9d4cf8bf7e19ff1e","modified":1644244906791},{"_id":"source/_posts/network-base/ip_routing_protocol.png","hash":"ff73f9bb9a3dd0345158c77b37b1a69c42c238bb","modified":1644244906798},{"_id":"source/_posts/network-base/real_router.png","hash":"37d6a4c82ec62244741c3ae6eac5b114a5d00bde","modified":1644244906810},{"_id":"source/_posts/network-base/router_wan_lan.png","hash":"33972fafe76e6276a0125b4cf8dcac3cfb6fdd19","modified":1644244906815},{"_id":"source/_posts/network-base/sec_mac.png","hash":"6fffc178c079999f2492dfc5a4b6d1b70247ed42","modified":1644244906819},{"_id":"source/_posts/network-base/syscall.png","hash":"36e17f4f7372b145a1732d4a43f91c0d0b8c3f41","modified":1644244906825},{"_id":"source/_posts/network-base/tcp_buffer.png","hash":"3b7515de84ba81fd0bb117d0ed810d8bdec39c44","modified":1644244906826},{"_id":"source/_posts/network-base/tcp_bytes_stream.png","hash":"dbaef4e5c4d9c57e3babf67188715715e82038cc","modified":1644244906828},{"_id":"source/_posts/network-base/tcp_handshake.png","hash":"92416b995193aa6bcb55e12a953274890c555fc7","modified":1644244906829},{"_id":"source/_posts/network-base/tcp_slow_start.png","hash":"87aea97d9d882a0916aa99c971c9447e2c819023","modified":1644244906832},{"_id":"source/_posts/network-base/BGP_speaker.png","hash":"2f172d31d2888c50c3a527fce248e64fb386b601","modified":1644244906782},{"_id":"source/_posts/network-base/datalink_timewindow.png","hash":"c352ee002686e1f26b3250bfa8e401903a30aa9e","modified":1644244906787},{"_id":"source/_posts/network-base/manchester.png","hash":"11583a32aacce3406138606e937af1c911293bc7","modified":1644244906802},{"_id":"source/_posts/network-base/routing_table.png","hash":"70ce0bc1ae316ce399acbfa3e90257445c81e9f2","modified":1644244906816},{"_id":"source/_posts/network-base/rtp_protocol.png","hash":"affead0773274d04fb6163843bab50a5e4991dc3","modified":1644244906818},{"_id":"source/_posts/network-base/ssl_procedure.png","hash":"ff6285eeddef3199b28a7c51b09614095af793e3","modified":1644244906822},{"_id":"source/_posts/network-base/tcp_bye_handshake.png","hash":"61c2a43e0ce0c5eb1e794487a91a753c3ba0e965","modified":1644244906827},{"_id":"source/_posts/network-base/tcp_protocol.png","hash":"bb69543f95117629a63f251770c372173c0223e1","modified":1644244906830},{"_id":"source/_posts/network-base/tcp_rto.png","hash":"be246b6f79a32f27bcc6b2c5694fd252a96242f0","modified":1644244906831},{"_id":"source/_posts/network-base/tcp_window.png","hash":"ecf5757cb7494b534fd84ecd2847d219daa45998","modified":1644244906834},{"_id":"source/_posts/network-base/udp_protocol.png","hash":"c96ff0391c3641fde9d83a3bd0f3e7af19a4a5a5","modified":1644244906836},{"_id":"source/_posts/network-base/对称密钥分配.png","hash":"ae514bc20d3ed59e7baf5785b15743d7c549f701","modified":1644244906838},{"_id":"source/_posts/network-base/BGP_example.png","hash":"be2fd3b11330c884b8f1e14d4149c85bedcafcdf","modified":1644244906781},{"_id":"source/_posts/network-base/dhcp.png","hash":"97682e9b70cf12e04be8ea8affe702a5b18c0b81","modified":1644244906788},{"_id":"source/_posts/network-base/osi7.png","hash":"2925700a23fd734d060d98693ff210f4cf420f52","modified":1644244906804},{"_id":"source/_posts/network-base/ipsec.png","hash":"9a56b4cc9f4bc6965607f0cbb22fe4e917f4bed8","modified":1644244906799},{"_id":"source/_posts/network-base/smtp.png","hash":"0f9261fda58a905fcc45a9f2cfd08aa94b7bb7b3","modified":1644244906820},{"_id":"source/_posts/network-base/transport_process.png","hash":"8a0c8d4eb208ea2c5b3ad4111c9961e048ffff0a","modified":1644244906835},{"_id":"source/_posts/network-base/dns.png","hash":"be14f0794851f8bb348ca16b7b9219650e798bcf","modified":1644244906790},{"_id":"source/_posts/network-base/ip_offset.png","hash":"fc95e7d3312de3579aa4555f498dbcc65348b539","modified":1644244906796},{"_id":"source/_posts/network-base/ip_packet.png","hash":"8029dc9b7f484a4a84ee51cb810ed60639b78e8f","modified":1644244906797},{"_id":"source/_posts/network-base/ip_nets.png","hash":"8a2e82c204a57b6e661e364f2d8ef903b2f871d6","modified":1644244906794},{"_id":"source/_posts/network-base/tcp_state.png","hash":"f81ba52dfac75d4a266b9bffea3732eba945b13d","modified":1644244906833},{"_id":"source/_posts/network-base/real_switch.png","hash":"20c933bf507867fcdfc84a5a7e57d9e3bc10e518","modified":1644244906812},{"_id":"source/_posts/.hello-world.md.swp","hash":"3de4b155dd584e89b63c63806d3883dd1999a88b","modified":1644245212540},{"_id":"public/2022/02/07/hello-world/index.html","hash":"fa245b33af432902ad13e566bac2e400b095aef0","modified":1644248801010},{"_id":"public/archives/index.html","hash":"dadae91b3a4b8be26da7fa2eac22e27fec2bd9c9","modified":1644248801010},{"_id":"public/archives/2022/index.html","hash":"67d16fcc0cfe29865ec7bb03f8933e67e28892f5","modified":1644248801010},{"_id":"public/archives/2022/02/index.html","hash":"a56f5d752b5b57dc18ba6214556eaaf6a4ebdd8d","modified":1644248801010},{"_id":"public/2022/02/07/network-base/index.html","hash":"cc84e40051a8721d3cf08c6e8e1fba28e98c9b4d","modified":1644248801010},{"_id":"public/index.html","hash":"649bca5bf7edfcc02d88347098374cd7f3ac0f63","modified":1644248801010},{"_id":"source/_posts/编程规范文档/.DS_Store","hash":"abb5596f9c673388dcaf858e4c9059c1f279a35c","modified":1647575019149},{"_id":"source/_posts/编程规范文档/code_guideline.drawio","hash":"9af6f57a074e3aefc3690f7936f25429ec0aad1e","modified":1647484215160},{"_id":"source/_posts/编程规范文档/编程规范.md","hash":"ec7ec28d80595fcdff79b054407463276f342981","modified":1647575111310},{"_id":"source/_posts/编程规范文档/~$code_guideline.drawio.dtmp","hash":"efbe30e9578c31aab5d86747fbfbbae4688bfd46","modified":1647572066261},{"_id":"source/_posts/编程规范文档/git-1-1.png","hash":"c190d09d09fa379d9caf0bd9a4116f77853924ef","modified":1647572113744},{"_id":"source/_posts/编程规范文档/git-0.png","hash":"0ea3d642ba21a5b29112d7b65bd2b4b3eedca21d","modified":1647418794036},{"_id":"source/_posts/编程规范文档/git-2.png","hash":"75025ae0e58adfab8023f9bb1b61233bd957b965","modified":1647417970993},{"_id":"source/_posts/编程规范文档/git-1.png","hash":"da4a76a7baddb470ae660be92079d4ec4ec36730","modified":1647417752306},{"_id":"source/_posts/编程规范文档/design3.png","hash":"b0fa053a1528922f48e8fdf682abfdc3000180d5","modified":1647574745622},{"_id":"source/_posts/编程规范文档/git-4.png","hash":"9511885860c4ffef04b4647472cca6882b4b3093","modified":1647418350112},{"_id":"source/_posts/编程规范文档/git-3.png","hash":"e4b2b8f337dc39e486d1c59bead62400d4bc54a8","modified":1647418143903},{"_id":"source/_posts/编程规范文档/design1.png","hash":"ff92ebf24d2e8f67b8d24e5b7b4a11eb8e906a9e","modified":1647574035505},{"_id":"source/_posts/编程规范文档/design2.png","hash":"19c4c319e0630cf0eda942c63e7c721e920afe42","modified":1647574158397},{"_id":"source/_posts/编程规范文档/git-5.png","hash":"0a266abe72d3bc403340274346ecb370bf3c76f9","modified":1647418439903},{"_id":"source/_posts/编程规范文档/design-4.png","hash":"5fec7d0abfa764e659972bb7e3ef8da725cb7b5c","modified":1647574470161},{"_id":"source/_posts/编程规范文档/design4.png","hash":"7800655bd4d5394ff529d2dd43c36fd3ec84943d","modified":1647574593230},{"_id":"source/_posts/编程规范文档/design-1.png","hash":"4de1d7994313d515ce543248f8e330a1bfb711e9","modified":1647573274811},{"_id":"source/_posts/codingGuidelines/codingGuidelines.md","hash":"ec7ec28d80595fcdff79b054407463276f342981","modified":1647575111310},{"_id":"source/_posts/codingGuidelines/code_guideline.drawio","hash":"9af6f57a074e3aefc3690f7936f25429ec0aad1e","modified":1647484215160},{"_id":"source/_posts/codingGuidelines/.DS_Store","hash":"abb5596f9c673388dcaf858e4c9059c1f279a35c","modified":1647575019149},{"_id":"source/_posts/codingGuidelines/~$code_guideline.drawio.dtmp","hash":"efbe30e9578c31aab5d86747fbfbbae4688bfd46","modified":1647572066261},{"_id":"source/_posts/codingGuidelines/git-0.png","hash":"0ea3d642ba21a5b29112d7b65bd2b4b3eedca21d","modified":1647418794036},{"_id":"source/_posts/codingGuidelines/git-2.png","hash":"75025ae0e58adfab8023f9bb1b61233bd957b965","modified":1647417970993},{"_id":"source/_posts/codingGuidelines/git-1.png","hash":"da4a76a7baddb470ae660be92079d4ec4ec36730","modified":1647417752306},{"_id":"source/_posts/codingGuidelines/git-1-1.png","hash":"c190d09d09fa379d9caf0bd9a4116f77853924ef","modified":1647572113744},{"_id":"source/_posts/codingGuidelines/design3.png","hash":"b0fa053a1528922f48e8fdf682abfdc3000180d5","modified":1647574745622},{"_id":"source/_posts/codingGuidelines/git-3.png","hash":"e4b2b8f337dc39e486d1c59bead62400d4bc54a8","modified":1647418143903},{"_id":"source/_posts/codingGuidelines/git-4.png","hash":"9511885860c4ffef04b4647472cca6882b4b3093","modified":1647418350112},{"_id":"source/_posts/codingGuidelines/design2.png","hash":"19c4c319e0630cf0eda942c63e7c721e920afe42","modified":1647574158397},{"_id":"source/_posts/codingGuidelines/design1.png","hash":"ff92ebf24d2e8f67b8d24e5b7b4a11eb8e906a9e","modified":1647574035505},{"_id":"source/_posts/codingGuidelines/git-5.png","hash":"0a266abe72d3bc403340274346ecb370bf3c76f9","modified":1647418439903},{"_id":"source/_posts/codingGuidelines/design-4.png","hash":"5fec7d0abfa764e659972bb7e3ef8da725cb7b5c","modified":1647574470161},{"_id":"source/_posts/codingGuidelines/design4.png","hash":"7800655bd4d5394ff529d2dd43c36fd3ec84943d","modified":1647574593230},{"_id":"source/_posts/codingGuidelines/design-1.png","hash":"4de1d7994313d515ce543248f8e330a1bfb711e9","modified":1647573274811}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2022-02-07T14:23:14.696Z","updated":"2022-02-07T14:23:14.696Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzcscjs70000lpje7r33hszt","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"网络基础知识","_content":"\n\n## 分层模型 OSI model\n\n**Open Systems Interconnection model** (**OSI model**) 开放系统互联模型是一个概念性的参考模型, 不指定任何协议的具体实现. 核心思想在于不同网络层级间的解耦、接口独立, 任何一层协议可以升级替换后不影响整个网络功能, 在网络通信协议设计时起到一个指导作用.  \n<img src=\"osi7.png\" alt=\"image-osi\" style=\"zoom:50%;\" />\n\n### Definitions:\n\n+ 通信协议(Communication protocols): 让处于同层的不同host实体可以相互交互.\n\n+ Protocol data unit(PDU): 在每一层, 两个实体通过交换该层协议的PDU来进行交互, PDU包含payload(也称为[service data unit](https://en.wikipedia.org/wiki/Service_data_unit) ,SDU) 和 protocol-related headers or footers . \n\n+  数据通信流程: 从Layer highest开始, PDU向下层传递, 并作为下层的SDU; 重复向更下层传递直至Layer lowest; 接着,底层负责将PDU传递给对端底层; 然后,逐层向上传递,拆包解析出各层SDU.\n\n<img src=\"./osi_pdu_pass.png\" alt=\"image-20220119105145560\" style=\"zoom:40%;\" />\n\n<img src=\"osi_transfer_example.png\" alt=\"image-20220123111825642\" style=\"zoom:43%;\" />\n\n### Layer architecture\n\n#### Layer 1: Physical layer\n\n物理层负责非结构化原始数据的传输和接收, between device和物理传输介质。它将raw digital bits转换成electrical电子,optical光学 或radio无线信号等. 物理层规范规格包含蓝牙、以太网和USB标准等.\n\nExamples: Ethernet family 802.3 PHY(千兆宽带, 百兆宽带), 802.11 LAN & wireless(2.4Ghz, 5Ghz), BLE(Bluetooth Low Energy) PHY,   E1.\n\n#### Layer 2: Data link layer\n\n物理层的线路有传输介质与通信设备组成，比特流在传输介质上传输时肯定会存在误差错误的。这样就引入了数据链路层在物理层之上，采用差错检测、差错控制和流量控制等方法，向网络层提供高质量的数据传输服务。\n\n数据链路层从网络层接受数据包, 并在将其发送到物理层之前, 将这些数据包封装成帧frame. 之后在两个相邻节点间(node to node)的链路上传送帧，每一帧包括**数据**和必要的**头尾信息**（如同步信息、地址信息、差错信息等）. 如果帧太大(超过MTU)的话，数据链路层通常会将大帧拆分为一个个的小帧，小帧能够使传输控制和错误检测更加高效。\n\n#### Layer 3: Network layer\n\n网络层的任务就是提供能在不同的网络间transfer packets的程序和方法. 网络中会有非常多的nodes, 每个node会拥有自己的访问地址, 网络层就是要提供一种节点间路由寻址方式能让packet准确的传递给destination. 网络层还会在packet在某些MTU较小链路层传输时, 对原包进行分片, 独立传输, 并在下一链路node重新装配.  网络层可以做数据错误校验, 可靠性保障的功能, 但并不necessary.\n\n#### Layer 4: Transport layer\n\n传输层负责将变长数据(variable-length data sequences)从源传输到目的地, 并提供保障QoS的方式. \n\n#### Layer 5: Session layer\n\n会话层的主要功能是负责维护两个节点之间的传输联接，确保点到点传输不中断，以及管理数据交换等功能。会话层在应用进程中建立、管理和终止会话。\n\n#### Layer 6: Presentation layer\n\n表示层的主要功能是处理在两个通信系统中交换信息的表示方式，主要包括数据格式变化、[数据加密](https://baike.baidu.com/item/数据加密/11048982)与解密、[数据压缩](https://baike.baidu.com/item/数据压缩/5198909)与解压等\n\n#### Layer 7: Application layer\n\n该层直接面向用户，是OSI中的最高层。它的主要任务是为用户提供应用的接口，即提供不同计算机间的文件传送、访问与管理，电子邮件的内容处理，不同计算机通过网络交互访问的虚拟终端功能等.\n\n### Protocol stack examples\n\n#### BLE protocol stack\n\n<img src=\"./ble_osi.png\" alt=\"ble_osi\" style=\"zoom:80%;\" />\n\n## 分层模型——TCP/IP模型及协议族\n\nTCP/IP 模型将网络分为四层(算上物理层就是五层)，它不关注底层物理介质，主要关注终端之间的逻辑数据流转发。\nTCP/IP 模型的核心是**网络层**和**传输层**，网络层解决网络之间的逻辑转发问题，传输层保证源端到目的端之间的可靠传输。最上层的**应用层**通过各种协议向终端用户提供业务应用。\n\n### 物理层\n\n任何协议栈都逃不脱最终帮其传输数据的物理层. 物理层传递的都是bit flow, 而以太网使用的都是曼彻斯特编码信号. 曼彻斯特(Manchester)编码的编码方法是把每个码元分成两个相等的间隔。 如图,码元1是前一个间隔为高电压后一个间隔为低电压，即位周期中心向下跳变表示1；码元0正好相反，位周期中心向上跳变表示0。这样保证了在每一个 码元中间出现一次电压的转换，接收端就利用这种电压的转换方便地把位同步信号提取出来.\n\n<img src=\"./manchester.png\" alt=\"image-20220125225252662\" style=\"zoom:45%;\" />\n\n在链路层从物理层收到的bit流中提取数据时, 一个问题就是如何区分帧的开始.  Manchester + Preamble.\n\n<img src=\"./preamble.png\" alt=\"image-20220125230003591\" style=\"zoom:40%;\" />\n\n### 数据链路层\n\n数据链路层位于网络层之下, 这意味着它与网络层协议比如常用的IP协议是解耦的, 以**以太网数据链路层帧**为例, 在通信时, 其完全不关心payload中是IP协议报文或是其他协议报文, 而是完全通过帧首的源MAC、目标MAC地址进行寻址通信.\n\nIEEE 802 规范下数据链路层向下还可细分为 logical link control (LLC) 层和 medium access control (MAC) 层。\n\n<img src=\"./datalinklayer_sublayers.png\" alt=\"dll_sublayes\" style=\"zoom:40%;\" />\n\nLLC 层又叫做`逻辑控制链路`层，它主要用于数据传输，它充当网络层和数据链路层中的`媒体访问控制（MAC）`子层之间的接口。LLC 层的主要功能如下\n\n- LLC 的主要功能是发送时在 MAC 层上多路复用协议，并在接收时同样地多路分解协议。\n- LLC 提供跳到跳的流的差错控制，像是路由器和路由器之间这种相邻节点的数据传输称为 `一跳`。\n- 它允许通过计算机网络进行多点通信。\n\nMAC 层负责传输介质的流控制和多路复用，它的主要功能如下\n\n- MAC 层为 LLC 和 OSI 网络的上层提供了物理层的抽象。\n- MAC 层负责封装帧，以便通过物理介质进行传输。\n- MAC 层负责解析源和目标地址。\n- MAC 层还负责在冲突的情况下执行冲突解决并启动重传。\n- MAC 层负责生成帧校验序列，从而有助于防止传输错误。\n\n在 MAC 层中，有一个关键概念是 `MAC 地址`。MAC 地址主要用于识别数据链路中互联的节点. MAC 地址长 6 bytes (48 bit)，在使用`网卡(NIC)` 的情况下，MAC 地址一般都会烧入 ROM 中。因此，任何一个网卡的 MAC 地址都是唯一的。\n\n<img src=\"/Users/talentxiet/Desktop/我的学习文档/网络基础/mac_addr.png\" alt=\"mac_addr\" style=\"zoom:28%;\" />\n\n链路层的差错控制通过增加差错编码来实现, 又可分为**检错编码**和**纠错编码**: 检错编码常见有奇偶校验码和循环冗余码; 纠错编码常见有海明码等.\n\n流量(阻塞)控制是控制链路上的帧的发送速率，使接收方有足够的缓冲空间来接收帧，主要方法有两种，停止-等待协议和滑动窗口协议. 停止-等待协议是一种特殊的滑动窗口协议，相当于发送窗口和接收窗口大小为1的滑动窗口协议。\n\n<img src=\"./datalink_timewindow.png\" alt=\"image-20220121112137195\" style=\"zoom:40%;\" />\n\n以太网上传输的链路层数据帧有两种格式：**Ethernet_II 和 IEEE802.3**。选择哪种格式由 TCP/IP 协议簇中的网络层决定。大多数的数据帧使用的是 Ethernet_II 格式. IEEE802.3 格式：Length字段值小于等于0x05DC. Ethernet_II 格式：Type 字段值大于等于0x0600. 以此来供链路层判断数据是哪种规范.\n\n<img src=\"./data_link_layer_frame.png\" alt=\"image-20220119143457079\" style=\"zoom:45%;\" />\n\nFCS: frame check sequence, 错误检查的.\nLLC：Logical Link Control，逻辑链路控制由目的访问点 D.SAP （Destination Service Access Point）、源服务访问点 S.SAP（Source Service Access Point）和 Control 字段组成.\nSNAP：Sub-network Access Protocol，子网访问协议由机构代码（Org Code）和类型（Type）字段组成。Org Code 三个字节都为 0 。Type 字段的含义与 Ethernet_II 帧中的 Type 字段相同.\n\n### 网络层\n\n#### **IP协议**\n\n- 对于网络层，**IP协议**是其中一个非常重要的协议\n- IP协议使得复杂的实际网络变为一个**虚拟互联的网络**（也就是我们只需要将终端设备连接到这个网络中去即可，并不需要关心里边实际的复杂网络）\n- IP协议使得网络层可以**屏蔽底层细节**而专注网络层的**数据转发**（如果单从网络层去看，我们是不用关心**数据包**是通过海底电缆还是通过无线WiFi传输到目的计算机的）\n- IP协议**解决了在虚拟网络中数据报传输路径的问题**\n\n<img src=\"./ip_nets.png\" alt=\"image-20220125231347009\" style=\"zoom:40%;\" />\n\n**IP协议特点:**\n\n- 无状态, 是指IP通信双方不同步传输数据的状态信息，因此所有IP数据报的发送，传输，和接收都是相互独立的，没有山下文关系的。发送、传输和接收都是相互独立、没有上下文关系的。这种服务最大的缺点是无法处理乱序和重复的IP数据报。比如发送端发送出的第N个IP数据报可能比第N+1个IP数据报后到达接收端，而同一个IP数据报也可能经过不同的路径多次到达接收端。在这两种情况下，接收端的IP模块无法检测到乱序和重复，因为这些IP数据报之间没有任何上下文关系。接收端的IP模块只要收到了完整的IP数据报(如果是IP分片的话，IP 模块将先执行重组)，就将其数据部分(TCP报文段、UDP数据报或者ICMP报文)，上交给上层协议。那么从上层协议来看，这些数据就可能是乱序的、重复的。面向连接的协议，比如TCP协议，则能够自己处理乱序的、重复的报文段，它递交给上层协议的内容绝对是有序的、正确的。虽然IP数据报头部提供了一个标识字段(见后文)用以唯-标识-一个IP数据报，但它是被用来处理IP分片和重组的，而不是用来指示接收顺序的。无状态服务的优点也很明显:简单、高效。我们无须为保持通信的状态而分配一些内核资源，也无须每次传输数据时都携带状态信息。在网络协议中，无状态是很常见的，比如UDP协议和HTTP协议都是无状态协议。以HTTP协议为例，一个浏览器的连续两次网页请求之间没有任何关联，它们将被Web服务器独立地处理。\n- 无连接(connectionless), 是指IP通信双方都不长久地维持对方的任何信息。这样，上层协议每次发送数据的时候，都必须明确指定对方的IP地址。\n- 不可靠, 是指IP协议不能保证IP数据报准确地到达接收端，它只是承诺尽最大努力(best effort)。 很多种情况都能导致IP数据报发送失败。比如，某个中转路由器发现IP数据报在网络上存活的时间太长(根据IP数据报头部字段TTL判断，见后文)，那么它将丢弃之，并返回一个ICMP错误消息(超时错误)给发送端。又比如，接收端发现收到的IP数据报不正确(通过校验机制)，它也将丢弃之，并返回一个ICMP错误消息(IP 头部参数错误)给发送端。无论哪种情况，发送端的IP模块一旦检测到IP数据报发送失败，就通知上层协议发送失败，而不会试图重传。因此，使用IP服务的上层协议(比如TCP协议)需要自己实现数据确认、超时重传等机制以达到可靠传输的目的。\n\n**IP协议报文格式 :**\n\n<img src=\"./ip_packet.png\" alt=\"image-20220125234059378\" style=\"zoom:40%;\" />\n\n- **版本**：占4位，指的是IP协议的版本，通信双方的版本必须一致，即IPv4，也有IPv6\n\n- **首部长度**：占4位，最大数值为15，表示的是IP首部的长度，单位是“32位字”（4个字节），也就是**IP首部**最大长度为60字节\n\n- **服务类型**：服务登记, 比如VIP专线, 这个一般是不需要关心的\n\n- **总长度**：占16位，最大数值为65535，表示的是**IP数据报总长度**（IP首部+IP数据） （在前边介绍数据链路层的时候，也提到过一个长度。对于数据链路层的长度，称之为**MTU**，一般为1500字节。而IP数据报的最大长度有65535个字节，比MTU要大。如果真正传输的时候，如果出现这种情况，数据链路层会对IP数据报进行**分片**，也就是将一个较长的IP数据报拆分成多个数据帧来进行传输）\n\n- **标识**：占16位，计数器标示, 分片后的同组数据具备相同标示. 同一组的包根据标示重组.\n\n- **标记**： 占3位，但目前只有2位有意义。\n   标志字段中的最低位记为MF(More Fragment)。MF=1即表示后面“还有分片”的数据报,MF=0表示这已是若干数据报片中的最后一个\n   标志字段中间的一位记为DF(Don’t Fragment)，意思是“不能分片”。只有当DF=0时才允许分片。\n   \n- **片偏移**：前边有提到，如果IP数据报的长度过长，会进行IP报文的分片，把一个IP报文拆分成多个数据帧进行数据链路层的传输(以**8 Bytes**的倍数分包)。因此，如果拆分的话，就需要使用**片偏移**来记录当前的数据帧，保存的**第几个偏移的IP数据**\n\n   <img src=\"./ip_offset.png\" alt=\"image-20220129104929487\" style=\"zoom:45%;\" />\n\n- **TTL**：占8位，表明IP数据报文在网络中的**寿命**，每经过一个设备（不管是路由器还是计算机），TTL减一，当TTL=0时，网络设备必须**丢弃**该报文（它解决的就是，当网络报文找不到终点的时候，避免网络报文在网络中无限的传输，以消耗带宽）\n\n- **协议**：占8位，表明IP数据所携带的具体数据是什么**协议**的（如TCP、UDP等，一些协议对应的值，可参考下图）\n\n- **校验和**：占16位，校验IP首部是否有出错（接收方接收到IP首部之后也会进行校验，如果有错，则直接丢弃）\n\n- **源IP地址**：**发送**IP数据报的网络设备的IP地址\n\n- **目的IP地址**：IP数据报要**到达**的目的网络设备的IP地址\n\n#### **ICMP协议**\n\n<img src=\"./icmp_kinds.png\" alt=\"image-20220126215905234\" style=\"zoom:50%;\" />\n\n#### **路由选择协议**\n\n**自治系统**：autonomous system。在互联网中，一个自治系统(AS)是一个有权自主地决定在本系统中应采用各种[路由协议](https://baike.baidu.com/item/路由协议/202634)的小型单位。这个网络单位可以是一个简单的网络也可以是一个由一个或多个普通的[网络管理员](https://baike.baidu.com/item/网络管理员/595848)来控制的网络群体，它是一个单独的可管理的[网络单元](https://baike.baidu.com/item/网络单元/9928606)（例如一所大学，一个企业或者一个公司个体）。\n\n<img src=\"./ip_routing_protocol.png\" alt=\"image-20220126220513526\" style=\"zoom:50%;\" />\n\n内部网关协议:\n\n+ RIP, Routing Information Protocol: 优点, 算法简单; 缺点, 路由故障链路改变远端感知慢, 距离有限 max16, 大规模网络路由表可能过大.\n\n<img src=\"./rip.png\" alt=\"image-20220126220918042\" style=\"zoom:50%;\" />\n\n+ OSPF, Open Shortest Path First 开放的最短路径优先算法: \n\n  与RIP三个区别:（1）向本[自治系统](https://baike.baidu.com/item/自治系统)中所有路由器发送信息。（2）发送的信息就是与本[路由器](https://baike.baidu.com/item/路由器)相邻的所有路由器的链路状态，但这只是路由器所知道的部分信息。（3）只有在链路状态发生变化时，[路由器](https://baike.baidu.com/item/路由器)才向所有路由器用[洪泛](https://baike.baidu.com/item/洪泛)法发送此信息。\n\n外部(边界)网关协议:\n\nBGP用于在不同的自治系统（AS）之间交换路由信息。当两个AS需要交换路由信息时，每个AS都必须指定一个运行BGP的节点，来代表AS与其他的AS交换路由信息。两个AS中利用BGP交换信息的路由器也被称为边界网关（Border Gateway）或边界路由器（Border Router）. \n\n<img src=\"./BGP_speaker.png\" alt=\"image-20220126223533819\" style=\"zoom:50%;\" />\n\n<img src=\"./BGP_example.png\" alt=\"image-20220126223429235\" style=\"zoom:40%;\" />\n\n\n\n### 传输层\n\n端口作用, 实现进程到进程的通信, 复用ip线路, 提供标准的的端口->进程的映射方式.\n\n<img src=\"./transport_process.png\" alt=\"image-20220126230009234\" style=\"zoom:50%;\" />\n\n#### UDP\n\nUDP, User Datagram Protocol用户数据报协议, 只在IP基础上多了复用分用和差错校验的功能.\n\n##### 特点\n\n+ 无连接\n+ 尽努力交付\n+ 面向报文的\n+ 无拥塞控制\n+ 支持一对一、一对多、多对一、多对多\n+ 首部开销小\n\n##### 协议格式\n\n<img src=\"./udp_protocol.png\" alt=\"image-20220126233302042\" style=\"zoom:45%;\" />\n\n#### TCP\n\n##### 特点\n\n+ 面向连接\n\n+ 每条点对点(socket1, socket2)\n\n+ 可靠的\n\n+ 全双工\n\n+ 面向字节流的\n\n+ 为应用程序间提供逻辑通信链路\n\n  <img src=\"./tcp_bytes_stream.png\" alt=\"image-20220129001752910\" style=\"zoom:50%;\" />\n\n##### 协议格式\n\n<img src=\"./tcp_protocol.png\" alt=\"image-20220127225910379\" style=\"zoom:50%;\" />\n\n**16位源端口号**：指发送端的端口号\n**16位目的端口号**：指目的端的端口号\n**4位头部长度**：同IP头部，表示TCP头部的大小，以4字节为单位。\n**32位序列号**：TCP通信过程中，通过序列号来保证传输过程中数据的有序性\n**32位确认号**：用以对接受到的报文进行确认\n**保留6位**\n**URG**：表示紧急指针\n**ACK**：表示确认号\n**PSH**：通知对端立即从缓冲区取走数据\n**RST**: 通知当前连接出现问题, 要释放资源, 有需要则重新建立连接. 也可用于拒绝非法连接. \n**SYN**：表示请求建立连接\n**FIN**：标志要通知对端本端的数据发送要关闭\n**16位窗口大小**：TCP流量控制的手段，告诉发送方本端的接收端缓冲区还能接受多少数据, 单位字节.\n**16位校验和**：由发送方填充，接收端用以检查TCP报文在传输过程中是否有损坏\n\n##### 可靠性\n\n###### 滑动窗口\n\nA根据B TCP ack报文中的窗口大小发送滑动窗口大小以内的若干数据给B, 给回复按序抵达的最大包序号, 即31. B不应过度拖延回复ack的时间.\n\n<img src=\"./tcp_window.png\" alt=\"image-20220128000255497\" style=\"zoom:50%;\" />\n\n<img src=\"./tcp_buffer.png\" alt=\"image-20220128000641845\" style=\"zoom:50%;\" />\n\n需注意, tcp是全双工通信, 每端都有自己的发送和接受窗口及缓冲. \n\n###### 超时重传时间 Retransmision Time out\n\n<img src=\"./tcp_rto.png\" alt=\"image-20220128001439268\" style=\"zoom:40%;\" />\n\n###### 选择确认ACK Selective ACK\n\nSACK用于接收端向发送端报告部分未按序已收到的字节块, 从而避免重复传输. 需要tcp连接时 option增加SACK头, 双方确认支持SACK. 但是描述哪些数据已接受其实是比较复杂的, 尽管RFC2018有详细说明, 但使用还是较少, 大部分还是发送端重发所有未ack字节.\n\n<img src=\"./tcp_sack.png\" alt=\"image-20220128002718253\" style=\"zoom:50%;\" />\n\n\n\n##### TCP流量控制\n\n###### 可利用滑动窗口控制发送方流量\n\n\n\n###### TCP传输效率\n\n应用程序把发送数据给到TCP缓存就不管了, 由TCP负责控制发送时机将数据正确的发送出去. 这是一个比较复杂的问题.\n\n+ **Nagle算法**\n\n  TCP/IP协议中，无论发送多少数据，总是要在数据前面加上协议头，同时，对方接收到数据，也需要发送ACK表示确认。为了尽可能的利用网络带宽，TCP总是希望尽可能的发送足够大的数据。（一个连接会设置MSS参数，因此，TCP/IP希望每次都能够以MSS尺寸的数据块来发送数据）。Nagle算法就是为了尽可能发送大块数据，避免网络中充斥着许多小数据块。\n\n  Nagle算法的基本定义是**任意时刻，最多只能有一个未被确认的小段**。 所谓“小段”，指的是小于MSS尺寸的数据块，所谓“未被确认”，是指一个数据块发送出去后，没有收到对方发送的ACK确认该数据已收到。\n\n  Nagle算法的规则（可参考tcp_output.c文件里tcp_nagle_check函数注释）：\n\n  （1）如果包长度达到MSS，则允许发送；\n\n  （2）如果该包含有FIN，则允许发送；\n\n  （3）设置了TCP_NODELAY选项，则允许发送；\n\n  （4）未设置TCP_CORK选项时，若所有发出去的小数据包（包长度小于MSS）均被确认，则允许发送；\n\n  （5）上述条件都未满足，但发生了超时（一般为200ms），则立即发送。\n\n  ```bash\n      if there is new data to send #有数据要发送\n          # 发送窗口缓冲区和队列数据 >=mss，队列数据（available data）为原有的队列数据加上新到来的数据\n          # 也就是说缓冲区数据超过mss大小，nagle算法尽可能发送足够大的数据包\n          if the window size >= MSS and available data is >= MSS \n              send complete MSS segment now # 立即发送\n          else\n              if there is unconfirmed data still in the pipe # 前一次发送的包没有收到ack\n                  # 将该包数据放入队列中，直到收到一个ack再发送缓冲区数据\n                  enqueue data in the buffer until an acknowledge is received \n              else\n                  send data immediately # 立即发送\n              end if\n          end if\n      end if　\n  ```\n\n  Nagle算法只允许一个未被ACK的包存在于网络，它并不管包的大小，因此它事实上就是一个扩展的停-等协议，只不过它是基于包停-等的，而不是基于字节停-等的。\n\n+ **TCP确认延迟机制**\n\n  当Server端收到数据之后，它并不会马上向client端发送ACK，而是会将ACK的发送延迟一段时间（假设为t），它希望在t时间内server端会向client端发送应答数据，这样ACK就能够和应答数据一起发送，就像是应答数据**捎带着ACK**过去。初始化是40ms。\n\n+ **TCP_NODELAY 选项**\n\n  默认情况下，发送数据采用Nagle 算法。这样虽然提高了[网络吞吐量](https://baike.baidu.com/item/网络吞吐量/646450)，但是实时性却降低了，在一些交互性很强的应用程序来说是不允许的，使用TCP_NODELAY选项可以禁止Nagle 算法。\n\n  此时，应用程序向内核递交的每个数据包都会立即发送出去。需要注意的是，虽然禁止了Nagle 算法，但网络的传输仍然受到TCP确认延迟机制的影响。\n\n+ **TCP_CORK 选项**\n\n  所谓的CORK就是塞子的意思，形象地理解就是用CORK将连接塞住，使得数据先不发出去，等到拔去塞子后再发出去。设置该选项后，内核会尽力把小数据包拼接成一个大的数据包（一个MTU）再发送出去，当然若一定时间后（一般为200ms，该值尚待确认），内核仍然没有组合成一个MTU时也必须发送现有的数据（不可能让数据一直等待吧）。\n\n##### TCP拥塞控制\n\n+ 拥塞控制：防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载。拥塞控制所要做的都有一个前提：网络能够承受现有的网络负荷。拥塞控制是一个全局性的过程，涉及到所有的主机、路由器，以及与降低网络传输性能有关的所有因素。\n\n+ 流量控制：指点对点通信量的控制，是端到端的问题。流量控制所要做的就是抑制发送端发送的速率，以便使接收端来得及接收。\n\n解决拥塞问题一般是以下步骤: 1) 监测网络, 探测拥塞的位置与时间;  2) 将拥塞信息发送到能采取控制的地方; 3) 调整网络参数.\n\n常用方法: 慢开始( slow-start )、拥塞避免( congestion avoidance )、快重传( fast retransmit )和快恢复( fast recovery )。\n\n###### 慢开始\n\n发送方维持一个拥塞窗口 cwnd ( congestion window )的状态变量。拥塞窗口的大小取决于网络的拥塞程度，并且动态地在变化。发送方让自己的发送窗口等于拥塞窗口。发送方控制拥塞窗口的原则是：只要网络没有出现拥塞，拥塞窗口就再增大一些，以便把更多的分组发送出去。但只要网络出现拥塞，拥塞窗口就减小一些，以减少注入到网络中的分组数。\n\n慢开始算法：当主机开始发送数据时，如果立即所大量数据字节注入到网络，那么就有可能引起网络拥塞，因为现在并不清楚网络的负荷情况。因此，较好的方法是先探测一下，即由小到大逐渐增大发送窗口，也就是说，由小到大逐渐增大拥塞窗口数值。通常在刚刚开始发送报文段时，先把拥塞窗口 cwnd 设置为一个最大报文段MSS的数值。而在每收到一个对新的报文段的确认后，把拥塞窗口增加至多一个MSS的数值。用这样的方法逐步增大发送方的拥塞窗口 cwnd ，可以使分组注入到网络的速率更加合理。 cwnd = 1, 2, 4, 8 ...\n\n为了防止拥塞窗口cwnd增长过大引起网络拥塞，还需要设置一个慢开始门限ssthresh状态变量。慢开始门限ssthresh的用法如下：\n\n　　当 cwnd < ssthresh 时，使用上述的慢开始算法\n　　当 cwnd > ssthresh 时，停止使用慢开始算法而改用拥塞避免算法\n　　当 cwnd = ssthresh 时，既可使用慢开始算法，也可使用拥塞控制避免算法\n\n###### 拥塞避免\n\n让拥塞窗口cwnd缓慢地增大，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是加倍。这样拥塞窗口cwnd按线性规律缓慢增长，比慢开始算法的拥塞窗口增长速率缓慢得多。\n\n无论在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞（其根据就是没有收到确认），就要把慢开始门限ssthresh设置为出现拥塞时的发送方窗口值的一半（但不能小于2）。然后把拥塞窗口cwnd重新设置为1，执行慢开始算法。这样做的目的就是要迅速减少主机发送到网络中的分组数，使得发生拥塞的路由器有足够时间把队列中积压的分组处理完毕。\n\n<img src=\"./tcp_slow_start.png\" alt=\"image-20220128190952845\" style=\"zoom:40%;\" />\n\n###### 快重传和快恢复\n\n快重传算法首先要求接收方每收到一个报文段后(即便是后序)就立即发出重复确认（为的是使发送方及早知道有报文段没有到达对方），而不要等到自己发送数据时才进行捎带确认。当发送方连续收到三个重复确认，就执行“乘法减小”算法，把慢开始门限ssthresh减半。在采用快恢复算法时，慢开始算法只是在TCP连接建立时和网络出现超时时才使用。采用这样的拥塞控制方法使得TCP的性能有明显的改进。\n\n<img src=\"./tcp_congest.png\" alt=\"image-20220128190034654\" style=\"zoom:50%;\" />\n\n##### TCP连接管理\n\n###### 三次握手\n\n三次握手是为了建立连接, 双方确认对方的存在,并协商一些参数,如窗口大小 , 初始化一下缓冲队列资源等. 为了确认双方存在, 头两次sync, sync+ack是 省不了的, 那第三次ack是为了做什么呢? 是为了避免已失效的sync请求又抵达B, 又消耗B的资源. 有了第三次ack, 当无效的syn被server sync+ack后, client不会回复ack, 超时后server也就会再销毁掉对应资源.\n\n<img src=\"./tcp_handshake.png\" alt=\"image-20220129000032602\" style=\"zoom:50%;\" />\n\n###### 四次挥手\n\n<img src=\"./tcp_bye_handshake.png\" alt=\"image-20220129002627713\" style=\"zoom:50%;\" />\n\n**MSL**: Max Segment lifetime, 报文端最大寿命. \n\n为什么A收到 FIN 后要等两个MSL呢? \n\n1. 确保能回复FIN的ack, 如果B没收到ack, 会重新发送FIN+ACK. 这时如果A已经断了, B就只能自己特殊处理到CLOSED状态.\n2. 尽量让本次连接 网络中的网络包都传输完, 不会在新连接中收到旧连接报文.\n\n##### TCP有限状态机\n\n<img src=\"./tcp_state.png\" alt=\"image-20220129152318656\" style=\"zoom:50%;\" />\n\n\n\n#### 应用层\n\n## 应用层常用协议\n\n### DNS\n\n基于UDP, **53**端口:  query请求(src port: 12868 , dst port: 53 ) + response响应(src port: 53, dst port: 12868 )\n\n迭代查询 or 递归查询 + 缓存. \n\n**解析顺序**: 浏览器缓存, 系统缓存, 路由器DNS缓存 , ISP DNS 缓存, 根域名服务器, 顶级域名服务器, 主域名服务器, 保存结果至缓存.\n\n<img src=\"./dns.png\" alt=\"image-20220129165409193\" style=\"zoom:40%;\" />\n\n### HTTP\n\nHTTP协议发展历程:\n\n![image-20220127112311050](/Users/talentxiet/Library/Application Support/typora-user-images/image-20220127112311050.png)\n\n协议格式:\n\n<img src=\"./http_protocol.png\" alt=\"image-20220130002354946\" style=\"zoom:50%;\" />\n\n### SMTP\n\n<img src=\"./smtp.png\" alt=\"image-20220130002634963\" style=\"zoom:45%;\" />\n\n### DHCP\n\n<img src=\"./dhcp.png\" alt=\"image-20220130221121647\" style=\"zoom:50%;\" />\n\n## 应用程序间通信过程\n\n### 系统调用&socket套接字\n\n<img src=\"./syscall.png\" alt=\"image-20220130221429374\" style=\"zoom:50%;\" />\n\n<img src=\"./socket2.png\" alt=\"image-20220130224749539\" style=\"zoom:50%;\" />\n\n\n\n## 网络安全\n\n四个目标:\n\n+ 保密性\n+ 端点鉴别\n+ 信息完整性\n+ 运行安全性 访问控制\n\n<img src=\"./net_sec_key.png\" alt=\"image-20220205185347484\" style=\"zoom:50%;\" />\n\n### DES AES\n\ndata encryption standard,  advanced encrytion standard, 对称加密、\n\n### 公钥密码体制\n\n任何加解密算法的安全性都取决于密钥长度,以及攻破密文的计算量\n\n### 数字签名\n\n目标:\n\n+ 接收者能核实发送者对报文的数字签名, 即是发送者发的\n+ 收到的数据是完整的\n+ 发送者事后不可抵赖数字签名\n\n<img src=\"./signature.png\" alt=\"image-20220205191312308\" style=\"zoom:50%;\" />\n\n### 报文鉴别\n\n加解密算法可以实现报文鉴别,但是消耗cpu, 所以常用密码散列算法保护数据完整性. MD5 (message digest 第五代)和 SHA-1,2,3(secure hash algorithm).\n\n<img src=\"./sec_mac.png\" alt=\"image-20220205193055077\" style=\"zoom:50%;\" />\n\nMAC: message authentication code,\n\n### 密钥分配\n\n#### 对称密钥分配\n\n对称密钥是一对一的, 任意双方通信都要有唯一的key, 通常由KDC动态随机分配\n\n<img src=\"./对称密钥分配.png\" alt=\"image-20220205195510847\" style=\"zoom:50%;\" />\n\n#### 公钥分配\n\n由受信任的机构维护公钥和实体的关系, 通常是政府机构, 称之为CA (certification authority), 每个实体会被颁布 证书(certificate), 证书中包含拥有者标示, 公钥, 且此证书被CA进行了数字签名. 公众可以从机构公开信息中获取到机构的公钥, 对签名和 证书信息进行验证.\n\n为了使CA拥有统一格式, IETF接受了ITU制定的X.509规范.\n\n### 互联网中的安全协议\n\n#### 网络层\n\n##### IPsec\n\n<img src=\"./ipsec.png\" alt=\"image-20220206000051358\" style=\"zoom:50%;\" />\n\n#### 传输层\n\n##### SSL\n\nSecure Socket Layer, Netscape开发, 95年交给IETF\n\n<img src=\"./ssl.png\" alt=\"image-20220206001829432\" style=\"zoom:50%;\" />\n\n<img src=\"./ssl_procedure.png\" alt=\"image-20220206002408083\" style=\"zoom:50%;\" />\n\n##### TLS\n\nTransport Layer Security, 基于SSL3.0设计. \n\n### 防火墙\n\n是一种访问控制技术, 通常是特殊编程的路由器, 进行访问策略控制. \n\n+ 分组过滤路由器: 根据 源/目的 IP/端口 协议类型进行分组过滤控制.\n+ 应用网关: 应用层网关, 根据应用层报文鉴权转发\n\n## 实时音视频相关协议\n\n<img src=\"./av_protocols.png\" alt=\"image-20220206165809797\" style=\"zoom:50%;\" />\n\n### RTP\n\n<img src=\"./rtp_protocol.png\" alt=\"image-20220206165710831\" style=\"zoom:50%;\" />\n\n### RTCP\n\n<img src=\"./rtcp.png\" alt=\"image-20220206172316751\" style=\"zoom:50%;\" />\n\n## 常见网络设备\n\n### Repeater中继器\n\n中继器是一个将输入信号增强放大的设备, 把信号送得更远，以延展网络长度. 与具体信号形式无关,比如卫星雷达, 以太网集线器; 属于物理层\n\n### Hub集线器 \n\n集线器（Ethernet hub）是指将多条以太网双绞线或光纤集合连接在同一段物理介质下的设备。集线器运作在OSI模型中的物理层，可以让其链接的设备工作在同一网段。集线器上有多个I/O端口，信号从任意一个端口进入后，会从其他端口出现. \n\n由于集线器会把收到的任何数字信号，从集线器的所有端口提交，这会造成信号之间碰撞的机会很大，而且信号也可能被窃听，并且这代表所有连到集线器的设备，都是属于同一个冲突网域以及广播网域(hub间组网所有hub都属于同一广播域), 冲突和泛洪严重，因此大部分Hub已被Switch代替.\n\n<img src=\"./hub_pic.png\" alt=\"image-20220121154139634\" style=\"zoom:35%;\" />\n\n### Bridge网桥\n\n网桥工作在第二层数据链路层, 可以解析出链路层数据包, 并在Bridge内维护每个端口和连接着的设备MAC地址映射关系, 从而可以动态判断是否要转发收到的物理帧, 从而在一定程度上解决hub间的泛洪问题.\n\n<img src=\"/Users/talentxiet/Desktop/我的学习文档/网络基础/bridge_pic.png\" alt=\"image-20220121155228284\" style=\"zoom:50%;\" />\n\n### Switch交换机\n\n二层交换机: 二层交换机工作在数据链路层, 相比Hub, 它可以解析物理帧中的链路层frame信息,并基于frame中的mac地址与交换机端口进行缓存映射, 从而高效的解决Hub的冲突, 泛洪等问题. 此外交换机通常还支持划分VLAN的功能, VLAN可以创建相互隔离的子LAN, 从而缩小广播域大小. \n\n<img src=\"./switch_pic.png\" alt=\"image-20220121160921808\" style=\"zoom:55%;\" />\n\n交换机组网示例:\n\n<img src=\"./switch_net.png\" alt=\"image-20220122201304858\" style=\"zoom:50%;\" />\n\n三层交换机: 三层交换机在交换机的基础之上加了网络层协议的解析能力, 以及一些简单的三层路由功能. 不过它的主要功能还是交换机的，同时它的价格比路由器价格偏低，实用性更高。\n\n一个真实的交换机图片如下所示:\n\n<img src=\"./real_switch.png\" alt=\"image-20220122202630798\" style=\"zoom:38%;\" />\n\n### Router路由器 (网关)\n\n讲到路由器,我们要先讲一下IP子网和网关(Gateway), IP地址+掩码标示了IP网段, 不同网段间的网络相互隔离. 而网关, 顾名思义, 就是不同网络间连接的关口, 在网络层上实现网络连通. 网关概念也可延伸到应用服务网关, 这里我们讨论的均指TCP/IP协议下网关.\n\n在TCP/IP协议的系统内核层, 会在网络层向链路层封包时, 检测目标IP与源IP是否在同一子网, 如果在同一子网, 封包时的对端MAC地址通过ARP协议获取; 而当不在同一子网时, 会使用网关的MAC作为目标MAC地址. 可以用下图思考一下, 不同子网间通信时的隔离性到底是如何实现的? \n\n<img src=\"./ip_group_question.png\" alt=\"image-20220122220139210\" style=\"zoom:40%;\" />\n\n不同的IP网段可以设置不同的网关地址, 从而细粒度的控制流量出口. 一个默认macos下的路由表配置如下, 该机器ip为192.168.0.108, default网关为192.168.0.1, 访问127.0.0.1时会loopback到自己网卡, 访问192.168.0/24网段时会在en0网卡所处的进行链路层进行二层数据通信. \n\n<img src=\"./routing_table.png\" alt=\"image-20220122215006525\" style=\"zoom:50%;\" />\n\n路由器实现了网关的功能, 它工作的三层网络层, 可以实现三层协议的解包路由等功能. 当然路由器还有很多其他功能, 比如NAT等. \n\n路由器上会有很多网口, 可以按用处分为WAN口和LAN口, WAN口指的是接入其他Wide Area Network广域网的网口, LAN口指的是接入路由器内部Local Area Network局域网的网口. 往往内部LAN还支持Wifi的接入, 成为Wireless LAN (WLAN).  每个WAN口均可以提供三层能力, 即可配置独立的MAC及IP地址(独立网卡); LAN口则往往只具备二层传输能力, 提供交换机的功能. 具备三层能力的LAN口可以通过路由器配置作为WAN口服务.\n\n<img src=\"/Users/talentxiet/Desktop/我的学习文档/网络基础/router_wan_lan.png\" alt=\"router_wan_lan\" style=\"zoom:40%;\" />\n\n当路由器要串联多组子网时, 若想要子网间按期望进行通信的话, 就需要正确配置Router的路由表了. 路由表比较核心的三个配置属性是Destination, Gateway 和 Interface. \n\nDestination可以是网段, Host或者default (均不匹配时), 路由器网卡收到frame并解出目标IP后, 会逐一进行匹配, 匹配到对应记录后, 会按路由表配置, 将frame的目标MAC地址转换为所配网关的MAC地址, 并通过指定配置的Interface发送出去. 当没配置网关时, 会在Interface广播域对目标IP进行广播寻址.\n\n<img src=\"/Users/talentxiet/Desktop/我的学习文档/网络基础/router_trans.png\" alt=\"router_transfer\" style=\"zoom:36%;\" />\n\n<img src=\"./router_trans2.png\" alt=\"image-20220124222512944\" style=\"zoom:50%;\" />\n\n一个真实企业级路由器的图片如下: \n\n<img src=\"/Users/talentxiet/Desktop/我的学习文档/网络基础/real_router.png\" alt=\"image-20220122203856676\" style=\"zoom:45%;\" />\n\n### F5\n\nF5是一家美国公司, 卖的F5设备可提供4-7层的解包和路由能力, 相比工作于网络层的Router其功能就更丰富了. 包括负载均衡，应用状态监控，高可用性保障，广域流量管理，链路控制；内容转换，高速缓存，SSL加速和卸载等能力等等.\n\n<img src=\"./real_f5.png\" alt=\"image-20220122205509626\" style=\"zoom:60%;\" />\n\n## 真实组网案例\n\n### 公共网络\n\n\n\n### 家庭网络\n\n\n\n## Glossary:\n\n### Ethernet 以太网\n\n以太网(Ethernet)是一种计算机局域网技术, 提出于1980s。IEEE组织的IEEE 802.3标准制定了以太网的技术标准, 后续延伸出了802.3~11标准，它规定了包括物理层的连线、电子信号和介质访问层协议的内容。以太网是当前应用最普遍的局域网技术，取代了其他局域网标准如令牌环、FDDI 和 ARCNET。\n\n### 广播域 broadcast domain\n\n广播域（Broadcast domain）是计算机网络的一个逻辑划分。广播域中的任意一个节点可以在数据链路层通过广播的方式到达任意一个节点。广播域可以处于同一个局域网内,也可以被桥接到其他的局域网。\n\n根据目前的流行技术，任意连接到同一 repeater 或者 switch 的电脑属于同一个广播域，并且任意连接到同一个inter-connected的 repeater 或 switch 的集合的电脑也是属于同一个广播域的。而 Router 和其他high-level devices会在广播域间形成隔离。\n\n### 冲突域 collision domain\n\n与广播域相对的是冲突域。冲突域中所有节点都链接到同一个被集线器、交换机和学习型网桥划分的相互连接的中继器集合。冲突域一般来说小于或者包含在广播域中。 冲突域下的碰撞问题通过CSMA/CD (Carrier-sense multiple access)解决.\n\n\n\n## 常用命令\n\n### traceroute实现\n\n向目标ip发送ICMP echo包或随机30000+大端口发送udp包,  通过TTL和ICMP结果返回报文判断路由点地址和通信时间.\n\n","source":"_posts/network-base.md","raw":"\n---\ntitle: 网络基础知识\n---\n\n\n## 分层模型 OSI model\n\n**Open Systems Interconnection model** (**OSI model**) 开放系统互联模型是一个概念性的参考模型, 不指定任何协议的具体实现. 核心思想在于不同网络层级间的解耦、接口独立, 任何一层协议可以升级替换后不影响整个网络功能, 在网络通信协议设计时起到一个指导作用.  \n<img src=\"osi7.png\" alt=\"image-osi\" style=\"zoom:50%;\" />\n\n### Definitions:\n\n+ 通信协议(Communication protocols): 让处于同层的不同host实体可以相互交互.\n\n+ Protocol data unit(PDU): 在每一层, 两个实体通过交换该层协议的PDU来进行交互, PDU包含payload(也称为[service data unit](https://en.wikipedia.org/wiki/Service_data_unit) ,SDU) 和 protocol-related headers or footers . \n\n+  数据通信流程: 从Layer highest开始, PDU向下层传递, 并作为下层的SDU; 重复向更下层传递直至Layer lowest; 接着,底层负责将PDU传递给对端底层; 然后,逐层向上传递,拆包解析出各层SDU.\n\n<img src=\"./osi_pdu_pass.png\" alt=\"image-20220119105145560\" style=\"zoom:40%;\" />\n\n<img src=\"osi_transfer_example.png\" alt=\"image-20220123111825642\" style=\"zoom:43%;\" />\n\n### Layer architecture\n\n#### Layer 1: Physical layer\n\n物理层负责非结构化原始数据的传输和接收, between device和物理传输介质。它将raw digital bits转换成electrical电子,optical光学 或radio无线信号等. 物理层规范规格包含蓝牙、以太网和USB标准等.\n\nExamples: Ethernet family 802.3 PHY(千兆宽带, 百兆宽带), 802.11 LAN & wireless(2.4Ghz, 5Ghz), BLE(Bluetooth Low Energy) PHY,   E1.\n\n#### Layer 2: Data link layer\n\n物理层的线路有传输介质与通信设备组成，比特流在传输介质上传输时肯定会存在误差错误的。这样就引入了数据链路层在物理层之上，采用差错检测、差错控制和流量控制等方法，向网络层提供高质量的数据传输服务。\n\n数据链路层从网络层接受数据包, 并在将其发送到物理层之前, 将这些数据包封装成帧frame. 之后在两个相邻节点间(node to node)的链路上传送帧，每一帧包括**数据**和必要的**头尾信息**（如同步信息、地址信息、差错信息等）. 如果帧太大(超过MTU)的话，数据链路层通常会将大帧拆分为一个个的小帧，小帧能够使传输控制和错误检测更加高效。\n\n#### Layer 3: Network layer\n\n网络层的任务就是提供能在不同的网络间transfer packets的程序和方法. 网络中会有非常多的nodes, 每个node会拥有自己的访问地址, 网络层就是要提供一种节点间路由寻址方式能让packet准确的传递给destination. 网络层还会在packet在某些MTU较小链路层传输时, 对原包进行分片, 独立传输, 并在下一链路node重新装配.  网络层可以做数据错误校验, 可靠性保障的功能, 但并不necessary.\n\n#### Layer 4: Transport layer\n\n传输层负责将变长数据(variable-length data sequences)从源传输到目的地, 并提供保障QoS的方式. \n\n#### Layer 5: Session layer\n\n会话层的主要功能是负责维护两个节点之间的传输联接，确保点到点传输不中断，以及管理数据交换等功能。会话层在应用进程中建立、管理和终止会话。\n\n#### Layer 6: Presentation layer\n\n表示层的主要功能是处理在两个通信系统中交换信息的表示方式，主要包括数据格式变化、[数据加密](https://baike.baidu.com/item/数据加密/11048982)与解密、[数据压缩](https://baike.baidu.com/item/数据压缩/5198909)与解压等\n\n#### Layer 7: Application layer\n\n该层直接面向用户，是OSI中的最高层。它的主要任务是为用户提供应用的接口，即提供不同计算机间的文件传送、访问与管理，电子邮件的内容处理，不同计算机通过网络交互访问的虚拟终端功能等.\n\n### Protocol stack examples\n\n#### BLE protocol stack\n\n<img src=\"./ble_osi.png\" alt=\"ble_osi\" style=\"zoom:80%;\" />\n\n## 分层模型——TCP/IP模型及协议族\n\nTCP/IP 模型将网络分为四层(算上物理层就是五层)，它不关注底层物理介质，主要关注终端之间的逻辑数据流转发。\nTCP/IP 模型的核心是**网络层**和**传输层**，网络层解决网络之间的逻辑转发问题，传输层保证源端到目的端之间的可靠传输。最上层的**应用层**通过各种协议向终端用户提供业务应用。\n\n### 物理层\n\n任何协议栈都逃不脱最终帮其传输数据的物理层. 物理层传递的都是bit flow, 而以太网使用的都是曼彻斯特编码信号. 曼彻斯特(Manchester)编码的编码方法是把每个码元分成两个相等的间隔。 如图,码元1是前一个间隔为高电压后一个间隔为低电压，即位周期中心向下跳变表示1；码元0正好相反，位周期中心向上跳变表示0。这样保证了在每一个 码元中间出现一次电压的转换，接收端就利用这种电压的转换方便地把位同步信号提取出来.\n\n<img src=\"./manchester.png\" alt=\"image-20220125225252662\" style=\"zoom:45%;\" />\n\n在链路层从物理层收到的bit流中提取数据时, 一个问题就是如何区分帧的开始.  Manchester + Preamble.\n\n<img src=\"./preamble.png\" alt=\"image-20220125230003591\" style=\"zoom:40%;\" />\n\n### 数据链路层\n\n数据链路层位于网络层之下, 这意味着它与网络层协议比如常用的IP协议是解耦的, 以**以太网数据链路层帧**为例, 在通信时, 其完全不关心payload中是IP协议报文或是其他协议报文, 而是完全通过帧首的源MAC、目标MAC地址进行寻址通信.\n\nIEEE 802 规范下数据链路层向下还可细分为 logical link control (LLC) 层和 medium access control (MAC) 层。\n\n<img src=\"./datalinklayer_sublayers.png\" alt=\"dll_sublayes\" style=\"zoom:40%;\" />\n\nLLC 层又叫做`逻辑控制链路`层，它主要用于数据传输，它充当网络层和数据链路层中的`媒体访问控制（MAC）`子层之间的接口。LLC 层的主要功能如下\n\n- LLC 的主要功能是发送时在 MAC 层上多路复用协议，并在接收时同样地多路分解协议。\n- LLC 提供跳到跳的流的差错控制，像是路由器和路由器之间这种相邻节点的数据传输称为 `一跳`。\n- 它允许通过计算机网络进行多点通信。\n\nMAC 层负责传输介质的流控制和多路复用，它的主要功能如下\n\n- MAC 层为 LLC 和 OSI 网络的上层提供了物理层的抽象。\n- MAC 层负责封装帧，以便通过物理介质进行传输。\n- MAC 层负责解析源和目标地址。\n- MAC 层还负责在冲突的情况下执行冲突解决并启动重传。\n- MAC 层负责生成帧校验序列，从而有助于防止传输错误。\n\n在 MAC 层中，有一个关键概念是 `MAC 地址`。MAC 地址主要用于识别数据链路中互联的节点. MAC 地址长 6 bytes (48 bit)，在使用`网卡(NIC)` 的情况下，MAC 地址一般都会烧入 ROM 中。因此，任何一个网卡的 MAC 地址都是唯一的。\n\n<img src=\"/Users/talentxiet/Desktop/我的学习文档/网络基础/mac_addr.png\" alt=\"mac_addr\" style=\"zoom:28%;\" />\n\n链路层的差错控制通过增加差错编码来实现, 又可分为**检错编码**和**纠错编码**: 检错编码常见有奇偶校验码和循环冗余码; 纠错编码常见有海明码等.\n\n流量(阻塞)控制是控制链路上的帧的发送速率，使接收方有足够的缓冲空间来接收帧，主要方法有两种，停止-等待协议和滑动窗口协议. 停止-等待协议是一种特殊的滑动窗口协议，相当于发送窗口和接收窗口大小为1的滑动窗口协议。\n\n<img src=\"./datalink_timewindow.png\" alt=\"image-20220121112137195\" style=\"zoom:40%;\" />\n\n以太网上传输的链路层数据帧有两种格式：**Ethernet_II 和 IEEE802.3**。选择哪种格式由 TCP/IP 协议簇中的网络层决定。大多数的数据帧使用的是 Ethernet_II 格式. IEEE802.3 格式：Length字段值小于等于0x05DC. Ethernet_II 格式：Type 字段值大于等于0x0600. 以此来供链路层判断数据是哪种规范.\n\n<img src=\"./data_link_layer_frame.png\" alt=\"image-20220119143457079\" style=\"zoom:45%;\" />\n\nFCS: frame check sequence, 错误检查的.\nLLC：Logical Link Control，逻辑链路控制由目的访问点 D.SAP （Destination Service Access Point）、源服务访问点 S.SAP（Source Service Access Point）和 Control 字段组成.\nSNAP：Sub-network Access Protocol，子网访问协议由机构代码（Org Code）和类型（Type）字段组成。Org Code 三个字节都为 0 。Type 字段的含义与 Ethernet_II 帧中的 Type 字段相同.\n\n### 网络层\n\n#### **IP协议**\n\n- 对于网络层，**IP协议**是其中一个非常重要的协议\n- IP协议使得复杂的实际网络变为一个**虚拟互联的网络**（也就是我们只需要将终端设备连接到这个网络中去即可，并不需要关心里边实际的复杂网络）\n- IP协议使得网络层可以**屏蔽底层细节**而专注网络层的**数据转发**（如果单从网络层去看，我们是不用关心**数据包**是通过海底电缆还是通过无线WiFi传输到目的计算机的）\n- IP协议**解决了在虚拟网络中数据报传输路径的问题**\n\n<img src=\"./ip_nets.png\" alt=\"image-20220125231347009\" style=\"zoom:40%;\" />\n\n**IP协议特点:**\n\n- 无状态, 是指IP通信双方不同步传输数据的状态信息，因此所有IP数据报的发送，传输，和接收都是相互独立的，没有山下文关系的。发送、传输和接收都是相互独立、没有上下文关系的。这种服务最大的缺点是无法处理乱序和重复的IP数据报。比如发送端发送出的第N个IP数据报可能比第N+1个IP数据报后到达接收端，而同一个IP数据报也可能经过不同的路径多次到达接收端。在这两种情况下，接收端的IP模块无法检测到乱序和重复，因为这些IP数据报之间没有任何上下文关系。接收端的IP模块只要收到了完整的IP数据报(如果是IP分片的话，IP 模块将先执行重组)，就将其数据部分(TCP报文段、UDP数据报或者ICMP报文)，上交给上层协议。那么从上层协议来看，这些数据就可能是乱序的、重复的。面向连接的协议，比如TCP协议，则能够自己处理乱序的、重复的报文段，它递交给上层协议的内容绝对是有序的、正确的。虽然IP数据报头部提供了一个标识字段(见后文)用以唯-标识-一个IP数据报，但它是被用来处理IP分片和重组的，而不是用来指示接收顺序的。无状态服务的优点也很明显:简单、高效。我们无须为保持通信的状态而分配一些内核资源，也无须每次传输数据时都携带状态信息。在网络协议中，无状态是很常见的，比如UDP协议和HTTP协议都是无状态协议。以HTTP协议为例，一个浏览器的连续两次网页请求之间没有任何关联，它们将被Web服务器独立地处理。\n- 无连接(connectionless), 是指IP通信双方都不长久地维持对方的任何信息。这样，上层协议每次发送数据的时候，都必须明确指定对方的IP地址。\n- 不可靠, 是指IP协议不能保证IP数据报准确地到达接收端，它只是承诺尽最大努力(best effort)。 很多种情况都能导致IP数据报发送失败。比如，某个中转路由器发现IP数据报在网络上存活的时间太长(根据IP数据报头部字段TTL判断，见后文)，那么它将丢弃之，并返回一个ICMP错误消息(超时错误)给发送端。又比如，接收端发现收到的IP数据报不正确(通过校验机制)，它也将丢弃之，并返回一个ICMP错误消息(IP 头部参数错误)给发送端。无论哪种情况，发送端的IP模块一旦检测到IP数据报发送失败，就通知上层协议发送失败，而不会试图重传。因此，使用IP服务的上层协议(比如TCP协议)需要自己实现数据确认、超时重传等机制以达到可靠传输的目的。\n\n**IP协议报文格式 :**\n\n<img src=\"./ip_packet.png\" alt=\"image-20220125234059378\" style=\"zoom:40%;\" />\n\n- **版本**：占4位，指的是IP协议的版本，通信双方的版本必须一致，即IPv4，也有IPv6\n\n- **首部长度**：占4位，最大数值为15，表示的是IP首部的长度，单位是“32位字”（4个字节），也就是**IP首部**最大长度为60字节\n\n- **服务类型**：服务登记, 比如VIP专线, 这个一般是不需要关心的\n\n- **总长度**：占16位，最大数值为65535，表示的是**IP数据报总长度**（IP首部+IP数据） （在前边介绍数据链路层的时候，也提到过一个长度。对于数据链路层的长度，称之为**MTU**，一般为1500字节。而IP数据报的最大长度有65535个字节，比MTU要大。如果真正传输的时候，如果出现这种情况，数据链路层会对IP数据报进行**分片**，也就是将一个较长的IP数据报拆分成多个数据帧来进行传输）\n\n- **标识**：占16位，计数器标示, 分片后的同组数据具备相同标示. 同一组的包根据标示重组.\n\n- **标记**： 占3位，但目前只有2位有意义。\n   标志字段中的最低位记为MF(More Fragment)。MF=1即表示后面“还有分片”的数据报,MF=0表示这已是若干数据报片中的最后一个\n   标志字段中间的一位记为DF(Don’t Fragment)，意思是“不能分片”。只有当DF=0时才允许分片。\n   \n- **片偏移**：前边有提到，如果IP数据报的长度过长，会进行IP报文的分片，把一个IP报文拆分成多个数据帧进行数据链路层的传输(以**8 Bytes**的倍数分包)。因此，如果拆分的话，就需要使用**片偏移**来记录当前的数据帧，保存的**第几个偏移的IP数据**\n\n   <img src=\"./ip_offset.png\" alt=\"image-20220129104929487\" style=\"zoom:45%;\" />\n\n- **TTL**：占8位，表明IP数据报文在网络中的**寿命**，每经过一个设备（不管是路由器还是计算机），TTL减一，当TTL=0时，网络设备必须**丢弃**该报文（它解决的就是，当网络报文找不到终点的时候，避免网络报文在网络中无限的传输，以消耗带宽）\n\n- **协议**：占8位，表明IP数据所携带的具体数据是什么**协议**的（如TCP、UDP等，一些协议对应的值，可参考下图）\n\n- **校验和**：占16位，校验IP首部是否有出错（接收方接收到IP首部之后也会进行校验，如果有错，则直接丢弃）\n\n- **源IP地址**：**发送**IP数据报的网络设备的IP地址\n\n- **目的IP地址**：IP数据报要**到达**的目的网络设备的IP地址\n\n#### **ICMP协议**\n\n<img src=\"./icmp_kinds.png\" alt=\"image-20220126215905234\" style=\"zoom:50%;\" />\n\n#### **路由选择协议**\n\n**自治系统**：autonomous system。在互联网中，一个自治系统(AS)是一个有权自主地决定在本系统中应采用各种[路由协议](https://baike.baidu.com/item/路由协议/202634)的小型单位。这个网络单位可以是一个简单的网络也可以是一个由一个或多个普通的[网络管理员](https://baike.baidu.com/item/网络管理员/595848)来控制的网络群体，它是一个单独的可管理的[网络单元](https://baike.baidu.com/item/网络单元/9928606)（例如一所大学，一个企业或者一个公司个体）。\n\n<img src=\"./ip_routing_protocol.png\" alt=\"image-20220126220513526\" style=\"zoom:50%;\" />\n\n内部网关协议:\n\n+ RIP, Routing Information Protocol: 优点, 算法简单; 缺点, 路由故障链路改变远端感知慢, 距离有限 max16, 大规模网络路由表可能过大.\n\n<img src=\"./rip.png\" alt=\"image-20220126220918042\" style=\"zoom:50%;\" />\n\n+ OSPF, Open Shortest Path First 开放的最短路径优先算法: \n\n  与RIP三个区别:（1）向本[自治系统](https://baike.baidu.com/item/自治系统)中所有路由器发送信息。（2）发送的信息就是与本[路由器](https://baike.baidu.com/item/路由器)相邻的所有路由器的链路状态，但这只是路由器所知道的部分信息。（3）只有在链路状态发生变化时，[路由器](https://baike.baidu.com/item/路由器)才向所有路由器用[洪泛](https://baike.baidu.com/item/洪泛)法发送此信息。\n\n外部(边界)网关协议:\n\nBGP用于在不同的自治系统（AS）之间交换路由信息。当两个AS需要交换路由信息时，每个AS都必须指定一个运行BGP的节点，来代表AS与其他的AS交换路由信息。两个AS中利用BGP交换信息的路由器也被称为边界网关（Border Gateway）或边界路由器（Border Router）. \n\n<img src=\"./BGP_speaker.png\" alt=\"image-20220126223533819\" style=\"zoom:50%;\" />\n\n<img src=\"./BGP_example.png\" alt=\"image-20220126223429235\" style=\"zoom:40%;\" />\n\n\n\n### 传输层\n\n端口作用, 实现进程到进程的通信, 复用ip线路, 提供标准的的端口->进程的映射方式.\n\n<img src=\"./transport_process.png\" alt=\"image-20220126230009234\" style=\"zoom:50%;\" />\n\n#### UDP\n\nUDP, User Datagram Protocol用户数据报协议, 只在IP基础上多了复用分用和差错校验的功能.\n\n##### 特点\n\n+ 无连接\n+ 尽努力交付\n+ 面向报文的\n+ 无拥塞控制\n+ 支持一对一、一对多、多对一、多对多\n+ 首部开销小\n\n##### 协议格式\n\n<img src=\"./udp_protocol.png\" alt=\"image-20220126233302042\" style=\"zoom:45%;\" />\n\n#### TCP\n\n##### 特点\n\n+ 面向连接\n\n+ 每条点对点(socket1, socket2)\n\n+ 可靠的\n\n+ 全双工\n\n+ 面向字节流的\n\n+ 为应用程序间提供逻辑通信链路\n\n  <img src=\"./tcp_bytes_stream.png\" alt=\"image-20220129001752910\" style=\"zoom:50%;\" />\n\n##### 协议格式\n\n<img src=\"./tcp_protocol.png\" alt=\"image-20220127225910379\" style=\"zoom:50%;\" />\n\n**16位源端口号**：指发送端的端口号\n**16位目的端口号**：指目的端的端口号\n**4位头部长度**：同IP头部，表示TCP头部的大小，以4字节为单位。\n**32位序列号**：TCP通信过程中，通过序列号来保证传输过程中数据的有序性\n**32位确认号**：用以对接受到的报文进行确认\n**保留6位**\n**URG**：表示紧急指针\n**ACK**：表示确认号\n**PSH**：通知对端立即从缓冲区取走数据\n**RST**: 通知当前连接出现问题, 要释放资源, 有需要则重新建立连接. 也可用于拒绝非法连接. \n**SYN**：表示请求建立连接\n**FIN**：标志要通知对端本端的数据发送要关闭\n**16位窗口大小**：TCP流量控制的手段，告诉发送方本端的接收端缓冲区还能接受多少数据, 单位字节.\n**16位校验和**：由发送方填充，接收端用以检查TCP报文在传输过程中是否有损坏\n\n##### 可靠性\n\n###### 滑动窗口\n\nA根据B TCP ack报文中的窗口大小发送滑动窗口大小以内的若干数据给B, 给回复按序抵达的最大包序号, 即31. B不应过度拖延回复ack的时间.\n\n<img src=\"./tcp_window.png\" alt=\"image-20220128000255497\" style=\"zoom:50%;\" />\n\n<img src=\"./tcp_buffer.png\" alt=\"image-20220128000641845\" style=\"zoom:50%;\" />\n\n需注意, tcp是全双工通信, 每端都有自己的发送和接受窗口及缓冲. \n\n###### 超时重传时间 Retransmision Time out\n\n<img src=\"./tcp_rto.png\" alt=\"image-20220128001439268\" style=\"zoom:40%;\" />\n\n###### 选择确认ACK Selective ACK\n\nSACK用于接收端向发送端报告部分未按序已收到的字节块, 从而避免重复传输. 需要tcp连接时 option增加SACK头, 双方确认支持SACK. 但是描述哪些数据已接受其实是比较复杂的, 尽管RFC2018有详细说明, 但使用还是较少, 大部分还是发送端重发所有未ack字节.\n\n<img src=\"./tcp_sack.png\" alt=\"image-20220128002718253\" style=\"zoom:50%;\" />\n\n\n\n##### TCP流量控制\n\n###### 可利用滑动窗口控制发送方流量\n\n\n\n###### TCP传输效率\n\n应用程序把发送数据给到TCP缓存就不管了, 由TCP负责控制发送时机将数据正确的发送出去. 这是一个比较复杂的问题.\n\n+ **Nagle算法**\n\n  TCP/IP协议中，无论发送多少数据，总是要在数据前面加上协议头，同时，对方接收到数据，也需要发送ACK表示确认。为了尽可能的利用网络带宽，TCP总是希望尽可能的发送足够大的数据。（一个连接会设置MSS参数，因此，TCP/IP希望每次都能够以MSS尺寸的数据块来发送数据）。Nagle算法就是为了尽可能发送大块数据，避免网络中充斥着许多小数据块。\n\n  Nagle算法的基本定义是**任意时刻，最多只能有一个未被确认的小段**。 所谓“小段”，指的是小于MSS尺寸的数据块，所谓“未被确认”，是指一个数据块发送出去后，没有收到对方发送的ACK确认该数据已收到。\n\n  Nagle算法的规则（可参考tcp_output.c文件里tcp_nagle_check函数注释）：\n\n  （1）如果包长度达到MSS，则允许发送；\n\n  （2）如果该包含有FIN，则允许发送；\n\n  （3）设置了TCP_NODELAY选项，则允许发送；\n\n  （4）未设置TCP_CORK选项时，若所有发出去的小数据包（包长度小于MSS）均被确认，则允许发送；\n\n  （5）上述条件都未满足，但发生了超时（一般为200ms），则立即发送。\n\n  ```bash\n      if there is new data to send #有数据要发送\n          # 发送窗口缓冲区和队列数据 >=mss，队列数据（available data）为原有的队列数据加上新到来的数据\n          # 也就是说缓冲区数据超过mss大小，nagle算法尽可能发送足够大的数据包\n          if the window size >= MSS and available data is >= MSS \n              send complete MSS segment now # 立即发送\n          else\n              if there is unconfirmed data still in the pipe # 前一次发送的包没有收到ack\n                  # 将该包数据放入队列中，直到收到一个ack再发送缓冲区数据\n                  enqueue data in the buffer until an acknowledge is received \n              else\n                  send data immediately # 立即发送\n              end if\n          end if\n      end if　\n  ```\n\n  Nagle算法只允许一个未被ACK的包存在于网络，它并不管包的大小，因此它事实上就是一个扩展的停-等协议，只不过它是基于包停-等的，而不是基于字节停-等的。\n\n+ **TCP确认延迟机制**\n\n  当Server端收到数据之后，它并不会马上向client端发送ACK，而是会将ACK的发送延迟一段时间（假设为t），它希望在t时间内server端会向client端发送应答数据，这样ACK就能够和应答数据一起发送，就像是应答数据**捎带着ACK**过去。初始化是40ms。\n\n+ **TCP_NODELAY 选项**\n\n  默认情况下，发送数据采用Nagle 算法。这样虽然提高了[网络吞吐量](https://baike.baidu.com/item/网络吞吐量/646450)，但是实时性却降低了，在一些交互性很强的应用程序来说是不允许的，使用TCP_NODELAY选项可以禁止Nagle 算法。\n\n  此时，应用程序向内核递交的每个数据包都会立即发送出去。需要注意的是，虽然禁止了Nagle 算法，但网络的传输仍然受到TCP确认延迟机制的影响。\n\n+ **TCP_CORK 选项**\n\n  所谓的CORK就是塞子的意思，形象地理解就是用CORK将连接塞住，使得数据先不发出去，等到拔去塞子后再发出去。设置该选项后，内核会尽力把小数据包拼接成一个大的数据包（一个MTU）再发送出去，当然若一定时间后（一般为200ms，该值尚待确认），内核仍然没有组合成一个MTU时也必须发送现有的数据（不可能让数据一直等待吧）。\n\n##### TCP拥塞控制\n\n+ 拥塞控制：防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载。拥塞控制所要做的都有一个前提：网络能够承受现有的网络负荷。拥塞控制是一个全局性的过程，涉及到所有的主机、路由器，以及与降低网络传输性能有关的所有因素。\n\n+ 流量控制：指点对点通信量的控制，是端到端的问题。流量控制所要做的就是抑制发送端发送的速率，以便使接收端来得及接收。\n\n解决拥塞问题一般是以下步骤: 1) 监测网络, 探测拥塞的位置与时间;  2) 将拥塞信息发送到能采取控制的地方; 3) 调整网络参数.\n\n常用方法: 慢开始( slow-start )、拥塞避免( congestion avoidance )、快重传( fast retransmit )和快恢复( fast recovery )。\n\n###### 慢开始\n\n发送方维持一个拥塞窗口 cwnd ( congestion window )的状态变量。拥塞窗口的大小取决于网络的拥塞程度，并且动态地在变化。发送方让自己的发送窗口等于拥塞窗口。发送方控制拥塞窗口的原则是：只要网络没有出现拥塞，拥塞窗口就再增大一些，以便把更多的分组发送出去。但只要网络出现拥塞，拥塞窗口就减小一些，以减少注入到网络中的分组数。\n\n慢开始算法：当主机开始发送数据时，如果立即所大量数据字节注入到网络，那么就有可能引起网络拥塞，因为现在并不清楚网络的负荷情况。因此，较好的方法是先探测一下，即由小到大逐渐增大发送窗口，也就是说，由小到大逐渐增大拥塞窗口数值。通常在刚刚开始发送报文段时，先把拥塞窗口 cwnd 设置为一个最大报文段MSS的数值。而在每收到一个对新的报文段的确认后，把拥塞窗口增加至多一个MSS的数值。用这样的方法逐步增大发送方的拥塞窗口 cwnd ，可以使分组注入到网络的速率更加合理。 cwnd = 1, 2, 4, 8 ...\n\n为了防止拥塞窗口cwnd增长过大引起网络拥塞，还需要设置一个慢开始门限ssthresh状态变量。慢开始门限ssthresh的用法如下：\n\n　　当 cwnd < ssthresh 时，使用上述的慢开始算法\n　　当 cwnd > ssthresh 时，停止使用慢开始算法而改用拥塞避免算法\n　　当 cwnd = ssthresh 时，既可使用慢开始算法，也可使用拥塞控制避免算法\n\n###### 拥塞避免\n\n让拥塞窗口cwnd缓慢地增大，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是加倍。这样拥塞窗口cwnd按线性规律缓慢增长，比慢开始算法的拥塞窗口增长速率缓慢得多。\n\n无论在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞（其根据就是没有收到确认），就要把慢开始门限ssthresh设置为出现拥塞时的发送方窗口值的一半（但不能小于2）。然后把拥塞窗口cwnd重新设置为1，执行慢开始算法。这样做的目的就是要迅速减少主机发送到网络中的分组数，使得发生拥塞的路由器有足够时间把队列中积压的分组处理完毕。\n\n<img src=\"./tcp_slow_start.png\" alt=\"image-20220128190952845\" style=\"zoom:40%;\" />\n\n###### 快重传和快恢复\n\n快重传算法首先要求接收方每收到一个报文段后(即便是后序)就立即发出重复确认（为的是使发送方及早知道有报文段没有到达对方），而不要等到自己发送数据时才进行捎带确认。当发送方连续收到三个重复确认，就执行“乘法减小”算法，把慢开始门限ssthresh减半。在采用快恢复算法时，慢开始算法只是在TCP连接建立时和网络出现超时时才使用。采用这样的拥塞控制方法使得TCP的性能有明显的改进。\n\n<img src=\"./tcp_congest.png\" alt=\"image-20220128190034654\" style=\"zoom:50%;\" />\n\n##### TCP连接管理\n\n###### 三次握手\n\n三次握手是为了建立连接, 双方确认对方的存在,并协商一些参数,如窗口大小 , 初始化一下缓冲队列资源等. 为了确认双方存在, 头两次sync, sync+ack是 省不了的, 那第三次ack是为了做什么呢? 是为了避免已失效的sync请求又抵达B, 又消耗B的资源. 有了第三次ack, 当无效的syn被server sync+ack后, client不会回复ack, 超时后server也就会再销毁掉对应资源.\n\n<img src=\"./tcp_handshake.png\" alt=\"image-20220129000032602\" style=\"zoom:50%;\" />\n\n###### 四次挥手\n\n<img src=\"./tcp_bye_handshake.png\" alt=\"image-20220129002627713\" style=\"zoom:50%;\" />\n\n**MSL**: Max Segment lifetime, 报文端最大寿命. \n\n为什么A收到 FIN 后要等两个MSL呢? \n\n1. 确保能回复FIN的ack, 如果B没收到ack, 会重新发送FIN+ACK. 这时如果A已经断了, B就只能自己特殊处理到CLOSED状态.\n2. 尽量让本次连接 网络中的网络包都传输完, 不会在新连接中收到旧连接报文.\n\n##### TCP有限状态机\n\n<img src=\"./tcp_state.png\" alt=\"image-20220129152318656\" style=\"zoom:50%;\" />\n\n\n\n#### 应用层\n\n## 应用层常用协议\n\n### DNS\n\n基于UDP, **53**端口:  query请求(src port: 12868 , dst port: 53 ) + response响应(src port: 53, dst port: 12868 )\n\n迭代查询 or 递归查询 + 缓存. \n\n**解析顺序**: 浏览器缓存, 系统缓存, 路由器DNS缓存 , ISP DNS 缓存, 根域名服务器, 顶级域名服务器, 主域名服务器, 保存结果至缓存.\n\n<img src=\"./dns.png\" alt=\"image-20220129165409193\" style=\"zoom:40%;\" />\n\n### HTTP\n\nHTTP协议发展历程:\n\n![image-20220127112311050](/Users/talentxiet/Library/Application Support/typora-user-images/image-20220127112311050.png)\n\n协议格式:\n\n<img src=\"./http_protocol.png\" alt=\"image-20220130002354946\" style=\"zoom:50%;\" />\n\n### SMTP\n\n<img src=\"./smtp.png\" alt=\"image-20220130002634963\" style=\"zoom:45%;\" />\n\n### DHCP\n\n<img src=\"./dhcp.png\" alt=\"image-20220130221121647\" style=\"zoom:50%;\" />\n\n## 应用程序间通信过程\n\n### 系统调用&socket套接字\n\n<img src=\"./syscall.png\" alt=\"image-20220130221429374\" style=\"zoom:50%;\" />\n\n<img src=\"./socket2.png\" alt=\"image-20220130224749539\" style=\"zoom:50%;\" />\n\n\n\n## 网络安全\n\n四个目标:\n\n+ 保密性\n+ 端点鉴别\n+ 信息完整性\n+ 运行安全性 访问控制\n\n<img src=\"./net_sec_key.png\" alt=\"image-20220205185347484\" style=\"zoom:50%;\" />\n\n### DES AES\n\ndata encryption standard,  advanced encrytion standard, 对称加密、\n\n### 公钥密码体制\n\n任何加解密算法的安全性都取决于密钥长度,以及攻破密文的计算量\n\n### 数字签名\n\n目标:\n\n+ 接收者能核实发送者对报文的数字签名, 即是发送者发的\n+ 收到的数据是完整的\n+ 发送者事后不可抵赖数字签名\n\n<img src=\"./signature.png\" alt=\"image-20220205191312308\" style=\"zoom:50%;\" />\n\n### 报文鉴别\n\n加解密算法可以实现报文鉴别,但是消耗cpu, 所以常用密码散列算法保护数据完整性. MD5 (message digest 第五代)和 SHA-1,2,3(secure hash algorithm).\n\n<img src=\"./sec_mac.png\" alt=\"image-20220205193055077\" style=\"zoom:50%;\" />\n\nMAC: message authentication code,\n\n### 密钥分配\n\n#### 对称密钥分配\n\n对称密钥是一对一的, 任意双方通信都要有唯一的key, 通常由KDC动态随机分配\n\n<img src=\"./对称密钥分配.png\" alt=\"image-20220205195510847\" style=\"zoom:50%;\" />\n\n#### 公钥分配\n\n由受信任的机构维护公钥和实体的关系, 通常是政府机构, 称之为CA (certification authority), 每个实体会被颁布 证书(certificate), 证书中包含拥有者标示, 公钥, 且此证书被CA进行了数字签名. 公众可以从机构公开信息中获取到机构的公钥, 对签名和 证书信息进行验证.\n\n为了使CA拥有统一格式, IETF接受了ITU制定的X.509规范.\n\n### 互联网中的安全协议\n\n#### 网络层\n\n##### IPsec\n\n<img src=\"./ipsec.png\" alt=\"image-20220206000051358\" style=\"zoom:50%;\" />\n\n#### 传输层\n\n##### SSL\n\nSecure Socket Layer, Netscape开发, 95年交给IETF\n\n<img src=\"./ssl.png\" alt=\"image-20220206001829432\" style=\"zoom:50%;\" />\n\n<img src=\"./ssl_procedure.png\" alt=\"image-20220206002408083\" style=\"zoom:50%;\" />\n\n##### TLS\n\nTransport Layer Security, 基于SSL3.0设计. \n\n### 防火墙\n\n是一种访问控制技术, 通常是特殊编程的路由器, 进行访问策略控制. \n\n+ 分组过滤路由器: 根据 源/目的 IP/端口 协议类型进行分组过滤控制.\n+ 应用网关: 应用层网关, 根据应用层报文鉴权转发\n\n## 实时音视频相关协议\n\n<img src=\"./av_protocols.png\" alt=\"image-20220206165809797\" style=\"zoom:50%;\" />\n\n### RTP\n\n<img src=\"./rtp_protocol.png\" alt=\"image-20220206165710831\" style=\"zoom:50%;\" />\n\n### RTCP\n\n<img src=\"./rtcp.png\" alt=\"image-20220206172316751\" style=\"zoom:50%;\" />\n\n## 常见网络设备\n\n### Repeater中继器\n\n中继器是一个将输入信号增强放大的设备, 把信号送得更远，以延展网络长度. 与具体信号形式无关,比如卫星雷达, 以太网集线器; 属于物理层\n\n### Hub集线器 \n\n集线器（Ethernet hub）是指将多条以太网双绞线或光纤集合连接在同一段物理介质下的设备。集线器运作在OSI模型中的物理层，可以让其链接的设备工作在同一网段。集线器上有多个I/O端口，信号从任意一个端口进入后，会从其他端口出现. \n\n由于集线器会把收到的任何数字信号，从集线器的所有端口提交，这会造成信号之间碰撞的机会很大，而且信号也可能被窃听，并且这代表所有连到集线器的设备，都是属于同一个冲突网域以及广播网域(hub间组网所有hub都属于同一广播域), 冲突和泛洪严重，因此大部分Hub已被Switch代替.\n\n<img src=\"./hub_pic.png\" alt=\"image-20220121154139634\" style=\"zoom:35%;\" />\n\n### Bridge网桥\n\n网桥工作在第二层数据链路层, 可以解析出链路层数据包, 并在Bridge内维护每个端口和连接着的设备MAC地址映射关系, 从而可以动态判断是否要转发收到的物理帧, 从而在一定程度上解决hub间的泛洪问题.\n\n<img src=\"/Users/talentxiet/Desktop/我的学习文档/网络基础/bridge_pic.png\" alt=\"image-20220121155228284\" style=\"zoom:50%;\" />\n\n### Switch交换机\n\n二层交换机: 二层交换机工作在数据链路层, 相比Hub, 它可以解析物理帧中的链路层frame信息,并基于frame中的mac地址与交换机端口进行缓存映射, 从而高效的解决Hub的冲突, 泛洪等问题. 此外交换机通常还支持划分VLAN的功能, VLAN可以创建相互隔离的子LAN, 从而缩小广播域大小. \n\n<img src=\"./switch_pic.png\" alt=\"image-20220121160921808\" style=\"zoom:55%;\" />\n\n交换机组网示例:\n\n<img src=\"./switch_net.png\" alt=\"image-20220122201304858\" style=\"zoom:50%;\" />\n\n三层交换机: 三层交换机在交换机的基础之上加了网络层协议的解析能力, 以及一些简单的三层路由功能. 不过它的主要功能还是交换机的，同时它的价格比路由器价格偏低，实用性更高。\n\n一个真实的交换机图片如下所示:\n\n<img src=\"./real_switch.png\" alt=\"image-20220122202630798\" style=\"zoom:38%;\" />\n\n### Router路由器 (网关)\n\n讲到路由器,我们要先讲一下IP子网和网关(Gateway), IP地址+掩码标示了IP网段, 不同网段间的网络相互隔离. 而网关, 顾名思义, 就是不同网络间连接的关口, 在网络层上实现网络连通. 网关概念也可延伸到应用服务网关, 这里我们讨论的均指TCP/IP协议下网关.\n\n在TCP/IP协议的系统内核层, 会在网络层向链路层封包时, 检测目标IP与源IP是否在同一子网, 如果在同一子网, 封包时的对端MAC地址通过ARP协议获取; 而当不在同一子网时, 会使用网关的MAC作为目标MAC地址. 可以用下图思考一下, 不同子网间通信时的隔离性到底是如何实现的? \n\n<img src=\"./ip_group_question.png\" alt=\"image-20220122220139210\" style=\"zoom:40%;\" />\n\n不同的IP网段可以设置不同的网关地址, 从而细粒度的控制流量出口. 一个默认macos下的路由表配置如下, 该机器ip为192.168.0.108, default网关为192.168.0.1, 访问127.0.0.1时会loopback到自己网卡, 访问192.168.0/24网段时会在en0网卡所处的进行链路层进行二层数据通信. \n\n<img src=\"./routing_table.png\" alt=\"image-20220122215006525\" style=\"zoom:50%;\" />\n\n路由器实现了网关的功能, 它工作的三层网络层, 可以实现三层协议的解包路由等功能. 当然路由器还有很多其他功能, 比如NAT等. \n\n路由器上会有很多网口, 可以按用处分为WAN口和LAN口, WAN口指的是接入其他Wide Area Network广域网的网口, LAN口指的是接入路由器内部Local Area Network局域网的网口. 往往内部LAN还支持Wifi的接入, 成为Wireless LAN (WLAN).  每个WAN口均可以提供三层能力, 即可配置独立的MAC及IP地址(独立网卡); LAN口则往往只具备二层传输能力, 提供交换机的功能. 具备三层能力的LAN口可以通过路由器配置作为WAN口服务.\n\n<img src=\"/Users/talentxiet/Desktop/我的学习文档/网络基础/router_wan_lan.png\" alt=\"router_wan_lan\" style=\"zoom:40%;\" />\n\n当路由器要串联多组子网时, 若想要子网间按期望进行通信的话, 就需要正确配置Router的路由表了. 路由表比较核心的三个配置属性是Destination, Gateway 和 Interface. \n\nDestination可以是网段, Host或者default (均不匹配时), 路由器网卡收到frame并解出目标IP后, 会逐一进行匹配, 匹配到对应记录后, 会按路由表配置, 将frame的目标MAC地址转换为所配网关的MAC地址, 并通过指定配置的Interface发送出去. 当没配置网关时, 会在Interface广播域对目标IP进行广播寻址.\n\n<img src=\"/Users/talentxiet/Desktop/我的学习文档/网络基础/router_trans.png\" alt=\"router_transfer\" style=\"zoom:36%;\" />\n\n<img src=\"./router_trans2.png\" alt=\"image-20220124222512944\" style=\"zoom:50%;\" />\n\n一个真实企业级路由器的图片如下: \n\n<img src=\"/Users/talentxiet/Desktop/我的学习文档/网络基础/real_router.png\" alt=\"image-20220122203856676\" style=\"zoom:45%;\" />\n\n### F5\n\nF5是一家美国公司, 卖的F5设备可提供4-7层的解包和路由能力, 相比工作于网络层的Router其功能就更丰富了. 包括负载均衡，应用状态监控，高可用性保障，广域流量管理，链路控制；内容转换，高速缓存，SSL加速和卸载等能力等等.\n\n<img src=\"./real_f5.png\" alt=\"image-20220122205509626\" style=\"zoom:60%;\" />\n\n## 真实组网案例\n\n### 公共网络\n\n\n\n### 家庭网络\n\n\n\n## Glossary:\n\n### Ethernet 以太网\n\n以太网(Ethernet)是一种计算机局域网技术, 提出于1980s。IEEE组织的IEEE 802.3标准制定了以太网的技术标准, 后续延伸出了802.3~11标准，它规定了包括物理层的连线、电子信号和介质访问层协议的内容。以太网是当前应用最普遍的局域网技术，取代了其他局域网标准如令牌环、FDDI 和 ARCNET。\n\n### 广播域 broadcast domain\n\n广播域（Broadcast domain）是计算机网络的一个逻辑划分。广播域中的任意一个节点可以在数据链路层通过广播的方式到达任意一个节点。广播域可以处于同一个局域网内,也可以被桥接到其他的局域网。\n\n根据目前的流行技术，任意连接到同一 repeater 或者 switch 的电脑属于同一个广播域，并且任意连接到同一个inter-connected的 repeater 或 switch 的集合的电脑也是属于同一个广播域的。而 Router 和其他high-level devices会在广播域间形成隔离。\n\n### 冲突域 collision domain\n\n与广播域相对的是冲突域。冲突域中所有节点都链接到同一个被集线器、交换机和学习型网桥划分的相互连接的中继器集合。冲突域一般来说小于或者包含在广播域中。 冲突域下的碰撞问题通过CSMA/CD (Carrier-sense multiple access)解决.\n\n\n\n## 常用命令\n\n### traceroute实现\n\n向目标ip发送ICMP echo包或随机30000+大端口发送udp包,  通过TTL和ICMP结果返回报文判断路由点地址和通信时间.\n\n","slug":"network-base","published":1,"date":"2022-02-07T15:16:57.429Z","updated":"2022-03-18T03:49:16.025Z","_id":"ckzcu8epe0000u4je09ey43dg","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"分层模型-OSI-model\"><a href=\"#分层模型-OSI-model\" class=\"headerlink\" title=\"分层模型 OSI model\"></a>分层模型 OSI model</h2><p><strong>Open Systems Interconnection model</strong> (<strong>OSI model</strong>) 开放系统互联模型是一个概念性的参考模型, 不指定任何协议的具体实现. 核心思想在于不同网络层级间的解耦、接口独立, 任何一层协议可以升级替换后不影响整个网络功能, 在网络通信协议设计时起到一个指导作用.<br><img src=\"osi7.png\" alt=\"image-osi\" style=\"zoom:50%;\" /></p>\n<h3 id=\"Definitions\"><a href=\"#Definitions\" class=\"headerlink\" title=\"Definitions:\"></a>Definitions:</h3><ul>\n<li><p>通信协议(Communication protocols): 让处于同层的不同host实体可以相互交互.</p>\n</li>\n<li><p>Protocol data unit(PDU): 在每一层, 两个实体通过交换该层协议的PDU来进行交互, PDU包含payload(也称为<a href=\"https://en.wikipedia.org/wiki/Service_data_unit\">service data unit</a> ,SDU) 和 protocol-related headers or footers . </p>\n</li>\n<li><p> 数据通信流程: 从Layer highest开始, PDU向下层传递, 并作为下层的SDU; 重复向更下层传递直至Layer lowest; 接着,底层负责将PDU传递给对端底层; 然后,逐层向上传递,拆包解析出各层SDU.</p>\n</li>\n</ul>\n<img src=\"./osi_pdu_pass.png\" alt=\"image-20220119105145560\" style=\"zoom:40%;\" />\n\n<img src=\"osi_transfer_example.png\" alt=\"image-20220123111825642\" style=\"zoom:43%;\" />\n\n<h3 id=\"Layer-architecture\"><a href=\"#Layer-architecture\" class=\"headerlink\" title=\"Layer architecture\"></a>Layer architecture</h3><h4 id=\"Layer-1-Physical-layer\"><a href=\"#Layer-1-Physical-layer\" class=\"headerlink\" title=\"Layer 1: Physical layer\"></a>Layer 1: Physical layer</h4><p>物理层负责非结构化原始数据的传输和接收, between device和物理传输介质。它将raw digital bits转换成electrical电子,optical光学 或radio无线信号等. 物理层规范规格包含蓝牙、以太网和USB标准等.</p>\n<p>Examples: Ethernet family 802.3 PHY(千兆宽带, 百兆宽带), 802.11 LAN &amp; wireless(2.4Ghz, 5Ghz), BLE(Bluetooth Low Energy) PHY,   E1.</p>\n<h4 id=\"Layer-2-Data-link-layer\"><a href=\"#Layer-2-Data-link-layer\" class=\"headerlink\" title=\"Layer 2: Data link layer\"></a>Layer 2: Data link layer</h4><p>物理层的线路有传输介质与通信设备组成，比特流在传输介质上传输时肯定会存在误差错误的。这样就引入了数据链路层在物理层之上，采用差错检测、差错控制和流量控制等方法，向网络层提供高质量的数据传输服务。</p>\n<p>数据链路层从网络层接受数据包, 并在将其发送到物理层之前, 将这些数据包封装成帧frame. 之后在两个相邻节点间(node to node)的链路上传送帧，每一帧包括<strong>数据</strong>和必要的<strong>头尾信息</strong>（如同步信息、地址信息、差错信息等）. 如果帧太大(超过MTU)的话，数据链路层通常会将大帧拆分为一个个的小帧，小帧能够使传输控制和错误检测更加高效。</p>\n<h4 id=\"Layer-3-Network-layer\"><a href=\"#Layer-3-Network-layer\" class=\"headerlink\" title=\"Layer 3: Network layer\"></a>Layer 3: Network layer</h4><p>网络层的任务就是提供能在不同的网络间transfer packets的程序和方法. 网络中会有非常多的nodes, 每个node会拥有自己的访问地址, 网络层就是要提供一种节点间路由寻址方式能让packet准确的传递给destination. 网络层还会在packet在某些MTU较小链路层传输时, 对原包进行分片, 独立传输, 并在下一链路node重新装配.  网络层可以做数据错误校验, 可靠性保障的功能, 但并不necessary.</p>\n<h4 id=\"Layer-4-Transport-layer\"><a href=\"#Layer-4-Transport-layer\" class=\"headerlink\" title=\"Layer 4: Transport layer\"></a>Layer 4: Transport layer</h4><p>传输层负责将变长数据(variable-length data sequences)从源传输到目的地, 并提供保障QoS的方式. </p>\n<h4 id=\"Layer-5-Session-layer\"><a href=\"#Layer-5-Session-layer\" class=\"headerlink\" title=\"Layer 5: Session layer\"></a>Layer 5: Session layer</h4><p>会话层的主要功能是负责维护两个节点之间的传输联接，确保点到点传输不中断，以及管理数据交换等功能。会话层在应用进程中建立、管理和终止会话。</p>\n<h4 id=\"Layer-6-Presentation-layer\"><a href=\"#Layer-6-Presentation-layer\" class=\"headerlink\" title=\"Layer 6: Presentation layer\"></a>Layer 6: Presentation layer</h4><p>表示层的主要功能是处理在两个通信系统中交换信息的表示方式，主要包括数据格式变化、<a href=\"https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86/11048982\">数据加密</a>与解密、<a href=\"https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%8E%8B%E7%BC%A9/5198909\">数据压缩</a>与解压等</p>\n<h4 id=\"Layer-7-Application-layer\"><a href=\"#Layer-7-Application-layer\" class=\"headerlink\" title=\"Layer 7: Application layer\"></a>Layer 7: Application layer</h4><p>该层直接面向用户，是OSI中的最高层。它的主要任务是为用户提供应用的接口，即提供不同计算机间的文件传送、访问与管理，电子邮件的内容处理，不同计算机通过网络交互访问的虚拟终端功能等.</p>\n<h3 id=\"Protocol-stack-examples\"><a href=\"#Protocol-stack-examples\" class=\"headerlink\" title=\"Protocol stack examples\"></a>Protocol stack examples</h3><h4 id=\"BLE-protocol-stack\"><a href=\"#BLE-protocol-stack\" class=\"headerlink\" title=\"BLE protocol stack\"></a>BLE protocol stack</h4><img src=\"./ble_osi.png\" alt=\"ble_osi\" style=\"zoom:80%;\" />\n\n<h2 id=\"分层模型——TCP-IP模型及协议族\"><a href=\"#分层模型——TCP-IP模型及协议族\" class=\"headerlink\" title=\"分层模型——TCP/IP模型及协议族\"></a>分层模型——TCP/IP模型及协议族</h2><p>TCP/IP 模型将网络分为四层(算上物理层就是五层)，它不关注底层物理介质，主要关注终端之间的逻辑数据流转发。<br>TCP/IP 模型的核心是<strong>网络层</strong>和<strong>传输层</strong>，网络层解决网络之间的逻辑转发问题，传输层保证源端到目的端之间的可靠传输。最上层的<strong>应用层</strong>通过各种协议向终端用户提供业务应用。</p>\n<h3 id=\"物理层\"><a href=\"#物理层\" class=\"headerlink\" title=\"物理层\"></a>物理层</h3><p>任何协议栈都逃不脱最终帮其传输数据的物理层. 物理层传递的都是bit flow, 而以太网使用的都是曼彻斯特编码信号. 曼彻斯特(Manchester)编码的编码方法是把每个码元分成两个相等的间隔。 如图,码元1是前一个间隔为高电压后一个间隔为低电压，即位周期中心向下跳变表示1；码元0正好相反，位周期中心向上跳变表示0。这样保证了在每一个 码元中间出现一次电压的转换，接收端就利用这种电压的转换方便地把位同步信号提取出来.</p>\n<img src=\"./manchester.png\" alt=\"image-20220125225252662\" style=\"zoom:45%;\" />\n\n<p>在链路层从物理层收到的bit流中提取数据时, 一个问题就是如何区分帧的开始.  Manchester + Preamble.</p>\n<img src=\"./preamble.png\" alt=\"image-20220125230003591\" style=\"zoom:40%;\" />\n\n<h3 id=\"数据链路层\"><a href=\"#数据链路层\" class=\"headerlink\" title=\"数据链路层\"></a>数据链路层</h3><p>数据链路层位于网络层之下, 这意味着它与网络层协议比如常用的IP协议是解耦的, 以<strong>以太网数据链路层帧</strong>为例, 在通信时, 其完全不关心payload中是IP协议报文或是其他协议报文, 而是完全通过帧首的源MAC、目标MAC地址进行寻址通信.</p>\n<p>IEEE 802 规范下数据链路层向下还可细分为 logical link control (LLC) 层和 medium access control (MAC) 层。</p>\n<img src=\"./datalinklayer_sublayers.png\" alt=\"dll_sublayes\" style=\"zoom:40%;\" />\n\n<p>LLC 层又叫做<code>逻辑控制链路</code>层，它主要用于数据传输，它充当网络层和数据链路层中的<code>媒体访问控制（MAC）</code>子层之间的接口。LLC 层的主要功能如下</p>\n<ul>\n<li>LLC 的主要功能是发送时在 MAC 层上多路复用协议，并在接收时同样地多路分解协议。</li>\n<li>LLC 提供跳到跳的流的差错控制，像是路由器和路由器之间这种相邻节点的数据传输称为 <code>一跳</code>。</li>\n<li>它允许通过计算机网络进行多点通信。</li>\n</ul>\n<p>MAC 层负责传输介质的流控制和多路复用，它的主要功能如下</p>\n<ul>\n<li>MAC 层为 LLC 和 OSI 网络的上层提供了物理层的抽象。</li>\n<li>MAC 层负责封装帧，以便通过物理介质进行传输。</li>\n<li>MAC 层负责解析源和目标地址。</li>\n<li>MAC 层还负责在冲突的情况下执行冲突解决并启动重传。</li>\n<li>MAC 层负责生成帧校验序列，从而有助于防止传输错误。</li>\n</ul>\n<p>在 MAC 层中，有一个关键概念是 <code>MAC 地址</code>。MAC 地址主要用于识别数据链路中互联的节点. MAC 地址长 6 bytes (48 bit)，在使用<code>网卡(NIC)</code> 的情况下，MAC 地址一般都会烧入 ROM 中。因此，任何一个网卡的 MAC 地址都是唯一的。</p>\n<img src=\"/Users/talentxiet/Desktop/我的学习文档/网络基础/mac_addr.png\" alt=\"mac_addr\" style=\"zoom:28%;\" />\n\n<p>链路层的差错控制通过增加差错编码来实现, 又可分为<strong>检错编码</strong>和<strong>纠错编码</strong>: 检错编码常见有奇偶校验码和循环冗余码; 纠错编码常见有海明码等.</p>\n<p>流量(阻塞)控制是控制链路上的帧的发送速率，使接收方有足够的缓冲空间来接收帧，主要方法有两种，停止-等待协议和滑动窗口协议. 停止-等待协议是一种特殊的滑动窗口协议，相当于发送窗口和接收窗口大小为1的滑动窗口协议。</p>\n<img src=\"./datalink_timewindow.png\" alt=\"image-20220121112137195\" style=\"zoom:40%;\" />\n\n<p>以太网上传输的链路层数据帧有两种格式：<strong>Ethernet_II 和 IEEE802.3</strong>。选择哪种格式由 TCP/IP 协议簇中的网络层决定。大多数的数据帧使用的是 Ethernet_II 格式. IEEE802.3 格式：Length字段值小于等于0x05DC. Ethernet_II 格式：Type 字段值大于等于0x0600. 以此来供链路层判断数据是哪种规范.</p>\n<img src=\"./data_link_layer_frame.png\" alt=\"image-20220119143457079\" style=\"zoom:45%;\" />\n\n<p>FCS: frame check sequence, 错误检查的.<br>LLC：Logical Link Control，逻辑链路控制由目的访问点 D.SAP （Destination Service Access Point）、源服务访问点 S.SAP（Source Service Access Point）和 Control 字段组成.<br>SNAP：Sub-network Access Protocol，子网访问协议由机构代码（Org Code）和类型（Type）字段组成。Org Code 三个字节都为 0 。Type 字段的含义与 Ethernet_II 帧中的 Type 字段相同.</p>\n<h3 id=\"网络层\"><a href=\"#网络层\" class=\"headerlink\" title=\"网络层\"></a>网络层</h3><h4 id=\"IP协议\"><a href=\"#IP协议\" class=\"headerlink\" title=\"IP协议\"></a><strong>IP协议</strong></h4><ul>\n<li>对于网络层，<strong>IP协议</strong>是其中一个非常重要的协议</li>\n<li>IP协议使得复杂的实际网络变为一个<strong>虚拟互联的网络</strong>（也就是我们只需要将终端设备连接到这个网络中去即可，并不需要关心里边实际的复杂网络）</li>\n<li>IP协议使得网络层可以<strong>屏蔽底层细节</strong>而专注网络层的<strong>数据转发</strong>（如果单从网络层去看，我们是不用关心<strong>数据包</strong>是通过海底电缆还是通过无线WiFi传输到目的计算机的）</li>\n<li>IP协议<strong>解决了在虚拟网络中数据报传输路径的问题</strong></li>\n</ul>\n<img src=\"./ip_nets.png\" alt=\"image-20220125231347009\" style=\"zoom:40%;\" />\n\n<p><strong>IP协议特点:</strong></p>\n<ul>\n<li>无状态, 是指IP通信双方不同步传输数据的状态信息，因此所有IP数据报的发送，传输，和接收都是相互独立的，没有山下文关系的。发送、传输和接收都是相互独立、没有上下文关系的。这种服务最大的缺点是无法处理乱序和重复的IP数据报。比如发送端发送出的第N个IP数据报可能比第N+1个IP数据报后到达接收端，而同一个IP数据报也可能经过不同的路径多次到达接收端。在这两种情况下，接收端的IP模块无法检测到乱序和重复，因为这些IP数据报之间没有任何上下文关系。接收端的IP模块只要收到了完整的IP数据报(如果是IP分片的话，IP 模块将先执行重组)，就将其数据部分(TCP报文段、UDP数据报或者ICMP报文)，上交给上层协议。那么从上层协议来看，这些数据就可能是乱序的、重复的。面向连接的协议，比如TCP协议，则能够自己处理乱序的、重复的报文段，它递交给上层协议的内容绝对是有序的、正确的。虽然IP数据报头部提供了一个标识字段(见后文)用以唯-标识-一个IP数据报，但它是被用来处理IP分片和重组的，而不是用来指示接收顺序的。无状态服务的优点也很明显:简单、高效。我们无须为保持通信的状态而分配一些内核资源，也无须每次传输数据时都携带状态信息。在网络协议中，无状态是很常见的，比如UDP协议和HTTP协议都是无状态协议。以HTTP协议为例，一个浏览器的连续两次网页请求之间没有任何关联，它们将被Web服务器独立地处理。</li>\n<li>无连接(connectionless), 是指IP通信双方都不长久地维持对方的任何信息。这样，上层协议每次发送数据的时候，都必须明确指定对方的IP地址。</li>\n<li>不可靠, 是指IP协议不能保证IP数据报准确地到达接收端，它只是承诺尽最大努力(best effort)。 很多种情况都能导致IP数据报发送失败。比如，某个中转路由器发现IP数据报在网络上存活的时间太长(根据IP数据报头部字段TTL判断，见后文)，那么它将丢弃之，并返回一个ICMP错误消息(超时错误)给发送端。又比如，接收端发现收到的IP数据报不正确(通过校验机制)，它也将丢弃之，并返回一个ICMP错误消息(IP 头部参数错误)给发送端。无论哪种情况，发送端的IP模块一旦检测到IP数据报发送失败，就通知上层协议发送失败，而不会试图重传。因此，使用IP服务的上层协议(比如TCP协议)需要自己实现数据确认、超时重传等机制以达到可靠传输的目的。</li>\n</ul>\n<p><strong>IP协议报文格式 :</strong></p>\n<img src=\"./ip_packet.png\" alt=\"image-20220125234059378\" style=\"zoom:40%;\" />\n\n<ul>\n<li><p><strong>版本</strong>：占4位，指的是IP协议的版本，通信双方的版本必须一致，即IPv4，也有IPv6</p>\n</li>\n<li><p><strong>首部长度</strong>：占4位，最大数值为15，表示的是IP首部的长度，单位是“32位字”（4个字节），也就是<strong>IP首部</strong>最大长度为60字节</p>\n</li>\n<li><p><strong>服务类型</strong>：服务登记, 比如VIP专线, 这个一般是不需要关心的</p>\n</li>\n<li><p><strong>总长度</strong>：占16位，最大数值为65535，表示的是<strong>IP数据报总长度</strong>（IP首部+IP数据） （在前边介绍数据链路层的时候，也提到过一个长度。对于数据链路层的长度，称之为<strong>MTU</strong>，一般为1500字节。而IP数据报的最大长度有65535个字节，比MTU要大。如果真正传输的时候，如果出现这种情况，数据链路层会对IP数据报进行<strong>分片</strong>，也就是将一个较长的IP数据报拆分成多个数据帧来进行传输）</p>\n</li>\n<li><p><strong>标识</strong>：占16位，计数器标示, 分片后的同组数据具备相同标示. 同一组的包根据标示重组.</p>\n</li>\n<li><p><strong>标记</strong>： 占3位，但目前只有2位有意义。<br> 标志字段中的最低位记为MF(More Fragment)。MF=1即表示后面“还有分片”的数据报,MF=0表示这已是若干数据报片中的最后一个<br> 标志字段中间的一位记为DF(Don’t Fragment)，意思是“不能分片”。只有当DF=0时才允许分片。</p>\n</li>\n<li><p><strong>片偏移</strong>：前边有提到，如果IP数据报的长度过长，会进行IP报文的分片，把一个IP报文拆分成多个数据帧进行数据链路层的传输(以<strong>8 Bytes</strong>的倍数分包)。因此，如果拆分的话，就需要使用<strong>片偏移</strong>来记录当前的数据帧，保存的<strong>第几个偏移的IP数据</strong></p>\n <img src=\"./ip_offset.png\" alt=\"image-20220129104929487\" style=\"zoom:45%;\" /></li>\n<li><p><strong>TTL</strong>：占8位，表明IP数据报文在网络中的<strong>寿命</strong>，每经过一个设备（不管是路由器还是计算机），TTL减一，当TTL=0时，网络设备必须<strong>丢弃</strong>该报文（它解决的就是，当网络报文找不到终点的时候，避免网络报文在网络中无限的传输，以消耗带宽）</p>\n</li>\n<li><p><strong>协议</strong>：占8位，表明IP数据所携带的具体数据是什么<strong>协议</strong>的（如TCP、UDP等，一些协议对应的值，可参考下图）</p>\n</li>\n<li><p><strong>校验和</strong>：占16位，校验IP首部是否有出错（接收方接收到IP首部之后也会进行校验，如果有错，则直接丢弃）</p>\n</li>\n<li><p><strong>源IP地址</strong>：<strong>发送</strong>IP数据报的网络设备的IP地址</p>\n</li>\n<li><p><strong>目的IP地址</strong>：IP数据报要<strong>到达</strong>的目的网络设备的IP地址</p>\n</li>\n</ul>\n<h4 id=\"ICMP协议\"><a href=\"#ICMP协议\" class=\"headerlink\" title=\"ICMP协议\"></a><strong>ICMP协议</strong></h4><img src=\"./icmp_kinds.png\" alt=\"image-20220126215905234\" style=\"zoom:50%;\" />\n\n<h4 id=\"路由选择协议\"><a href=\"#路由选择协议\" class=\"headerlink\" title=\"路由选择协议\"></a><strong>路由选择协议</strong></h4><p><strong>自治系统</strong>：autonomous system。在互联网中，一个自治系统(AS)是一个有权自主地决定在本系统中应采用各种<a href=\"https://baike.baidu.com/item/%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE/202634\">路由协议</a>的小型单位。这个网络单位可以是一个简单的网络也可以是一个由一个或多个普通的<a href=\"https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%91%98/595848\">网络管理员</a>来控制的网络群体，它是一个单独的可管理的<a href=\"https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E5%8D%95%E5%85%83/9928606\">网络单元</a>（例如一所大学，一个企业或者一个公司个体）。</p>\n<img src=\"./ip_routing_protocol.png\" alt=\"image-20220126220513526\" style=\"zoom:50%;\" />\n\n<p>内部网关协议:</p>\n<ul>\n<li>RIP, Routing Information Protocol: 优点, 算法简单; 缺点, 路由故障链路改变远端感知慢, 距离有限 max16, 大规模网络路由表可能过大.</li>\n</ul>\n<img src=\"./rip.png\" alt=\"image-20220126220918042\" style=\"zoom:50%;\" />\n\n<ul>\n<li><p>OSPF, Open Shortest Path First 开放的最短路径优先算法: </p>\n<p>与RIP三个区别:（1）向本<a href=\"https://baike.baidu.com/item/%E8%87%AA%E6%B2%BB%E7%B3%BB%E7%BB%9F\">自治系统</a>中所有路由器发送信息。（2）发送的信息就是与本<a href=\"https://baike.baidu.com/item/%E8%B7%AF%E7%94%B1%E5%99%A8\">路由器</a>相邻的所有路由器的链路状态，但这只是路由器所知道的部分信息。（3）只有在链路状态发生变化时，<a href=\"https://baike.baidu.com/item/%E8%B7%AF%E7%94%B1%E5%99%A8\">路由器</a>才向所有路由器用<a href=\"https://baike.baidu.com/item/%E6%B4%AA%E6%B3%9B\">洪泛</a>法发送此信息。</p>\n</li>\n</ul>\n<p>外部(边界)网关协议:</p>\n<p>BGP用于在不同的自治系统（AS）之间交换路由信息。当两个AS需要交换路由信息时，每个AS都必须指定一个运行BGP的节点，来代表AS与其他的AS交换路由信息。两个AS中利用BGP交换信息的路由器也被称为边界网关（Border Gateway）或边界路由器（Border Router）. </p>\n<img src=\"./BGP_speaker.png\" alt=\"image-20220126223533819\" style=\"zoom:50%;\" />\n\n<img src=\"./BGP_example.png\" alt=\"image-20220126223429235\" style=\"zoom:40%;\" />\n\n\n\n<h3 id=\"传输层\"><a href=\"#传输层\" class=\"headerlink\" title=\"传输层\"></a>传输层</h3><p>端口作用, 实现进程到进程的通信, 复用ip线路, 提供标准的的端口-&gt;进程的映射方式.</p>\n<img src=\"./transport_process.png\" alt=\"image-20220126230009234\" style=\"zoom:50%;\" />\n\n<h4 id=\"UDP\"><a href=\"#UDP\" class=\"headerlink\" title=\"UDP\"></a>UDP</h4><p>UDP, User Datagram Protocol用户数据报协议, 只在IP基础上多了复用分用和差错校验的功能.</p>\n<h5 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h5><ul>\n<li>无连接</li>\n<li>尽努力交付</li>\n<li>面向报文的</li>\n<li>无拥塞控制</li>\n<li>支持一对一、一对多、多对一、多对多</li>\n<li>首部开销小</li>\n</ul>\n<h5 id=\"协议格式\"><a href=\"#协议格式\" class=\"headerlink\" title=\"协议格式\"></a>协议格式</h5><img src=\"./udp_protocol.png\" alt=\"image-20220126233302042\" style=\"zoom:45%;\" />\n\n<h4 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h4><h5 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h5><ul>\n<li><p>面向连接</p>\n</li>\n<li><p>每条点对点(socket1, socket2)</p>\n</li>\n<li><p>可靠的</p>\n</li>\n<li><p>全双工</p>\n</li>\n<li><p>面向字节流的</p>\n</li>\n<li><p>为应用程序间提供逻辑通信链路</p>\n<img src=\"./tcp_bytes_stream.png\" alt=\"image-20220129001752910\" style=\"zoom:50%;\" /></li>\n</ul>\n<h5 id=\"协议格式-1\"><a href=\"#协议格式-1\" class=\"headerlink\" title=\"协议格式\"></a>协议格式</h5><img src=\"./tcp_protocol.png\" alt=\"image-20220127225910379\" style=\"zoom:50%;\" />\n\n<p><strong>16位源端口号</strong>：指发送端的端口号<br><strong>16位目的端口号</strong>：指目的端的端口号<br><strong>4位头部长度</strong>：同IP头部，表示TCP头部的大小，以4字节为单位。<br><strong>32位序列号</strong>：TCP通信过程中，通过序列号来保证传输过程中数据的有序性<br><strong>32位确认号</strong>：用以对接受到的报文进行确认<br><strong>保留6位</strong><br><strong>URG</strong>：表示紧急指针<br><strong>ACK</strong>：表示确认号<br><strong>PSH</strong>：通知对端立即从缓冲区取走数据<br><strong>RST</strong>: 通知当前连接出现问题, 要释放资源, 有需要则重新建立连接. 也可用于拒绝非法连接.<br><strong>SYN</strong>：表示请求建立连接<br><strong>FIN</strong>：标志要通知对端本端的数据发送要关闭<br><strong>16位窗口大小</strong>：TCP流量控制的手段，告诉发送方本端的接收端缓冲区还能接受多少数据, 单位字节.<br><strong>16位校验和</strong>：由发送方填充，接收端用以检查TCP报文在传输过程中是否有损坏</p>\n<h5 id=\"可靠性\"><a href=\"#可靠性\" class=\"headerlink\" title=\"可靠性\"></a>可靠性</h5><h6 id=\"滑动窗口\"><a href=\"#滑动窗口\" class=\"headerlink\" title=\"滑动窗口\"></a>滑动窗口</h6><p>A根据B TCP ack报文中的窗口大小发送滑动窗口大小以内的若干数据给B, 给回复按序抵达的最大包序号, 即31. B不应过度拖延回复ack的时间.</p>\n<img src=\"./tcp_window.png\" alt=\"image-20220128000255497\" style=\"zoom:50%;\" />\n\n<img src=\"./tcp_buffer.png\" alt=\"image-20220128000641845\" style=\"zoom:50%;\" />\n\n<p>需注意, tcp是全双工通信, 每端都有自己的发送和接受窗口及缓冲. </p>\n<h6 id=\"超时重传时间-Retransmision-Time-out\"><a href=\"#超时重传时间-Retransmision-Time-out\" class=\"headerlink\" title=\"超时重传时间 Retransmision Time out\"></a>超时重传时间 Retransmision Time out</h6><img src=\"./tcp_rto.png\" alt=\"image-20220128001439268\" style=\"zoom:40%;\" />\n\n<h6 id=\"选择确认ACK-Selective-ACK\"><a href=\"#选择确认ACK-Selective-ACK\" class=\"headerlink\" title=\"选择确认ACK Selective ACK\"></a>选择确认ACK Selective ACK</h6><p>SACK用于接收端向发送端报告部分未按序已收到的字节块, 从而避免重复传输. 需要tcp连接时 option增加SACK头, 双方确认支持SACK. 但是描述哪些数据已接受其实是比较复杂的, 尽管RFC2018有详细说明, 但使用还是较少, 大部分还是发送端重发所有未ack字节.</p>\n<img src=\"./tcp_sack.png\" alt=\"image-20220128002718253\" style=\"zoom:50%;\" />\n\n\n\n<h5 id=\"TCP流量控制\"><a href=\"#TCP流量控制\" class=\"headerlink\" title=\"TCP流量控制\"></a>TCP流量控制</h5><h6 id=\"可利用滑动窗口控制发送方流量\"><a href=\"#可利用滑动窗口控制发送方流量\" class=\"headerlink\" title=\"可利用滑动窗口控制发送方流量\"></a>可利用滑动窗口控制发送方流量</h6><h6 id=\"TCP传输效率\"><a href=\"#TCP传输效率\" class=\"headerlink\" title=\"TCP传输效率\"></a>TCP传输效率</h6><p>应用程序把发送数据给到TCP缓存就不管了, 由TCP负责控制发送时机将数据正确的发送出去. 这是一个比较复杂的问题.</p>\n<ul>\n<li><p><strong>Nagle算法</strong></p>\n<p>TCP/IP协议中，无论发送多少数据，总是要在数据前面加上协议头，同时，对方接收到数据，也需要发送ACK表示确认。为了尽可能的利用网络带宽，TCP总是希望尽可能的发送足够大的数据。（一个连接会设置MSS参数，因此，TCP/IP希望每次都能够以MSS尺寸的数据块来发送数据）。Nagle算法就是为了尽可能发送大块数据，避免网络中充斥着许多小数据块。</p>\n<p>Nagle算法的基本定义是<strong>任意时刻，最多只能有一个未被确认的小段</strong>。 所谓“小段”，指的是小于MSS尺寸的数据块，所谓“未被确认”，是指一个数据块发送出去后，没有收到对方发送的ACK确认该数据已收到。</p>\n<p>Nagle算法的规则（可参考tcp_output.c文件里tcp_nagle_check函数注释）：</p>\n<p>（1）如果包长度达到MSS，则允许发送；</p>\n<p>（2）如果该包含有FIN，则允许发送；</p>\n<p>（3）设置了TCP_NODELAY选项，则允许发送；</p>\n<p>（4）未设置TCP_CORK选项时，若所有发出去的小数据包（包长度小于MSS）均被确认，则允许发送；</p>\n<p>（5）上述条件都未满足，但发生了超时（一般为200ms），则立即发送。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> there is new data to send <span class=\"comment\">#有数据要发送</span></span><br><span class=\"line\">    <span class=\"comment\"># 发送窗口缓冲区和队列数据 &gt;=mss，队列数据（available data）为原有的队列数据加上新到来的数据</span></span><br><span class=\"line\">    <span class=\"comment\"># 也就是说缓冲区数据超过mss大小，nagle算法尽可能发送足够大的数据包</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> the window size &gt;= MSS and available data is &gt;= MSS </span><br><span class=\"line\">        send complete MSS segment now <span class=\"comment\"># 立即发送</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> there is unconfirmed data still <span class=\"keyword\">in</span> the pipe <span class=\"comment\"># 前一次发送的包没有收到ack</span></span><br><span class=\"line\">            <span class=\"comment\"># 将该包数据放入队列中，直到收到一个ack再发送缓冲区数据</span></span><br><span class=\"line\">            enqueue data <span class=\"keyword\">in</span> the buffer until an acknowledge is received </span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            send data immediately <span class=\"comment\"># 立即发送</span></span><br><span class=\"line\">        end <span class=\"keyword\">if</span></span><br><span class=\"line\">    end <span class=\"keyword\">if</span></span><br><span class=\"line\">end <span class=\"keyword\">if</span>　</span><br></pre></td></tr></table></figure>\n\n<p>Nagle算法只允许一个未被ACK的包存在于网络，它并不管包的大小，因此它事实上就是一个扩展的停-等协议，只不过它是基于包停-等的，而不是基于字节停-等的。</p>\n</li>\n<li><p><strong>TCP确认延迟机制</strong></p>\n<p>当Server端收到数据之后，它并不会马上向client端发送ACK，而是会将ACK的发送延迟一段时间（假设为t），它希望在t时间内server端会向client端发送应答数据，这样ACK就能够和应答数据一起发送，就像是应答数据<strong>捎带着ACK</strong>过去。初始化是40ms。</p>\n</li>\n<li><p><strong>TCP_NODELAY 选项</strong></p>\n<p>默认情况下，发送数据采用Nagle 算法。这样虽然提高了<a href=\"https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E5%90%9E%E5%90%90%E9%87%8F/646450\">网络吞吐量</a>，但是实时性却降低了，在一些交互性很强的应用程序来说是不允许的，使用TCP_NODELAY选项可以禁止Nagle 算法。</p>\n<p>此时，应用程序向内核递交的每个数据包都会立即发送出去。需要注意的是，虽然禁止了Nagle 算法，但网络的传输仍然受到TCP确认延迟机制的影响。</p>\n</li>\n<li><p><strong>TCP_CORK 选项</strong></p>\n<p>所谓的CORK就是塞子的意思，形象地理解就是用CORK将连接塞住，使得数据先不发出去，等到拔去塞子后再发出去。设置该选项后，内核会尽力把小数据包拼接成一个大的数据包（一个MTU）再发送出去，当然若一定时间后（一般为200ms，该值尚待确认），内核仍然没有组合成一个MTU时也必须发送现有的数据（不可能让数据一直等待吧）。</p>\n</li>\n</ul>\n<h5 id=\"TCP拥塞控制\"><a href=\"#TCP拥塞控制\" class=\"headerlink\" title=\"TCP拥塞控制\"></a>TCP拥塞控制</h5><ul>\n<li><p>拥塞控制：防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载。拥塞控制所要做的都有一个前提：网络能够承受现有的网络负荷。拥塞控制是一个全局性的过程，涉及到所有的主机、路由器，以及与降低网络传输性能有关的所有因素。</p>\n</li>\n<li><p>流量控制：指点对点通信量的控制，是端到端的问题。流量控制所要做的就是抑制发送端发送的速率，以便使接收端来得及接收。</p>\n</li>\n</ul>\n<p>解决拥塞问题一般是以下步骤: 1) 监测网络, 探测拥塞的位置与时间;  2) 将拥塞信息发送到能采取控制的地方; 3) 调整网络参数.</p>\n<p>常用方法: 慢开始( slow-start )、拥塞避免( congestion avoidance )、快重传( fast retransmit )和快恢复( fast recovery )。</p>\n<h6 id=\"慢开始\"><a href=\"#慢开始\" class=\"headerlink\" title=\"慢开始\"></a>慢开始</h6><p>发送方维持一个拥塞窗口 cwnd ( congestion window )的状态变量。拥塞窗口的大小取决于网络的拥塞程度，并且动态地在变化。发送方让自己的发送窗口等于拥塞窗口。发送方控制拥塞窗口的原则是：只要网络没有出现拥塞，拥塞窗口就再增大一些，以便把更多的分组发送出去。但只要网络出现拥塞，拥塞窗口就减小一些，以减少注入到网络中的分组数。</p>\n<p>慢开始算法：当主机开始发送数据时，如果立即所大量数据字节注入到网络，那么就有可能引起网络拥塞，因为现在并不清楚网络的负荷情况。因此，较好的方法是先探测一下，即由小到大逐渐增大发送窗口，也就是说，由小到大逐渐增大拥塞窗口数值。通常在刚刚开始发送报文段时，先把拥塞窗口 cwnd 设置为一个最大报文段MSS的数值。而在每收到一个对新的报文段的确认后，把拥塞窗口增加至多一个MSS的数值。用这样的方法逐步增大发送方的拥塞窗口 cwnd ，可以使分组注入到网络的速率更加合理。 cwnd = 1, 2, 4, 8 …</p>\n<p>为了防止拥塞窗口cwnd增长过大引起网络拥塞，还需要设置一个慢开始门限ssthresh状态变量。慢开始门限ssthresh的用法如下：</p>\n<p>　　当 cwnd &lt; ssthresh 时，使用上述的慢开始算法<br>　　当 cwnd &gt; ssthresh 时，停止使用慢开始算法而改用拥塞避免算法<br>　　当 cwnd = ssthresh 时，既可使用慢开始算法，也可使用拥塞控制避免算法</p>\n<h6 id=\"拥塞避免\"><a href=\"#拥塞避免\" class=\"headerlink\" title=\"拥塞避免\"></a>拥塞避免</h6><p>让拥塞窗口cwnd缓慢地增大，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是加倍。这样拥塞窗口cwnd按线性规律缓慢增长，比慢开始算法的拥塞窗口增长速率缓慢得多。</p>\n<p>无论在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞（其根据就是没有收到确认），就要把慢开始门限ssthresh设置为出现拥塞时的发送方窗口值的一半（但不能小于2）。然后把拥塞窗口cwnd重新设置为1，执行慢开始算法。这样做的目的就是要迅速减少主机发送到网络中的分组数，使得发生拥塞的路由器有足够时间把队列中积压的分组处理完毕。</p>\n<img src=\"./tcp_slow_start.png\" alt=\"image-20220128190952845\" style=\"zoom:40%;\" />\n\n<h6 id=\"快重传和快恢复\"><a href=\"#快重传和快恢复\" class=\"headerlink\" title=\"快重传和快恢复\"></a>快重传和快恢复</h6><p>快重传算法首先要求接收方每收到一个报文段后(即便是后序)就立即发出重复确认（为的是使发送方及早知道有报文段没有到达对方），而不要等到自己发送数据时才进行捎带确认。当发送方连续收到三个重复确认，就执行“乘法减小”算法，把慢开始门限ssthresh减半。在采用快恢复算法时，慢开始算法只是在TCP连接建立时和网络出现超时时才使用。采用这样的拥塞控制方法使得TCP的性能有明显的改进。</p>\n<img src=\"./tcp_congest.png\" alt=\"image-20220128190034654\" style=\"zoom:50%;\" />\n\n<h5 id=\"TCP连接管理\"><a href=\"#TCP连接管理\" class=\"headerlink\" title=\"TCP连接管理\"></a>TCP连接管理</h5><h6 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h6><p>三次握手是为了建立连接, 双方确认对方的存在,并协商一些参数,如窗口大小 , 初始化一下缓冲队列资源等. 为了确认双方存在, 头两次sync, sync+ack是 省不了的, 那第三次ack是为了做什么呢? 是为了避免已失效的sync请求又抵达B, 又消耗B的资源. 有了第三次ack, 当无效的syn被server sync+ack后, client不会回复ack, 超时后server也就会再销毁掉对应资源.</p>\n<img src=\"./tcp_handshake.png\" alt=\"image-20220129000032602\" style=\"zoom:50%;\" />\n\n<h6 id=\"四次挥手\"><a href=\"#四次挥手\" class=\"headerlink\" title=\"四次挥手\"></a>四次挥手</h6><img src=\"./tcp_bye_handshake.png\" alt=\"image-20220129002627713\" style=\"zoom:50%;\" />\n\n<p><strong>MSL</strong>: Max Segment lifetime, 报文端最大寿命. </p>\n<p>为什么A收到 FIN 后要等两个MSL呢? </p>\n<ol>\n<li>确保能回复FIN的ack, 如果B没收到ack, 会重新发送FIN+ACK. 这时如果A已经断了, B就只能自己特殊处理到CLOSED状态.</li>\n<li>尽量让本次连接 网络中的网络包都传输完, 不会在新连接中收到旧连接报文.</li>\n</ol>\n<h5 id=\"TCP有限状态机\"><a href=\"#TCP有限状态机\" class=\"headerlink\" title=\"TCP有限状态机\"></a>TCP有限状态机</h5><img src=\"./tcp_state.png\" alt=\"image-20220129152318656\" style=\"zoom:50%;\" />\n\n\n\n<h4 id=\"应用层\"><a href=\"#应用层\" class=\"headerlink\" title=\"应用层\"></a>应用层</h4><h2 id=\"应用层常用协议\"><a href=\"#应用层常用协议\" class=\"headerlink\" title=\"应用层常用协议\"></a>应用层常用协议</h2><h3 id=\"DNS\"><a href=\"#DNS\" class=\"headerlink\" title=\"DNS\"></a>DNS</h3><p>基于UDP, <strong>53</strong>端口:  query请求(src port: 12868 , dst port: 53 ) + response响应(src port: 53, dst port: 12868 )</p>\n<p>迭代查询 or 递归查询 + 缓存. </p>\n<p><strong>解析顺序</strong>: 浏览器缓存, 系统缓存, 路由器DNS缓存 , ISP DNS 缓存, 根域名服务器, 顶级域名服务器, 主域名服务器, 保存结果至缓存.</p>\n<img src=\"./dns.png\" alt=\"image-20220129165409193\" style=\"zoom:40%;\" />\n\n<h3 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h3><p>HTTP协议发展历程:</p>\n<p>![image-20220127112311050](/Users/talentxiet/Library/Application Support/typora-user-images/image-20220127112311050.png)</p>\n<p>协议格式:</p>\n<img src=\"./http_protocol.png\" alt=\"image-20220130002354946\" style=\"zoom:50%;\" />\n\n<h3 id=\"SMTP\"><a href=\"#SMTP\" class=\"headerlink\" title=\"SMTP\"></a>SMTP</h3><img src=\"./smtp.png\" alt=\"image-20220130002634963\" style=\"zoom:45%;\" />\n\n<h3 id=\"DHCP\"><a href=\"#DHCP\" class=\"headerlink\" title=\"DHCP\"></a>DHCP</h3><img src=\"./dhcp.png\" alt=\"image-20220130221121647\" style=\"zoom:50%;\" />\n\n<h2 id=\"应用程序间通信过程\"><a href=\"#应用程序间通信过程\" class=\"headerlink\" title=\"应用程序间通信过程\"></a>应用程序间通信过程</h2><h3 id=\"系统调用-amp-socket套接字\"><a href=\"#系统调用-amp-socket套接字\" class=\"headerlink\" title=\"系统调用&amp;socket套接字\"></a>系统调用&amp;socket套接字</h3><img src=\"./syscall.png\" alt=\"image-20220130221429374\" style=\"zoom:50%;\" />\n\n<img src=\"./socket2.png\" alt=\"image-20220130224749539\" style=\"zoom:50%;\" />\n\n\n\n<h2 id=\"网络安全\"><a href=\"#网络安全\" class=\"headerlink\" title=\"网络安全\"></a>网络安全</h2><p>四个目标:</p>\n<ul>\n<li>保密性</li>\n<li>端点鉴别</li>\n<li>信息完整性</li>\n<li>运行安全性 访问控制</li>\n</ul>\n<img src=\"./net_sec_key.png\" alt=\"image-20220205185347484\" style=\"zoom:50%;\" />\n\n<h3 id=\"DES-AES\"><a href=\"#DES-AES\" class=\"headerlink\" title=\"DES AES\"></a>DES AES</h3><p>data encryption standard,  advanced encrytion standard, 对称加密、</p>\n<h3 id=\"公钥密码体制\"><a href=\"#公钥密码体制\" class=\"headerlink\" title=\"公钥密码体制\"></a>公钥密码体制</h3><p>任何加解密算法的安全性都取决于密钥长度,以及攻破密文的计算量</p>\n<h3 id=\"数字签名\"><a href=\"#数字签名\" class=\"headerlink\" title=\"数字签名\"></a>数字签名</h3><p>目标:</p>\n<ul>\n<li>接收者能核实发送者对报文的数字签名, 即是发送者发的</li>\n<li>收到的数据是完整的</li>\n<li>发送者事后不可抵赖数字签名</li>\n</ul>\n<img src=\"./signature.png\" alt=\"image-20220205191312308\" style=\"zoom:50%;\" />\n\n<h3 id=\"报文鉴别\"><a href=\"#报文鉴别\" class=\"headerlink\" title=\"报文鉴别\"></a>报文鉴别</h3><p>加解密算法可以实现报文鉴别,但是消耗cpu, 所以常用密码散列算法保护数据完整性. MD5 (message digest 第五代)和 SHA-1,2,3(secure hash algorithm).</p>\n<img src=\"./sec_mac.png\" alt=\"image-20220205193055077\" style=\"zoom:50%;\" />\n\n<p>MAC: message authentication code,</p>\n<h3 id=\"密钥分配\"><a href=\"#密钥分配\" class=\"headerlink\" title=\"密钥分配\"></a>密钥分配</h3><h4 id=\"对称密钥分配\"><a href=\"#对称密钥分配\" class=\"headerlink\" title=\"对称密钥分配\"></a>对称密钥分配</h4><p>对称密钥是一对一的, 任意双方通信都要有唯一的key, 通常由KDC动态随机分配</p>\n<img src=\"./对称密钥分配.png\" alt=\"image-20220205195510847\" style=\"zoom:50%;\" />\n\n<h4 id=\"公钥分配\"><a href=\"#公钥分配\" class=\"headerlink\" title=\"公钥分配\"></a>公钥分配</h4><p>由受信任的机构维护公钥和实体的关系, 通常是政府机构, 称之为CA (certification authority), 每个实体会被颁布 证书(certificate), 证书中包含拥有者标示, 公钥, 且此证书被CA进行了数字签名. 公众可以从机构公开信息中获取到机构的公钥, 对签名和 证书信息进行验证.</p>\n<p>为了使CA拥有统一格式, IETF接受了ITU制定的X.509规范.</p>\n<h3 id=\"互联网中的安全协议\"><a href=\"#互联网中的安全协议\" class=\"headerlink\" title=\"互联网中的安全协议\"></a>互联网中的安全协议</h3><h4 id=\"网络层-1\"><a href=\"#网络层-1\" class=\"headerlink\" title=\"网络层\"></a>网络层</h4><h5 id=\"IPsec\"><a href=\"#IPsec\" class=\"headerlink\" title=\"IPsec\"></a>IPsec</h5><img src=\"./ipsec.png\" alt=\"image-20220206000051358\" style=\"zoom:50%;\" />\n\n<h4 id=\"传输层-1\"><a href=\"#传输层-1\" class=\"headerlink\" title=\"传输层\"></a>传输层</h4><h5 id=\"SSL\"><a href=\"#SSL\" class=\"headerlink\" title=\"SSL\"></a>SSL</h5><p>Secure Socket Layer, Netscape开发, 95年交给IETF</p>\n<img src=\"./ssl.png\" alt=\"image-20220206001829432\" style=\"zoom:50%;\" />\n\n<img src=\"./ssl_procedure.png\" alt=\"image-20220206002408083\" style=\"zoom:50%;\" />\n\n<h5 id=\"TLS\"><a href=\"#TLS\" class=\"headerlink\" title=\"TLS\"></a>TLS</h5><p>Transport Layer Security, 基于SSL3.0设计. </p>\n<h3 id=\"防火墙\"><a href=\"#防火墙\" class=\"headerlink\" title=\"防火墙\"></a>防火墙</h3><p>是一种访问控制技术, 通常是特殊编程的路由器, 进行访问策略控制. </p>\n<ul>\n<li>分组过滤路由器: 根据 源/目的 IP/端口 协议类型进行分组过滤控制.</li>\n<li>应用网关: 应用层网关, 根据应用层报文鉴权转发</li>\n</ul>\n<h2 id=\"实时音视频相关协议\"><a href=\"#实时音视频相关协议\" class=\"headerlink\" title=\"实时音视频相关协议\"></a>实时音视频相关协议</h2><img src=\"./av_protocols.png\" alt=\"image-20220206165809797\" style=\"zoom:50%;\" />\n\n<h3 id=\"RTP\"><a href=\"#RTP\" class=\"headerlink\" title=\"RTP\"></a>RTP</h3><img src=\"./rtp_protocol.png\" alt=\"image-20220206165710831\" style=\"zoom:50%;\" />\n\n<h3 id=\"RTCP\"><a href=\"#RTCP\" class=\"headerlink\" title=\"RTCP\"></a>RTCP</h3><img src=\"./rtcp.png\" alt=\"image-20220206172316751\" style=\"zoom:50%;\" />\n\n<h2 id=\"常见网络设备\"><a href=\"#常见网络设备\" class=\"headerlink\" title=\"常见网络设备\"></a>常见网络设备</h2><h3 id=\"Repeater中继器\"><a href=\"#Repeater中继器\" class=\"headerlink\" title=\"Repeater中继器\"></a>Repeater中继器</h3><p>中继器是一个将输入信号增强放大的设备, 把信号送得更远，以延展网络长度. 与具体信号形式无关,比如卫星雷达, 以太网集线器; 属于物理层</p>\n<h3 id=\"Hub集线器\"><a href=\"#Hub集线器\" class=\"headerlink\" title=\"Hub集线器\"></a>Hub集线器</h3><p>集线器（Ethernet hub）是指将多条以太网双绞线或光纤集合连接在同一段物理介质下的设备。集线器运作在OSI模型中的物理层，可以让其链接的设备工作在同一网段。集线器上有多个I/O端口，信号从任意一个端口进入后，会从其他端口出现. </p>\n<p>由于集线器会把收到的任何数字信号，从集线器的所有端口提交，这会造成信号之间碰撞的机会很大，而且信号也可能被窃听，并且这代表所有连到集线器的设备，都是属于同一个冲突网域以及广播网域(hub间组网所有hub都属于同一广播域), 冲突和泛洪严重，因此大部分Hub已被Switch代替.</p>\n<img src=\"./hub_pic.png\" alt=\"image-20220121154139634\" style=\"zoom:35%;\" />\n\n<h3 id=\"Bridge网桥\"><a href=\"#Bridge网桥\" class=\"headerlink\" title=\"Bridge网桥\"></a>Bridge网桥</h3><p>网桥工作在第二层数据链路层, 可以解析出链路层数据包, 并在Bridge内维护每个端口和连接着的设备MAC地址映射关系, 从而可以动态判断是否要转发收到的物理帧, 从而在一定程度上解决hub间的泛洪问题.</p>\n<img src=\"/Users/talentxiet/Desktop/我的学习文档/网络基础/bridge_pic.png\" alt=\"image-20220121155228284\" style=\"zoom:50%;\" />\n\n<h3 id=\"Switch交换机\"><a href=\"#Switch交换机\" class=\"headerlink\" title=\"Switch交换机\"></a>Switch交换机</h3><p>二层交换机: 二层交换机工作在数据链路层, 相比Hub, 它可以解析物理帧中的链路层frame信息,并基于frame中的mac地址与交换机端口进行缓存映射, 从而高效的解决Hub的冲突, 泛洪等问题. 此外交换机通常还支持划分VLAN的功能, VLAN可以创建相互隔离的子LAN, 从而缩小广播域大小. </p>\n<img src=\"./switch_pic.png\" alt=\"image-20220121160921808\" style=\"zoom:55%;\" />\n\n<p>交换机组网示例:</p>\n<img src=\"./switch_net.png\" alt=\"image-20220122201304858\" style=\"zoom:50%;\" />\n\n<p>三层交换机: 三层交换机在交换机的基础之上加了网络层协议的解析能力, 以及一些简单的三层路由功能. 不过它的主要功能还是交换机的，同时它的价格比路由器价格偏低，实用性更高。</p>\n<p>一个真实的交换机图片如下所示:</p>\n<img src=\"./real_switch.png\" alt=\"image-20220122202630798\" style=\"zoom:38%;\" />\n\n<h3 id=\"Router路由器-网关\"><a href=\"#Router路由器-网关\" class=\"headerlink\" title=\"Router路由器 (网关)\"></a>Router路由器 (网关)</h3><p>讲到路由器,我们要先讲一下IP子网和网关(Gateway), IP地址+掩码标示了IP网段, 不同网段间的网络相互隔离. 而网关, 顾名思义, 就是不同网络间连接的关口, 在网络层上实现网络连通. 网关概念也可延伸到应用服务网关, 这里我们讨论的均指TCP/IP协议下网关.</p>\n<p>在TCP/IP协议的系统内核层, 会在网络层向链路层封包时, 检测目标IP与源IP是否在同一子网, 如果在同一子网, 封包时的对端MAC地址通过ARP协议获取; 而当不在同一子网时, 会使用网关的MAC作为目标MAC地址. 可以用下图思考一下, 不同子网间通信时的隔离性到底是如何实现的? </p>\n<img src=\"./ip_group_question.png\" alt=\"image-20220122220139210\" style=\"zoom:40%;\" />\n\n<p>不同的IP网段可以设置不同的网关地址, 从而细粒度的控制流量出口. 一个默认macos下的路由表配置如下, 该机器ip为192.168.0.108, default网关为192.168.0.1, 访问127.0.0.1时会loopback到自己网卡, 访问192.168.0/24网段时会在en0网卡所处的进行链路层进行二层数据通信. </p>\n<img src=\"./routing_table.png\" alt=\"image-20220122215006525\" style=\"zoom:50%;\" />\n\n<p>路由器实现了网关的功能, 它工作的三层网络层, 可以实现三层协议的解包路由等功能. 当然路由器还有很多其他功能, 比如NAT等. </p>\n<p>路由器上会有很多网口, 可以按用处分为WAN口和LAN口, WAN口指的是接入其他Wide Area Network广域网的网口, LAN口指的是接入路由器内部Local Area Network局域网的网口. 往往内部LAN还支持Wifi的接入, 成为Wireless LAN (WLAN).  每个WAN口均可以提供三层能力, 即可配置独立的MAC及IP地址(独立网卡); LAN口则往往只具备二层传输能力, 提供交换机的功能. 具备三层能力的LAN口可以通过路由器配置作为WAN口服务.</p>\n<img src=\"/Users/talentxiet/Desktop/我的学习文档/网络基础/router_wan_lan.png\" alt=\"router_wan_lan\" style=\"zoom:40%;\" />\n\n<p>当路由器要串联多组子网时, 若想要子网间按期望进行通信的话, 就需要正确配置Router的路由表了. 路由表比较核心的三个配置属性是Destination, Gateway 和 Interface. </p>\n<p>Destination可以是网段, Host或者default (均不匹配时), 路由器网卡收到frame并解出目标IP后, 会逐一进行匹配, 匹配到对应记录后, 会按路由表配置, 将frame的目标MAC地址转换为所配网关的MAC地址, 并通过指定配置的Interface发送出去. 当没配置网关时, 会在Interface广播域对目标IP进行广播寻址.</p>\n<img src=\"/Users/talentxiet/Desktop/我的学习文档/网络基础/router_trans.png\" alt=\"router_transfer\" style=\"zoom:36%;\" />\n\n<img src=\"./router_trans2.png\" alt=\"image-20220124222512944\" style=\"zoom:50%;\" />\n\n<p>一个真实企业级路由器的图片如下: </p>\n<img src=\"/Users/talentxiet/Desktop/我的学习文档/网络基础/real_router.png\" alt=\"image-20220122203856676\" style=\"zoom:45%;\" />\n\n<h3 id=\"F5\"><a href=\"#F5\" class=\"headerlink\" title=\"F5\"></a>F5</h3><p>F5是一家美国公司, 卖的F5设备可提供4-7层的解包和路由能力, 相比工作于网络层的Router其功能就更丰富了. 包括负载均衡，应用状态监控，高可用性保障，广域流量管理，链路控制；内容转换，高速缓存，SSL加速和卸载等能力等等.</p>\n<img src=\"./real_f5.png\" alt=\"image-20220122205509626\" style=\"zoom:60%;\" />\n\n<h2 id=\"真实组网案例\"><a href=\"#真实组网案例\" class=\"headerlink\" title=\"真实组网案例\"></a>真实组网案例</h2><h3 id=\"公共网络\"><a href=\"#公共网络\" class=\"headerlink\" title=\"公共网络\"></a>公共网络</h3><h3 id=\"家庭网络\"><a href=\"#家庭网络\" class=\"headerlink\" title=\"家庭网络\"></a>家庭网络</h3><h2 id=\"Glossary\"><a href=\"#Glossary\" class=\"headerlink\" title=\"Glossary:\"></a>Glossary:</h2><h3 id=\"Ethernet-以太网\"><a href=\"#Ethernet-以太网\" class=\"headerlink\" title=\"Ethernet 以太网\"></a>Ethernet 以太网</h3><p>以太网(Ethernet)是一种计算机局域网技术, 提出于1980s。IEEE组织的IEEE 802.3标准制定了以太网的技术标准, 后续延伸出了802.3~11标准，它规定了包括物理层的连线、电子信号和介质访问层协议的内容。以太网是当前应用最普遍的局域网技术，取代了其他局域网标准如令牌环、FDDI 和 ARCNET。</p>\n<h3 id=\"广播域-broadcast-domain\"><a href=\"#广播域-broadcast-domain\" class=\"headerlink\" title=\"广播域 broadcast domain\"></a>广播域 broadcast domain</h3><p>广播域（Broadcast domain）是计算机网络的一个逻辑划分。广播域中的任意一个节点可以在数据链路层通过广播的方式到达任意一个节点。广播域可以处于同一个局域网内,也可以被桥接到其他的局域网。</p>\n<p>根据目前的流行技术，任意连接到同一 repeater 或者 switch 的电脑属于同一个广播域，并且任意连接到同一个inter-connected的 repeater 或 switch 的集合的电脑也是属于同一个广播域的。而 Router 和其他high-level devices会在广播域间形成隔离。</p>\n<h3 id=\"冲突域-collision-domain\"><a href=\"#冲突域-collision-domain\" class=\"headerlink\" title=\"冲突域 collision domain\"></a>冲突域 collision domain</h3><p>与广播域相对的是冲突域。冲突域中所有节点都链接到同一个被集线器、交换机和学习型网桥划分的相互连接的中继器集合。冲突域一般来说小于或者包含在广播域中。 冲突域下的碰撞问题通过CSMA/CD (Carrier-sense multiple access)解决.</p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><h3 id=\"traceroute实现\"><a href=\"#traceroute实现\" class=\"headerlink\" title=\"traceroute实现\"></a>traceroute实现</h3><p>向目标ip发送ICMP echo包或随机30000+大端口发送udp包,  通过TTL和ICMP结果返回报文判断路由点地址和通信时间.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"分层模型-OSI-model\"><a href=\"#分层模型-OSI-model\" class=\"headerlink\" title=\"分层模型 OSI model\"></a>分层模型 OSI model</h2><p><strong>Open Systems Interconnection model</strong> (<strong>OSI model</strong>) 开放系统互联模型是一个概念性的参考模型, 不指定任何协议的具体实现. 核心思想在于不同网络层级间的解耦、接口独立, 任何一层协议可以升级替换后不影响整个网络功能, 在网络通信协议设计时起到一个指导作用.<br><img src=\"osi7.png\" alt=\"image-osi\" style=\"zoom:50%;\" /></p>\n<h3 id=\"Definitions\"><a href=\"#Definitions\" class=\"headerlink\" title=\"Definitions:\"></a>Definitions:</h3><ul>\n<li><p>通信协议(Communication protocols): 让处于同层的不同host实体可以相互交互.</p>\n</li>\n<li><p>Protocol data unit(PDU): 在每一层, 两个实体通过交换该层协议的PDU来进行交互, PDU包含payload(也称为<a href=\"https://en.wikipedia.org/wiki/Service_data_unit\">service data unit</a> ,SDU) 和 protocol-related headers or footers . </p>\n</li>\n<li><p> 数据通信流程: 从Layer highest开始, PDU向下层传递, 并作为下层的SDU; 重复向更下层传递直至Layer lowest; 接着,底层负责将PDU传递给对端底层; 然后,逐层向上传递,拆包解析出各层SDU.</p>\n</li>\n</ul>\n<img src=\"./osi_pdu_pass.png\" alt=\"image-20220119105145560\" style=\"zoom:40%;\" />\n\n<img src=\"osi_transfer_example.png\" alt=\"image-20220123111825642\" style=\"zoom:43%;\" />\n\n<h3 id=\"Layer-architecture\"><a href=\"#Layer-architecture\" class=\"headerlink\" title=\"Layer architecture\"></a>Layer architecture</h3><h4 id=\"Layer-1-Physical-layer\"><a href=\"#Layer-1-Physical-layer\" class=\"headerlink\" title=\"Layer 1: Physical layer\"></a>Layer 1: Physical layer</h4><p>物理层负责非结构化原始数据的传输和接收, between device和物理传输介质。它将raw digital bits转换成electrical电子,optical光学 或radio无线信号等. 物理层规范规格包含蓝牙、以太网和USB标准等.</p>\n<p>Examples: Ethernet family 802.3 PHY(千兆宽带, 百兆宽带), 802.11 LAN &amp; wireless(2.4Ghz, 5Ghz), BLE(Bluetooth Low Energy) PHY,   E1.</p>\n<h4 id=\"Layer-2-Data-link-layer\"><a href=\"#Layer-2-Data-link-layer\" class=\"headerlink\" title=\"Layer 2: Data link layer\"></a>Layer 2: Data link layer</h4><p>物理层的线路有传输介质与通信设备组成，比特流在传输介质上传输时肯定会存在误差错误的。这样就引入了数据链路层在物理层之上，采用差错检测、差错控制和流量控制等方法，向网络层提供高质量的数据传输服务。</p>\n<p>数据链路层从网络层接受数据包, 并在将其发送到物理层之前, 将这些数据包封装成帧frame. 之后在两个相邻节点间(node to node)的链路上传送帧，每一帧包括<strong>数据</strong>和必要的<strong>头尾信息</strong>（如同步信息、地址信息、差错信息等）. 如果帧太大(超过MTU)的话，数据链路层通常会将大帧拆分为一个个的小帧，小帧能够使传输控制和错误检测更加高效。</p>\n<h4 id=\"Layer-3-Network-layer\"><a href=\"#Layer-3-Network-layer\" class=\"headerlink\" title=\"Layer 3: Network layer\"></a>Layer 3: Network layer</h4><p>网络层的任务就是提供能在不同的网络间transfer packets的程序和方法. 网络中会有非常多的nodes, 每个node会拥有自己的访问地址, 网络层就是要提供一种节点间路由寻址方式能让packet准确的传递给destination. 网络层还会在packet在某些MTU较小链路层传输时, 对原包进行分片, 独立传输, 并在下一链路node重新装配.  网络层可以做数据错误校验, 可靠性保障的功能, 但并不necessary.</p>\n<h4 id=\"Layer-4-Transport-layer\"><a href=\"#Layer-4-Transport-layer\" class=\"headerlink\" title=\"Layer 4: Transport layer\"></a>Layer 4: Transport layer</h4><p>传输层负责将变长数据(variable-length data sequences)从源传输到目的地, 并提供保障QoS的方式. </p>\n<h4 id=\"Layer-5-Session-layer\"><a href=\"#Layer-5-Session-layer\" class=\"headerlink\" title=\"Layer 5: Session layer\"></a>Layer 5: Session layer</h4><p>会话层的主要功能是负责维护两个节点之间的传输联接，确保点到点传输不中断，以及管理数据交换等功能。会话层在应用进程中建立、管理和终止会话。</p>\n<h4 id=\"Layer-6-Presentation-layer\"><a href=\"#Layer-6-Presentation-layer\" class=\"headerlink\" title=\"Layer 6: Presentation layer\"></a>Layer 6: Presentation layer</h4><p>表示层的主要功能是处理在两个通信系统中交换信息的表示方式，主要包括数据格式变化、<a href=\"https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86/11048982\">数据加密</a>与解密、<a href=\"https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%8E%8B%E7%BC%A9/5198909\">数据压缩</a>与解压等</p>\n<h4 id=\"Layer-7-Application-layer\"><a href=\"#Layer-7-Application-layer\" class=\"headerlink\" title=\"Layer 7: Application layer\"></a>Layer 7: Application layer</h4><p>该层直接面向用户，是OSI中的最高层。它的主要任务是为用户提供应用的接口，即提供不同计算机间的文件传送、访问与管理，电子邮件的内容处理，不同计算机通过网络交互访问的虚拟终端功能等.</p>\n<h3 id=\"Protocol-stack-examples\"><a href=\"#Protocol-stack-examples\" class=\"headerlink\" title=\"Protocol stack examples\"></a>Protocol stack examples</h3><h4 id=\"BLE-protocol-stack\"><a href=\"#BLE-protocol-stack\" class=\"headerlink\" title=\"BLE protocol stack\"></a>BLE protocol stack</h4><img src=\"./ble_osi.png\" alt=\"ble_osi\" style=\"zoom:80%;\" />\n\n<h2 id=\"分层模型——TCP-IP模型及协议族\"><a href=\"#分层模型——TCP-IP模型及协议族\" class=\"headerlink\" title=\"分层模型——TCP/IP模型及协议族\"></a>分层模型——TCP/IP模型及协议族</h2><p>TCP/IP 模型将网络分为四层(算上物理层就是五层)，它不关注底层物理介质，主要关注终端之间的逻辑数据流转发。<br>TCP/IP 模型的核心是<strong>网络层</strong>和<strong>传输层</strong>，网络层解决网络之间的逻辑转发问题，传输层保证源端到目的端之间的可靠传输。最上层的<strong>应用层</strong>通过各种协议向终端用户提供业务应用。</p>\n<h3 id=\"物理层\"><a href=\"#物理层\" class=\"headerlink\" title=\"物理层\"></a>物理层</h3><p>任何协议栈都逃不脱最终帮其传输数据的物理层. 物理层传递的都是bit flow, 而以太网使用的都是曼彻斯特编码信号. 曼彻斯特(Manchester)编码的编码方法是把每个码元分成两个相等的间隔。 如图,码元1是前一个间隔为高电压后一个间隔为低电压，即位周期中心向下跳变表示1；码元0正好相反，位周期中心向上跳变表示0。这样保证了在每一个 码元中间出现一次电压的转换，接收端就利用这种电压的转换方便地把位同步信号提取出来.</p>\n<img src=\"./manchester.png\" alt=\"image-20220125225252662\" style=\"zoom:45%;\" />\n\n<p>在链路层从物理层收到的bit流中提取数据时, 一个问题就是如何区分帧的开始.  Manchester + Preamble.</p>\n<img src=\"./preamble.png\" alt=\"image-20220125230003591\" style=\"zoom:40%;\" />\n\n<h3 id=\"数据链路层\"><a href=\"#数据链路层\" class=\"headerlink\" title=\"数据链路层\"></a>数据链路层</h3><p>数据链路层位于网络层之下, 这意味着它与网络层协议比如常用的IP协议是解耦的, 以<strong>以太网数据链路层帧</strong>为例, 在通信时, 其完全不关心payload中是IP协议报文或是其他协议报文, 而是完全通过帧首的源MAC、目标MAC地址进行寻址通信.</p>\n<p>IEEE 802 规范下数据链路层向下还可细分为 logical link control (LLC) 层和 medium access control (MAC) 层。</p>\n<img src=\"./datalinklayer_sublayers.png\" alt=\"dll_sublayes\" style=\"zoom:40%;\" />\n\n<p>LLC 层又叫做<code>逻辑控制链路</code>层，它主要用于数据传输，它充当网络层和数据链路层中的<code>媒体访问控制（MAC）</code>子层之间的接口。LLC 层的主要功能如下</p>\n<ul>\n<li>LLC 的主要功能是发送时在 MAC 层上多路复用协议，并在接收时同样地多路分解协议。</li>\n<li>LLC 提供跳到跳的流的差错控制，像是路由器和路由器之间这种相邻节点的数据传输称为 <code>一跳</code>。</li>\n<li>它允许通过计算机网络进行多点通信。</li>\n</ul>\n<p>MAC 层负责传输介质的流控制和多路复用，它的主要功能如下</p>\n<ul>\n<li>MAC 层为 LLC 和 OSI 网络的上层提供了物理层的抽象。</li>\n<li>MAC 层负责封装帧，以便通过物理介质进行传输。</li>\n<li>MAC 层负责解析源和目标地址。</li>\n<li>MAC 层还负责在冲突的情况下执行冲突解决并启动重传。</li>\n<li>MAC 层负责生成帧校验序列，从而有助于防止传输错误。</li>\n</ul>\n<p>在 MAC 层中，有一个关键概念是 <code>MAC 地址</code>。MAC 地址主要用于识别数据链路中互联的节点. MAC 地址长 6 bytes (48 bit)，在使用<code>网卡(NIC)</code> 的情况下，MAC 地址一般都会烧入 ROM 中。因此，任何一个网卡的 MAC 地址都是唯一的。</p>\n<img src=\"/Users/talentxiet/Desktop/我的学习文档/网络基础/mac_addr.png\" alt=\"mac_addr\" style=\"zoom:28%;\" />\n\n<p>链路层的差错控制通过增加差错编码来实现, 又可分为<strong>检错编码</strong>和<strong>纠错编码</strong>: 检错编码常见有奇偶校验码和循环冗余码; 纠错编码常见有海明码等.</p>\n<p>流量(阻塞)控制是控制链路上的帧的发送速率，使接收方有足够的缓冲空间来接收帧，主要方法有两种，停止-等待协议和滑动窗口协议. 停止-等待协议是一种特殊的滑动窗口协议，相当于发送窗口和接收窗口大小为1的滑动窗口协议。</p>\n<img src=\"./datalink_timewindow.png\" alt=\"image-20220121112137195\" style=\"zoom:40%;\" />\n\n<p>以太网上传输的链路层数据帧有两种格式：<strong>Ethernet_II 和 IEEE802.3</strong>。选择哪种格式由 TCP/IP 协议簇中的网络层决定。大多数的数据帧使用的是 Ethernet_II 格式. IEEE802.3 格式：Length字段值小于等于0x05DC. Ethernet_II 格式：Type 字段值大于等于0x0600. 以此来供链路层判断数据是哪种规范.</p>\n<img src=\"./data_link_layer_frame.png\" alt=\"image-20220119143457079\" style=\"zoom:45%;\" />\n\n<p>FCS: frame check sequence, 错误检查的.<br>LLC：Logical Link Control，逻辑链路控制由目的访问点 D.SAP （Destination Service Access Point）、源服务访问点 S.SAP（Source Service Access Point）和 Control 字段组成.<br>SNAP：Sub-network Access Protocol，子网访问协议由机构代码（Org Code）和类型（Type）字段组成。Org Code 三个字节都为 0 。Type 字段的含义与 Ethernet_II 帧中的 Type 字段相同.</p>\n<h3 id=\"网络层\"><a href=\"#网络层\" class=\"headerlink\" title=\"网络层\"></a>网络层</h3><h4 id=\"IP协议\"><a href=\"#IP协议\" class=\"headerlink\" title=\"IP协议\"></a><strong>IP协议</strong></h4><ul>\n<li>对于网络层，<strong>IP协议</strong>是其中一个非常重要的协议</li>\n<li>IP协议使得复杂的实际网络变为一个<strong>虚拟互联的网络</strong>（也就是我们只需要将终端设备连接到这个网络中去即可，并不需要关心里边实际的复杂网络）</li>\n<li>IP协议使得网络层可以<strong>屏蔽底层细节</strong>而专注网络层的<strong>数据转发</strong>（如果单从网络层去看，我们是不用关心<strong>数据包</strong>是通过海底电缆还是通过无线WiFi传输到目的计算机的）</li>\n<li>IP协议<strong>解决了在虚拟网络中数据报传输路径的问题</strong></li>\n</ul>\n<img src=\"./ip_nets.png\" alt=\"image-20220125231347009\" style=\"zoom:40%;\" />\n\n<p><strong>IP协议特点:</strong></p>\n<ul>\n<li>无状态, 是指IP通信双方不同步传输数据的状态信息，因此所有IP数据报的发送，传输，和接收都是相互独立的，没有山下文关系的。发送、传输和接收都是相互独立、没有上下文关系的。这种服务最大的缺点是无法处理乱序和重复的IP数据报。比如发送端发送出的第N个IP数据报可能比第N+1个IP数据报后到达接收端，而同一个IP数据报也可能经过不同的路径多次到达接收端。在这两种情况下，接收端的IP模块无法检测到乱序和重复，因为这些IP数据报之间没有任何上下文关系。接收端的IP模块只要收到了完整的IP数据报(如果是IP分片的话，IP 模块将先执行重组)，就将其数据部分(TCP报文段、UDP数据报或者ICMP报文)，上交给上层协议。那么从上层协议来看，这些数据就可能是乱序的、重复的。面向连接的协议，比如TCP协议，则能够自己处理乱序的、重复的报文段，它递交给上层协议的内容绝对是有序的、正确的。虽然IP数据报头部提供了一个标识字段(见后文)用以唯-标识-一个IP数据报，但它是被用来处理IP分片和重组的，而不是用来指示接收顺序的。无状态服务的优点也很明显:简单、高效。我们无须为保持通信的状态而分配一些内核资源，也无须每次传输数据时都携带状态信息。在网络协议中，无状态是很常见的，比如UDP协议和HTTP协议都是无状态协议。以HTTP协议为例，一个浏览器的连续两次网页请求之间没有任何关联，它们将被Web服务器独立地处理。</li>\n<li>无连接(connectionless), 是指IP通信双方都不长久地维持对方的任何信息。这样，上层协议每次发送数据的时候，都必须明确指定对方的IP地址。</li>\n<li>不可靠, 是指IP协议不能保证IP数据报准确地到达接收端，它只是承诺尽最大努力(best effort)。 很多种情况都能导致IP数据报发送失败。比如，某个中转路由器发现IP数据报在网络上存活的时间太长(根据IP数据报头部字段TTL判断，见后文)，那么它将丢弃之，并返回一个ICMP错误消息(超时错误)给发送端。又比如，接收端发现收到的IP数据报不正确(通过校验机制)，它也将丢弃之，并返回一个ICMP错误消息(IP 头部参数错误)给发送端。无论哪种情况，发送端的IP模块一旦检测到IP数据报发送失败，就通知上层协议发送失败，而不会试图重传。因此，使用IP服务的上层协议(比如TCP协议)需要自己实现数据确认、超时重传等机制以达到可靠传输的目的。</li>\n</ul>\n<p><strong>IP协议报文格式 :</strong></p>\n<img src=\"./ip_packet.png\" alt=\"image-20220125234059378\" style=\"zoom:40%;\" />\n\n<ul>\n<li><p><strong>版本</strong>：占4位，指的是IP协议的版本，通信双方的版本必须一致，即IPv4，也有IPv6</p>\n</li>\n<li><p><strong>首部长度</strong>：占4位，最大数值为15，表示的是IP首部的长度，单位是“32位字”（4个字节），也就是<strong>IP首部</strong>最大长度为60字节</p>\n</li>\n<li><p><strong>服务类型</strong>：服务登记, 比如VIP专线, 这个一般是不需要关心的</p>\n</li>\n<li><p><strong>总长度</strong>：占16位，最大数值为65535，表示的是<strong>IP数据报总长度</strong>（IP首部+IP数据） （在前边介绍数据链路层的时候，也提到过一个长度。对于数据链路层的长度，称之为<strong>MTU</strong>，一般为1500字节。而IP数据报的最大长度有65535个字节，比MTU要大。如果真正传输的时候，如果出现这种情况，数据链路层会对IP数据报进行<strong>分片</strong>，也就是将一个较长的IP数据报拆分成多个数据帧来进行传输）</p>\n</li>\n<li><p><strong>标识</strong>：占16位，计数器标示, 分片后的同组数据具备相同标示. 同一组的包根据标示重组.</p>\n</li>\n<li><p><strong>标记</strong>： 占3位，但目前只有2位有意义。<br> 标志字段中的最低位记为MF(More Fragment)。MF=1即表示后面“还有分片”的数据报,MF=0表示这已是若干数据报片中的最后一个<br> 标志字段中间的一位记为DF(Don’t Fragment)，意思是“不能分片”。只有当DF=0时才允许分片。</p>\n</li>\n<li><p><strong>片偏移</strong>：前边有提到，如果IP数据报的长度过长，会进行IP报文的分片，把一个IP报文拆分成多个数据帧进行数据链路层的传输(以<strong>8 Bytes</strong>的倍数分包)。因此，如果拆分的话，就需要使用<strong>片偏移</strong>来记录当前的数据帧，保存的<strong>第几个偏移的IP数据</strong></p>\n <img src=\"./ip_offset.png\" alt=\"image-20220129104929487\" style=\"zoom:45%;\" /></li>\n<li><p><strong>TTL</strong>：占8位，表明IP数据报文在网络中的<strong>寿命</strong>，每经过一个设备（不管是路由器还是计算机），TTL减一，当TTL=0时，网络设备必须<strong>丢弃</strong>该报文（它解决的就是，当网络报文找不到终点的时候，避免网络报文在网络中无限的传输，以消耗带宽）</p>\n</li>\n<li><p><strong>协议</strong>：占8位，表明IP数据所携带的具体数据是什么<strong>协议</strong>的（如TCP、UDP等，一些协议对应的值，可参考下图）</p>\n</li>\n<li><p><strong>校验和</strong>：占16位，校验IP首部是否有出错（接收方接收到IP首部之后也会进行校验，如果有错，则直接丢弃）</p>\n</li>\n<li><p><strong>源IP地址</strong>：<strong>发送</strong>IP数据报的网络设备的IP地址</p>\n</li>\n<li><p><strong>目的IP地址</strong>：IP数据报要<strong>到达</strong>的目的网络设备的IP地址</p>\n</li>\n</ul>\n<h4 id=\"ICMP协议\"><a href=\"#ICMP协议\" class=\"headerlink\" title=\"ICMP协议\"></a><strong>ICMP协议</strong></h4><img src=\"./icmp_kinds.png\" alt=\"image-20220126215905234\" style=\"zoom:50%;\" />\n\n<h4 id=\"路由选择协议\"><a href=\"#路由选择协议\" class=\"headerlink\" title=\"路由选择协议\"></a><strong>路由选择协议</strong></h4><p><strong>自治系统</strong>：autonomous system。在互联网中，一个自治系统(AS)是一个有权自主地决定在本系统中应采用各种<a href=\"https://baike.baidu.com/item/%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE/202634\">路由协议</a>的小型单位。这个网络单位可以是一个简单的网络也可以是一个由一个或多个普通的<a href=\"https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%91%98/595848\">网络管理员</a>来控制的网络群体，它是一个单独的可管理的<a href=\"https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E5%8D%95%E5%85%83/9928606\">网络单元</a>（例如一所大学，一个企业或者一个公司个体）。</p>\n<img src=\"./ip_routing_protocol.png\" alt=\"image-20220126220513526\" style=\"zoom:50%;\" />\n\n<p>内部网关协议:</p>\n<ul>\n<li>RIP, Routing Information Protocol: 优点, 算法简单; 缺点, 路由故障链路改变远端感知慢, 距离有限 max16, 大规模网络路由表可能过大.</li>\n</ul>\n<img src=\"./rip.png\" alt=\"image-20220126220918042\" style=\"zoom:50%;\" />\n\n<ul>\n<li><p>OSPF, Open Shortest Path First 开放的最短路径优先算法: </p>\n<p>与RIP三个区别:（1）向本<a href=\"https://baike.baidu.com/item/%E8%87%AA%E6%B2%BB%E7%B3%BB%E7%BB%9F\">自治系统</a>中所有路由器发送信息。（2）发送的信息就是与本<a href=\"https://baike.baidu.com/item/%E8%B7%AF%E7%94%B1%E5%99%A8\">路由器</a>相邻的所有路由器的链路状态，但这只是路由器所知道的部分信息。（3）只有在链路状态发生变化时，<a href=\"https://baike.baidu.com/item/%E8%B7%AF%E7%94%B1%E5%99%A8\">路由器</a>才向所有路由器用<a href=\"https://baike.baidu.com/item/%E6%B4%AA%E6%B3%9B\">洪泛</a>法发送此信息。</p>\n</li>\n</ul>\n<p>外部(边界)网关协议:</p>\n<p>BGP用于在不同的自治系统（AS）之间交换路由信息。当两个AS需要交换路由信息时，每个AS都必须指定一个运行BGP的节点，来代表AS与其他的AS交换路由信息。两个AS中利用BGP交换信息的路由器也被称为边界网关（Border Gateway）或边界路由器（Border Router）. </p>\n<img src=\"./BGP_speaker.png\" alt=\"image-20220126223533819\" style=\"zoom:50%;\" />\n\n<img src=\"./BGP_example.png\" alt=\"image-20220126223429235\" style=\"zoom:40%;\" />\n\n\n\n<h3 id=\"传输层\"><a href=\"#传输层\" class=\"headerlink\" title=\"传输层\"></a>传输层</h3><p>端口作用, 实现进程到进程的通信, 复用ip线路, 提供标准的的端口-&gt;进程的映射方式.</p>\n<img src=\"./transport_process.png\" alt=\"image-20220126230009234\" style=\"zoom:50%;\" />\n\n<h4 id=\"UDP\"><a href=\"#UDP\" class=\"headerlink\" title=\"UDP\"></a>UDP</h4><p>UDP, User Datagram Protocol用户数据报协议, 只在IP基础上多了复用分用和差错校验的功能.</p>\n<h5 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h5><ul>\n<li>无连接</li>\n<li>尽努力交付</li>\n<li>面向报文的</li>\n<li>无拥塞控制</li>\n<li>支持一对一、一对多、多对一、多对多</li>\n<li>首部开销小</li>\n</ul>\n<h5 id=\"协议格式\"><a href=\"#协议格式\" class=\"headerlink\" title=\"协议格式\"></a>协议格式</h5><img src=\"./udp_protocol.png\" alt=\"image-20220126233302042\" style=\"zoom:45%;\" />\n\n<h4 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h4><h5 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h5><ul>\n<li><p>面向连接</p>\n</li>\n<li><p>每条点对点(socket1, socket2)</p>\n</li>\n<li><p>可靠的</p>\n</li>\n<li><p>全双工</p>\n</li>\n<li><p>面向字节流的</p>\n</li>\n<li><p>为应用程序间提供逻辑通信链路</p>\n<img src=\"./tcp_bytes_stream.png\" alt=\"image-20220129001752910\" style=\"zoom:50%;\" /></li>\n</ul>\n<h5 id=\"协议格式-1\"><a href=\"#协议格式-1\" class=\"headerlink\" title=\"协议格式\"></a>协议格式</h5><img src=\"./tcp_protocol.png\" alt=\"image-20220127225910379\" style=\"zoom:50%;\" />\n\n<p><strong>16位源端口号</strong>：指发送端的端口号<br><strong>16位目的端口号</strong>：指目的端的端口号<br><strong>4位头部长度</strong>：同IP头部，表示TCP头部的大小，以4字节为单位。<br><strong>32位序列号</strong>：TCP通信过程中，通过序列号来保证传输过程中数据的有序性<br><strong>32位确认号</strong>：用以对接受到的报文进行确认<br><strong>保留6位</strong><br><strong>URG</strong>：表示紧急指针<br><strong>ACK</strong>：表示确认号<br><strong>PSH</strong>：通知对端立即从缓冲区取走数据<br><strong>RST</strong>: 通知当前连接出现问题, 要释放资源, 有需要则重新建立连接. 也可用于拒绝非法连接.<br><strong>SYN</strong>：表示请求建立连接<br><strong>FIN</strong>：标志要通知对端本端的数据发送要关闭<br><strong>16位窗口大小</strong>：TCP流量控制的手段，告诉发送方本端的接收端缓冲区还能接受多少数据, 单位字节.<br><strong>16位校验和</strong>：由发送方填充，接收端用以检查TCP报文在传输过程中是否有损坏</p>\n<h5 id=\"可靠性\"><a href=\"#可靠性\" class=\"headerlink\" title=\"可靠性\"></a>可靠性</h5><h6 id=\"滑动窗口\"><a href=\"#滑动窗口\" class=\"headerlink\" title=\"滑动窗口\"></a>滑动窗口</h6><p>A根据B TCP ack报文中的窗口大小发送滑动窗口大小以内的若干数据给B, 给回复按序抵达的最大包序号, 即31. B不应过度拖延回复ack的时间.</p>\n<img src=\"./tcp_window.png\" alt=\"image-20220128000255497\" style=\"zoom:50%;\" />\n\n<img src=\"./tcp_buffer.png\" alt=\"image-20220128000641845\" style=\"zoom:50%;\" />\n\n<p>需注意, tcp是全双工通信, 每端都有自己的发送和接受窗口及缓冲. </p>\n<h6 id=\"超时重传时间-Retransmision-Time-out\"><a href=\"#超时重传时间-Retransmision-Time-out\" class=\"headerlink\" title=\"超时重传时间 Retransmision Time out\"></a>超时重传时间 Retransmision Time out</h6><img src=\"./tcp_rto.png\" alt=\"image-20220128001439268\" style=\"zoom:40%;\" />\n\n<h6 id=\"选择确认ACK-Selective-ACK\"><a href=\"#选择确认ACK-Selective-ACK\" class=\"headerlink\" title=\"选择确认ACK Selective ACK\"></a>选择确认ACK Selective ACK</h6><p>SACK用于接收端向发送端报告部分未按序已收到的字节块, 从而避免重复传输. 需要tcp连接时 option增加SACK头, 双方确认支持SACK. 但是描述哪些数据已接受其实是比较复杂的, 尽管RFC2018有详细说明, 但使用还是较少, 大部分还是发送端重发所有未ack字节.</p>\n<img src=\"./tcp_sack.png\" alt=\"image-20220128002718253\" style=\"zoom:50%;\" />\n\n\n\n<h5 id=\"TCP流量控制\"><a href=\"#TCP流量控制\" class=\"headerlink\" title=\"TCP流量控制\"></a>TCP流量控制</h5><h6 id=\"可利用滑动窗口控制发送方流量\"><a href=\"#可利用滑动窗口控制发送方流量\" class=\"headerlink\" title=\"可利用滑动窗口控制发送方流量\"></a>可利用滑动窗口控制发送方流量</h6><h6 id=\"TCP传输效率\"><a href=\"#TCP传输效率\" class=\"headerlink\" title=\"TCP传输效率\"></a>TCP传输效率</h6><p>应用程序把发送数据给到TCP缓存就不管了, 由TCP负责控制发送时机将数据正确的发送出去. 这是一个比较复杂的问题.</p>\n<ul>\n<li><p><strong>Nagle算法</strong></p>\n<p>TCP/IP协议中，无论发送多少数据，总是要在数据前面加上协议头，同时，对方接收到数据，也需要发送ACK表示确认。为了尽可能的利用网络带宽，TCP总是希望尽可能的发送足够大的数据。（一个连接会设置MSS参数，因此，TCP/IP希望每次都能够以MSS尺寸的数据块来发送数据）。Nagle算法就是为了尽可能发送大块数据，避免网络中充斥着许多小数据块。</p>\n<p>Nagle算法的基本定义是<strong>任意时刻，最多只能有一个未被确认的小段</strong>。 所谓“小段”，指的是小于MSS尺寸的数据块，所谓“未被确认”，是指一个数据块发送出去后，没有收到对方发送的ACK确认该数据已收到。</p>\n<p>Nagle算法的规则（可参考tcp_output.c文件里tcp_nagle_check函数注释）：</p>\n<p>（1）如果包长度达到MSS，则允许发送；</p>\n<p>（2）如果该包含有FIN，则允许发送；</p>\n<p>（3）设置了TCP_NODELAY选项，则允许发送；</p>\n<p>（4）未设置TCP_CORK选项时，若所有发出去的小数据包（包长度小于MSS）均被确认，则允许发送；</p>\n<p>（5）上述条件都未满足，但发生了超时（一般为200ms），则立即发送。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> there is new data to send <span class=\"comment\">#有数据要发送</span></span><br><span class=\"line\">    <span class=\"comment\"># 发送窗口缓冲区和队列数据 &gt;=mss，队列数据（available data）为原有的队列数据加上新到来的数据</span></span><br><span class=\"line\">    <span class=\"comment\"># 也就是说缓冲区数据超过mss大小，nagle算法尽可能发送足够大的数据包</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> the window size &gt;= MSS and available data is &gt;= MSS </span><br><span class=\"line\">        send complete MSS segment now <span class=\"comment\"># 立即发送</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> there is unconfirmed data still <span class=\"keyword\">in</span> the pipe <span class=\"comment\"># 前一次发送的包没有收到ack</span></span><br><span class=\"line\">            <span class=\"comment\"># 将该包数据放入队列中，直到收到一个ack再发送缓冲区数据</span></span><br><span class=\"line\">            enqueue data <span class=\"keyword\">in</span> the buffer until an acknowledge is received </span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            send data immediately <span class=\"comment\"># 立即发送</span></span><br><span class=\"line\">        end <span class=\"keyword\">if</span></span><br><span class=\"line\">    end <span class=\"keyword\">if</span></span><br><span class=\"line\">end <span class=\"keyword\">if</span>　</span><br></pre></td></tr></table></figure>\n\n<p>Nagle算法只允许一个未被ACK的包存在于网络，它并不管包的大小，因此它事实上就是一个扩展的停-等协议，只不过它是基于包停-等的，而不是基于字节停-等的。</p>\n</li>\n<li><p><strong>TCP确认延迟机制</strong></p>\n<p>当Server端收到数据之后，它并不会马上向client端发送ACK，而是会将ACK的发送延迟一段时间（假设为t），它希望在t时间内server端会向client端发送应答数据，这样ACK就能够和应答数据一起发送，就像是应答数据<strong>捎带着ACK</strong>过去。初始化是40ms。</p>\n</li>\n<li><p><strong>TCP_NODELAY 选项</strong></p>\n<p>默认情况下，发送数据采用Nagle 算法。这样虽然提高了<a href=\"https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E5%90%9E%E5%90%90%E9%87%8F/646450\">网络吞吐量</a>，但是实时性却降低了，在一些交互性很强的应用程序来说是不允许的，使用TCP_NODELAY选项可以禁止Nagle 算法。</p>\n<p>此时，应用程序向内核递交的每个数据包都会立即发送出去。需要注意的是，虽然禁止了Nagle 算法，但网络的传输仍然受到TCP确认延迟机制的影响。</p>\n</li>\n<li><p><strong>TCP_CORK 选项</strong></p>\n<p>所谓的CORK就是塞子的意思，形象地理解就是用CORK将连接塞住，使得数据先不发出去，等到拔去塞子后再发出去。设置该选项后，内核会尽力把小数据包拼接成一个大的数据包（一个MTU）再发送出去，当然若一定时间后（一般为200ms，该值尚待确认），内核仍然没有组合成一个MTU时也必须发送现有的数据（不可能让数据一直等待吧）。</p>\n</li>\n</ul>\n<h5 id=\"TCP拥塞控制\"><a href=\"#TCP拥塞控制\" class=\"headerlink\" title=\"TCP拥塞控制\"></a>TCP拥塞控制</h5><ul>\n<li><p>拥塞控制：防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载。拥塞控制所要做的都有一个前提：网络能够承受现有的网络负荷。拥塞控制是一个全局性的过程，涉及到所有的主机、路由器，以及与降低网络传输性能有关的所有因素。</p>\n</li>\n<li><p>流量控制：指点对点通信量的控制，是端到端的问题。流量控制所要做的就是抑制发送端发送的速率，以便使接收端来得及接收。</p>\n</li>\n</ul>\n<p>解决拥塞问题一般是以下步骤: 1) 监测网络, 探测拥塞的位置与时间;  2) 将拥塞信息发送到能采取控制的地方; 3) 调整网络参数.</p>\n<p>常用方法: 慢开始( slow-start )、拥塞避免( congestion avoidance )、快重传( fast retransmit )和快恢复( fast recovery )。</p>\n<h6 id=\"慢开始\"><a href=\"#慢开始\" class=\"headerlink\" title=\"慢开始\"></a>慢开始</h6><p>发送方维持一个拥塞窗口 cwnd ( congestion window )的状态变量。拥塞窗口的大小取决于网络的拥塞程度，并且动态地在变化。发送方让自己的发送窗口等于拥塞窗口。发送方控制拥塞窗口的原则是：只要网络没有出现拥塞，拥塞窗口就再增大一些，以便把更多的分组发送出去。但只要网络出现拥塞，拥塞窗口就减小一些，以减少注入到网络中的分组数。</p>\n<p>慢开始算法：当主机开始发送数据时，如果立即所大量数据字节注入到网络，那么就有可能引起网络拥塞，因为现在并不清楚网络的负荷情况。因此，较好的方法是先探测一下，即由小到大逐渐增大发送窗口，也就是说，由小到大逐渐增大拥塞窗口数值。通常在刚刚开始发送报文段时，先把拥塞窗口 cwnd 设置为一个最大报文段MSS的数值。而在每收到一个对新的报文段的确认后，把拥塞窗口增加至多一个MSS的数值。用这样的方法逐步增大发送方的拥塞窗口 cwnd ，可以使分组注入到网络的速率更加合理。 cwnd = 1, 2, 4, 8 …</p>\n<p>为了防止拥塞窗口cwnd增长过大引起网络拥塞，还需要设置一个慢开始门限ssthresh状态变量。慢开始门限ssthresh的用法如下：</p>\n<p>　　当 cwnd &lt; ssthresh 时，使用上述的慢开始算法<br>　　当 cwnd &gt; ssthresh 时，停止使用慢开始算法而改用拥塞避免算法<br>　　当 cwnd = ssthresh 时，既可使用慢开始算法，也可使用拥塞控制避免算法</p>\n<h6 id=\"拥塞避免\"><a href=\"#拥塞避免\" class=\"headerlink\" title=\"拥塞避免\"></a>拥塞避免</h6><p>让拥塞窗口cwnd缓慢地增大，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是加倍。这样拥塞窗口cwnd按线性规律缓慢增长，比慢开始算法的拥塞窗口增长速率缓慢得多。</p>\n<p>无论在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞（其根据就是没有收到确认），就要把慢开始门限ssthresh设置为出现拥塞时的发送方窗口值的一半（但不能小于2）。然后把拥塞窗口cwnd重新设置为1，执行慢开始算法。这样做的目的就是要迅速减少主机发送到网络中的分组数，使得发生拥塞的路由器有足够时间把队列中积压的分组处理完毕。</p>\n<img src=\"./tcp_slow_start.png\" alt=\"image-20220128190952845\" style=\"zoom:40%;\" />\n\n<h6 id=\"快重传和快恢复\"><a href=\"#快重传和快恢复\" class=\"headerlink\" title=\"快重传和快恢复\"></a>快重传和快恢复</h6><p>快重传算法首先要求接收方每收到一个报文段后(即便是后序)就立即发出重复确认（为的是使发送方及早知道有报文段没有到达对方），而不要等到自己发送数据时才进行捎带确认。当发送方连续收到三个重复确认，就执行“乘法减小”算法，把慢开始门限ssthresh减半。在采用快恢复算法时，慢开始算法只是在TCP连接建立时和网络出现超时时才使用。采用这样的拥塞控制方法使得TCP的性能有明显的改进。</p>\n<img src=\"./tcp_congest.png\" alt=\"image-20220128190034654\" style=\"zoom:50%;\" />\n\n<h5 id=\"TCP连接管理\"><a href=\"#TCP连接管理\" class=\"headerlink\" title=\"TCP连接管理\"></a>TCP连接管理</h5><h6 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h6><p>三次握手是为了建立连接, 双方确认对方的存在,并协商一些参数,如窗口大小 , 初始化一下缓冲队列资源等. 为了确认双方存在, 头两次sync, sync+ack是 省不了的, 那第三次ack是为了做什么呢? 是为了避免已失效的sync请求又抵达B, 又消耗B的资源. 有了第三次ack, 当无效的syn被server sync+ack后, client不会回复ack, 超时后server也就会再销毁掉对应资源.</p>\n<img src=\"./tcp_handshake.png\" alt=\"image-20220129000032602\" style=\"zoom:50%;\" />\n\n<h6 id=\"四次挥手\"><a href=\"#四次挥手\" class=\"headerlink\" title=\"四次挥手\"></a>四次挥手</h6><img src=\"./tcp_bye_handshake.png\" alt=\"image-20220129002627713\" style=\"zoom:50%;\" />\n\n<p><strong>MSL</strong>: Max Segment lifetime, 报文端最大寿命. </p>\n<p>为什么A收到 FIN 后要等两个MSL呢? </p>\n<ol>\n<li>确保能回复FIN的ack, 如果B没收到ack, 会重新发送FIN+ACK. 这时如果A已经断了, B就只能自己特殊处理到CLOSED状态.</li>\n<li>尽量让本次连接 网络中的网络包都传输完, 不会在新连接中收到旧连接报文.</li>\n</ol>\n<h5 id=\"TCP有限状态机\"><a href=\"#TCP有限状态机\" class=\"headerlink\" title=\"TCP有限状态机\"></a>TCP有限状态机</h5><img src=\"./tcp_state.png\" alt=\"image-20220129152318656\" style=\"zoom:50%;\" />\n\n\n\n<h4 id=\"应用层\"><a href=\"#应用层\" class=\"headerlink\" title=\"应用层\"></a>应用层</h4><h2 id=\"应用层常用协议\"><a href=\"#应用层常用协议\" class=\"headerlink\" title=\"应用层常用协议\"></a>应用层常用协议</h2><h3 id=\"DNS\"><a href=\"#DNS\" class=\"headerlink\" title=\"DNS\"></a>DNS</h3><p>基于UDP, <strong>53</strong>端口:  query请求(src port: 12868 , dst port: 53 ) + response响应(src port: 53, dst port: 12868 )</p>\n<p>迭代查询 or 递归查询 + 缓存. </p>\n<p><strong>解析顺序</strong>: 浏览器缓存, 系统缓存, 路由器DNS缓存 , ISP DNS 缓存, 根域名服务器, 顶级域名服务器, 主域名服务器, 保存结果至缓存.</p>\n<img src=\"./dns.png\" alt=\"image-20220129165409193\" style=\"zoom:40%;\" />\n\n<h3 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h3><p>HTTP协议发展历程:</p>\n<p>![image-20220127112311050](/Users/talentxiet/Library/Application Support/typora-user-images/image-20220127112311050.png)</p>\n<p>协议格式:</p>\n<img src=\"./http_protocol.png\" alt=\"image-20220130002354946\" style=\"zoom:50%;\" />\n\n<h3 id=\"SMTP\"><a href=\"#SMTP\" class=\"headerlink\" title=\"SMTP\"></a>SMTP</h3><img src=\"./smtp.png\" alt=\"image-20220130002634963\" style=\"zoom:45%;\" />\n\n<h3 id=\"DHCP\"><a href=\"#DHCP\" class=\"headerlink\" title=\"DHCP\"></a>DHCP</h3><img src=\"./dhcp.png\" alt=\"image-20220130221121647\" style=\"zoom:50%;\" />\n\n<h2 id=\"应用程序间通信过程\"><a href=\"#应用程序间通信过程\" class=\"headerlink\" title=\"应用程序间通信过程\"></a>应用程序间通信过程</h2><h3 id=\"系统调用-amp-socket套接字\"><a href=\"#系统调用-amp-socket套接字\" class=\"headerlink\" title=\"系统调用&amp;socket套接字\"></a>系统调用&amp;socket套接字</h3><img src=\"./syscall.png\" alt=\"image-20220130221429374\" style=\"zoom:50%;\" />\n\n<img src=\"./socket2.png\" alt=\"image-20220130224749539\" style=\"zoom:50%;\" />\n\n\n\n<h2 id=\"网络安全\"><a href=\"#网络安全\" class=\"headerlink\" title=\"网络安全\"></a>网络安全</h2><p>四个目标:</p>\n<ul>\n<li>保密性</li>\n<li>端点鉴别</li>\n<li>信息完整性</li>\n<li>运行安全性 访问控制</li>\n</ul>\n<img src=\"./net_sec_key.png\" alt=\"image-20220205185347484\" style=\"zoom:50%;\" />\n\n<h3 id=\"DES-AES\"><a href=\"#DES-AES\" class=\"headerlink\" title=\"DES AES\"></a>DES AES</h3><p>data encryption standard,  advanced encrytion standard, 对称加密、</p>\n<h3 id=\"公钥密码体制\"><a href=\"#公钥密码体制\" class=\"headerlink\" title=\"公钥密码体制\"></a>公钥密码体制</h3><p>任何加解密算法的安全性都取决于密钥长度,以及攻破密文的计算量</p>\n<h3 id=\"数字签名\"><a href=\"#数字签名\" class=\"headerlink\" title=\"数字签名\"></a>数字签名</h3><p>目标:</p>\n<ul>\n<li>接收者能核实发送者对报文的数字签名, 即是发送者发的</li>\n<li>收到的数据是完整的</li>\n<li>发送者事后不可抵赖数字签名</li>\n</ul>\n<img src=\"./signature.png\" alt=\"image-20220205191312308\" style=\"zoom:50%;\" />\n\n<h3 id=\"报文鉴别\"><a href=\"#报文鉴别\" class=\"headerlink\" title=\"报文鉴别\"></a>报文鉴别</h3><p>加解密算法可以实现报文鉴别,但是消耗cpu, 所以常用密码散列算法保护数据完整性. MD5 (message digest 第五代)和 SHA-1,2,3(secure hash algorithm).</p>\n<img src=\"./sec_mac.png\" alt=\"image-20220205193055077\" style=\"zoom:50%;\" />\n\n<p>MAC: message authentication code,</p>\n<h3 id=\"密钥分配\"><a href=\"#密钥分配\" class=\"headerlink\" title=\"密钥分配\"></a>密钥分配</h3><h4 id=\"对称密钥分配\"><a href=\"#对称密钥分配\" class=\"headerlink\" title=\"对称密钥分配\"></a>对称密钥分配</h4><p>对称密钥是一对一的, 任意双方通信都要有唯一的key, 通常由KDC动态随机分配</p>\n<img src=\"./对称密钥分配.png\" alt=\"image-20220205195510847\" style=\"zoom:50%;\" />\n\n<h4 id=\"公钥分配\"><a href=\"#公钥分配\" class=\"headerlink\" title=\"公钥分配\"></a>公钥分配</h4><p>由受信任的机构维护公钥和实体的关系, 通常是政府机构, 称之为CA (certification authority), 每个实体会被颁布 证书(certificate), 证书中包含拥有者标示, 公钥, 且此证书被CA进行了数字签名. 公众可以从机构公开信息中获取到机构的公钥, 对签名和 证书信息进行验证.</p>\n<p>为了使CA拥有统一格式, IETF接受了ITU制定的X.509规范.</p>\n<h3 id=\"互联网中的安全协议\"><a href=\"#互联网中的安全协议\" class=\"headerlink\" title=\"互联网中的安全协议\"></a>互联网中的安全协议</h3><h4 id=\"网络层-1\"><a href=\"#网络层-1\" class=\"headerlink\" title=\"网络层\"></a>网络层</h4><h5 id=\"IPsec\"><a href=\"#IPsec\" class=\"headerlink\" title=\"IPsec\"></a>IPsec</h5><img src=\"./ipsec.png\" alt=\"image-20220206000051358\" style=\"zoom:50%;\" />\n\n<h4 id=\"传输层-1\"><a href=\"#传输层-1\" class=\"headerlink\" title=\"传输层\"></a>传输层</h4><h5 id=\"SSL\"><a href=\"#SSL\" class=\"headerlink\" title=\"SSL\"></a>SSL</h5><p>Secure Socket Layer, Netscape开发, 95年交给IETF</p>\n<img src=\"./ssl.png\" alt=\"image-20220206001829432\" style=\"zoom:50%;\" />\n\n<img src=\"./ssl_procedure.png\" alt=\"image-20220206002408083\" style=\"zoom:50%;\" />\n\n<h5 id=\"TLS\"><a href=\"#TLS\" class=\"headerlink\" title=\"TLS\"></a>TLS</h5><p>Transport Layer Security, 基于SSL3.0设计. </p>\n<h3 id=\"防火墙\"><a href=\"#防火墙\" class=\"headerlink\" title=\"防火墙\"></a>防火墙</h3><p>是一种访问控制技术, 通常是特殊编程的路由器, 进行访问策略控制. </p>\n<ul>\n<li>分组过滤路由器: 根据 源/目的 IP/端口 协议类型进行分组过滤控制.</li>\n<li>应用网关: 应用层网关, 根据应用层报文鉴权转发</li>\n</ul>\n<h2 id=\"实时音视频相关协议\"><a href=\"#实时音视频相关协议\" class=\"headerlink\" title=\"实时音视频相关协议\"></a>实时音视频相关协议</h2><img src=\"./av_protocols.png\" alt=\"image-20220206165809797\" style=\"zoom:50%;\" />\n\n<h3 id=\"RTP\"><a href=\"#RTP\" class=\"headerlink\" title=\"RTP\"></a>RTP</h3><img src=\"./rtp_protocol.png\" alt=\"image-20220206165710831\" style=\"zoom:50%;\" />\n\n<h3 id=\"RTCP\"><a href=\"#RTCP\" class=\"headerlink\" title=\"RTCP\"></a>RTCP</h3><img src=\"./rtcp.png\" alt=\"image-20220206172316751\" style=\"zoom:50%;\" />\n\n<h2 id=\"常见网络设备\"><a href=\"#常见网络设备\" class=\"headerlink\" title=\"常见网络设备\"></a>常见网络设备</h2><h3 id=\"Repeater中继器\"><a href=\"#Repeater中继器\" class=\"headerlink\" title=\"Repeater中继器\"></a>Repeater中继器</h3><p>中继器是一个将输入信号增强放大的设备, 把信号送得更远，以延展网络长度. 与具体信号形式无关,比如卫星雷达, 以太网集线器; 属于物理层</p>\n<h3 id=\"Hub集线器\"><a href=\"#Hub集线器\" class=\"headerlink\" title=\"Hub集线器\"></a>Hub集线器</h3><p>集线器（Ethernet hub）是指将多条以太网双绞线或光纤集合连接在同一段物理介质下的设备。集线器运作在OSI模型中的物理层，可以让其链接的设备工作在同一网段。集线器上有多个I/O端口，信号从任意一个端口进入后，会从其他端口出现. </p>\n<p>由于集线器会把收到的任何数字信号，从集线器的所有端口提交，这会造成信号之间碰撞的机会很大，而且信号也可能被窃听，并且这代表所有连到集线器的设备，都是属于同一个冲突网域以及广播网域(hub间组网所有hub都属于同一广播域), 冲突和泛洪严重，因此大部分Hub已被Switch代替.</p>\n<img src=\"./hub_pic.png\" alt=\"image-20220121154139634\" style=\"zoom:35%;\" />\n\n<h3 id=\"Bridge网桥\"><a href=\"#Bridge网桥\" class=\"headerlink\" title=\"Bridge网桥\"></a>Bridge网桥</h3><p>网桥工作在第二层数据链路层, 可以解析出链路层数据包, 并在Bridge内维护每个端口和连接着的设备MAC地址映射关系, 从而可以动态判断是否要转发收到的物理帧, 从而在一定程度上解决hub间的泛洪问题.</p>\n<img src=\"/Users/talentxiet/Desktop/我的学习文档/网络基础/bridge_pic.png\" alt=\"image-20220121155228284\" style=\"zoom:50%;\" />\n\n<h3 id=\"Switch交换机\"><a href=\"#Switch交换机\" class=\"headerlink\" title=\"Switch交换机\"></a>Switch交换机</h3><p>二层交换机: 二层交换机工作在数据链路层, 相比Hub, 它可以解析物理帧中的链路层frame信息,并基于frame中的mac地址与交换机端口进行缓存映射, 从而高效的解决Hub的冲突, 泛洪等问题. 此外交换机通常还支持划分VLAN的功能, VLAN可以创建相互隔离的子LAN, 从而缩小广播域大小. </p>\n<img src=\"./switch_pic.png\" alt=\"image-20220121160921808\" style=\"zoom:55%;\" />\n\n<p>交换机组网示例:</p>\n<img src=\"./switch_net.png\" alt=\"image-20220122201304858\" style=\"zoom:50%;\" />\n\n<p>三层交换机: 三层交换机在交换机的基础之上加了网络层协议的解析能力, 以及一些简单的三层路由功能. 不过它的主要功能还是交换机的，同时它的价格比路由器价格偏低，实用性更高。</p>\n<p>一个真实的交换机图片如下所示:</p>\n<img src=\"./real_switch.png\" alt=\"image-20220122202630798\" style=\"zoom:38%;\" />\n\n<h3 id=\"Router路由器-网关\"><a href=\"#Router路由器-网关\" class=\"headerlink\" title=\"Router路由器 (网关)\"></a>Router路由器 (网关)</h3><p>讲到路由器,我们要先讲一下IP子网和网关(Gateway), IP地址+掩码标示了IP网段, 不同网段间的网络相互隔离. 而网关, 顾名思义, 就是不同网络间连接的关口, 在网络层上实现网络连通. 网关概念也可延伸到应用服务网关, 这里我们讨论的均指TCP/IP协议下网关.</p>\n<p>在TCP/IP协议的系统内核层, 会在网络层向链路层封包时, 检测目标IP与源IP是否在同一子网, 如果在同一子网, 封包时的对端MAC地址通过ARP协议获取; 而当不在同一子网时, 会使用网关的MAC作为目标MAC地址. 可以用下图思考一下, 不同子网间通信时的隔离性到底是如何实现的? </p>\n<img src=\"./ip_group_question.png\" alt=\"image-20220122220139210\" style=\"zoom:40%;\" />\n\n<p>不同的IP网段可以设置不同的网关地址, 从而细粒度的控制流量出口. 一个默认macos下的路由表配置如下, 该机器ip为192.168.0.108, default网关为192.168.0.1, 访问127.0.0.1时会loopback到自己网卡, 访问192.168.0/24网段时会在en0网卡所处的进行链路层进行二层数据通信. </p>\n<img src=\"./routing_table.png\" alt=\"image-20220122215006525\" style=\"zoom:50%;\" />\n\n<p>路由器实现了网关的功能, 它工作的三层网络层, 可以实现三层协议的解包路由等功能. 当然路由器还有很多其他功能, 比如NAT等. </p>\n<p>路由器上会有很多网口, 可以按用处分为WAN口和LAN口, WAN口指的是接入其他Wide Area Network广域网的网口, LAN口指的是接入路由器内部Local Area Network局域网的网口. 往往内部LAN还支持Wifi的接入, 成为Wireless LAN (WLAN).  每个WAN口均可以提供三层能力, 即可配置独立的MAC及IP地址(独立网卡); LAN口则往往只具备二层传输能力, 提供交换机的功能. 具备三层能力的LAN口可以通过路由器配置作为WAN口服务.</p>\n<img src=\"/Users/talentxiet/Desktop/我的学习文档/网络基础/router_wan_lan.png\" alt=\"router_wan_lan\" style=\"zoom:40%;\" />\n\n<p>当路由器要串联多组子网时, 若想要子网间按期望进行通信的话, 就需要正确配置Router的路由表了. 路由表比较核心的三个配置属性是Destination, Gateway 和 Interface. </p>\n<p>Destination可以是网段, Host或者default (均不匹配时), 路由器网卡收到frame并解出目标IP后, 会逐一进行匹配, 匹配到对应记录后, 会按路由表配置, 将frame的目标MAC地址转换为所配网关的MAC地址, 并通过指定配置的Interface发送出去. 当没配置网关时, 会在Interface广播域对目标IP进行广播寻址.</p>\n<img src=\"/Users/talentxiet/Desktop/我的学习文档/网络基础/router_trans.png\" alt=\"router_transfer\" style=\"zoom:36%;\" />\n\n<img src=\"./router_trans2.png\" alt=\"image-20220124222512944\" style=\"zoom:50%;\" />\n\n<p>一个真实企业级路由器的图片如下: </p>\n<img src=\"/Users/talentxiet/Desktop/我的学习文档/网络基础/real_router.png\" alt=\"image-20220122203856676\" style=\"zoom:45%;\" />\n\n<h3 id=\"F5\"><a href=\"#F5\" class=\"headerlink\" title=\"F5\"></a>F5</h3><p>F5是一家美国公司, 卖的F5设备可提供4-7层的解包和路由能力, 相比工作于网络层的Router其功能就更丰富了. 包括负载均衡，应用状态监控，高可用性保障，广域流量管理，链路控制；内容转换，高速缓存，SSL加速和卸载等能力等等.</p>\n<img src=\"./real_f5.png\" alt=\"image-20220122205509626\" style=\"zoom:60%;\" />\n\n<h2 id=\"真实组网案例\"><a href=\"#真实组网案例\" class=\"headerlink\" title=\"真实组网案例\"></a>真实组网案例</h2><h3 id=\"公共网络\"><a href=\"#公共网络\" class=\"headerlink\" title=\"公共网络\"></a>公共网络</h3><h3 id=\"家庭网络\"><a href=\"#家庭网络\" class=\"headerlink\" title=\"家庭网络\"></a>家庭网络</h3><h2 id=\"Glossary\"><a href=\"#Glossary\" class=\"headerlink\" title=\"Glossary:\"></a>Glossary:</h2><h3 id=\"Ethernet-以太网\"><a href=\"#Ethernet-以太网\" class=\"headerlink\" title=\"Ethernet 以太网\"></a>Ethernet 以太网</h3><p>以太网(Ethernet)是一种计算机局域网技术, 提出于1980s。IEEE组织的IEEE 802.3标准制定了以太网的技术标准, 后续延伸出了802.3~11标准，它规定了包括物理层的连线、电子信号和介质访问层协议的内容。以太网是当前应用最普遍的局域网技术，取代了其他局域网标准如令牌环、FDDI 和 ARCNET。</p>\n<h3 id=\"广播域-broadcast-domain\"><a href=\"#广播域-broadcast-domain\" class=\"headerlink\" title=\"广播域 broadcast domain\"></a>广播域 broadcast domain</h3><p>广播域（Broadcast domain）是计算机网络的一个逻辑划分。广播域中的任意一个节点可以在数据链路层通过广播的方式到达任意一个节点。广播域可以处于同一个局域网内,也可以被桥接到其他的局域网。</p>\n<p>根据目前的流行技术，任意连接到同一 repeater 或者 switch 的电脑属于同一个广播域，并且任意连接到同一个inter-connected的 repeater 或 switch 的集合的电脑也是属于同一个广播域的。而 Router 和其他high-level devices会在广播域间形成隔离。</p>\n<h3 id=\"冲突域-collision-domain\"><a href=\"#冲突域-collision-domain\" class=\"headerlink\" title=\"冲突域 collision domain\"></a>冲突域 collision domain</h3><p>与广播域相对的是冲突域。冲突域中所有节点都链接到同一个被集线器、交换机和学习型网桥划分的相互连接的中继器集合。冲突域一般来说小于或者包含在广播域中。 冲突域下的碰撞问题通过CSMA/CD (Carrier-sense multiple access)解决.</p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><h3 id=\"traceroute实现\"><a href=\"#traceroute实现\" class=\"headerlink\" title=\"traceroute实现\"></a>traceroute实现</h3><p>向目标ip发送ICMP echo包或随机30000+大端口发送udp包,  通过TTL和ICMP结果返回报文判断路由点地址和通信时间.</p>\n"},{"title":"编程规范","_content":"\n## 目录\n\n+ Git分支管理规范\n  + 常用分支说明\n  + 操作流程实例\n\n+ 设计规范\n  + 前言\n  + 阿里设计规约\n\n  + 本组UML图示例\n\n+ 阿里巴巴Java开发规范解读\n\n## Git分支管理规范\n\n### 常用分支说明\n\n#### master分支:\n\n+ 线上版本分支, 对应线上的每一个版本, 用tag标记\n+ 保护分支, 不允许在该分支直接提代码\n+ 稳定长期存在\n\n#### develop分支:\n\n+ 开发分支, 包含所有最新功能和代码, 所有开发基于此分支进行\n+ 保护分支, 不允许直接在该分支提代码\n+ 开发新功能时, 基于最新的develop分支切出自己的feature分支进行\n+ 稳定长期存在\n\n#### feature & fix分支:\n\n+ 新功能分支,  或修复BUG分支, 通常对应Sprint中的一个特定任务\n+ 分支命名用 feature-xxx 或 fix-xxx 开头,且有意义的词汇构成\n+ comment 包含Sprint中对应任务id 及此分支功能描述\n+ 开发完成后, 提交PR(pull request) 到 origin develop分支,  PR merge到develop分支后并删除此分支\n\n#### release分支:\n\n+ 发布分支, 准备上线版本时 使用的分支. \n+ 准备发布新版本时，从develop 切出一个 release 分支，来做发布前的准备\n+ 在修复线上紧急BUG时, 从 master 切出一个 release(hotfix)分支, 来做发布前的准备\n+ release分支 测试发现的bug直接在 release分支进行修复, 上线后 合并至 master 分支 和 develop分支\n+ 上线发布完成后, 可以选择删除release分支\n\n### 操作流程示例\n\n+ 两个长期分支:  master 和 develop.  日常开发中, 逐渐丰富develop分支功能 \n\n<img src=\"./git-0.png\" alt=\"image-20220316161954036\" style=\"zoom:42%;\" />\n\n+ 多人协作开发时,  提交PR前先在本地 pull并rebase最新的远端develop分支,   git pull origin develop --rebase;\n\n<img src=\"./git-1-1.png\" alt=\"image-20220318105311716\" style=\"zoom:35%;\" />\n\n+ 开发过程中准备一些新功能上线. 首先, 团队一起挑选出要上线的commit点\n\n<img src=\"./git-1.png\" alt=\"image-20220316160232302\" style=\"zoom:50%;\" />\n\n+ 从该commit切出release分支 , 发布到UAT环境 并交给测试和业务同事验证功能, 如符合预期 则使用该版本应用包上线. 上线完成后合并至 master 分支.\n\n<img src=\"/Users/talentxiet/Library/Application Support/typora-user-images/image-20220316160610988.png\" alt=\"image-20220316160610988\" style=\"zoom:50%;\" />\n\n+ 若该release分支测试时出了问题, 则直接在该分支修复问题. 知道符合预期后 发布生产, 并将新改动合并至master和develop分支.\n\n<img src=\"./git-3.png\" alt=\"image-20220316160903903\" style=\"zoom:50%;\" />\n\n+ 若从develop分支切release分支时, 有不想跟随本次上线的commit, 使用git cherry-pick精确选择要上线的commit, 从而产出符合预期的release分支.\n\n<img src=\"./git-4.png\" alt=\"image-20220316161230112\" style=\"zoom:50%;\" />\n\n+ 当生产环境出现要紧急修复的BUG时, 从线上对应的master分支commit 切出release分支, 修复bug后上线发布, 完成后合并至master和develop.\n\n<img src=\"./git-5.png\" alt=\"image-20220316161359901\" style=\"zoom:50%;\" />\n\n## 设计规范\n\n### 前言\n\n此处谈不上是规范, 希望大家一起探讨,总结出工作中必要的一些设计及文档产出. \n\n+ 比较复杂的需求开始前, 往往需要提前进行方案设计和评审, 那我们要评审些什么?  评审产出什么样的结果?\n  + 评估需求实现的技术方案&细节&可行性 -> 如何描述技术方案?  \n  + 方案带来的改动点 -> 参与方对改动内容达成一致\n  + 不同方案的优缺点&成本 -> 拍板确定实施方案\n  + 优雅的设计细节 -> 保证复用性和拓展性\n  + ...\n+ 代码或项目开发完成后,  如何验证符合预期?  -> 遵循文档约定\n\n### 阿里设计规约\n\n![image-20220318111434810](./design-1.png)\n\n### 本组UML图示例\n\n我们组开发的一个电话系统\n\n#### 1. 一通电话生命周期的状态图:\n\n![image-20220318112715504](./design1.png)\n\n#### 2. 通话发起到接听的时序图\n\n![image-20220318112918395](./design2.png)\n\n#### 3. 与协作方外部系统交互的 活动图\n\n<img src=\"./design3.png\" alt=\"image-20220318113905621\" style=\"zoom:55%;\" />\n\n#### 4. UAT测试环境各个服务间的部署图\n\n![image-20220318113430160](./design4.png)\n\n## 阿里巴巴 Java开发手册解读\n\n下载链接: https://github.com/alibaba/p3c\n\n\n\n","source":"_posts/codingGuidelines/codingGuidelines.md","raw":"---\ntitle: 编程规范\n---\n\n## 目录\n\n+ Git分支管理规范\n  + 常用分支说明\n  + 操作流程实例\n\n+ 设计规范\n  + 前言\n  + 阿里设计规约\n\n  + 本组UML图示例\n\n+ 阿里巴巴Java开发规范解读\n\n## Git分支管理规范\n\n### 常用分支说明\n\n#### master分支:\n\n+ 线上版本分支, 对应线上的每一个版本, 用tag标记\n+ 保护分支, 不允许在该分支直接提代码\n+ 稳定长期存在\n\n#### develop分支:\n\n+ 开发分支, 包含所有最新功能和代码, 所有开发基于此分支进行\n+ 保护分支, 不允许直接在该分支提代码\n+ 开发新功能时, 基于最新的develop分支切出自己的feature分支进行\n+ 稳定长期存在\n\n#### feature & fix分支:\n\n+ 新功能分支,  或修复BUG分支, 通常对应Sprint中的一个特定任务\n+ 分支命名用 feature-xxx 或 fix-xxx 开头,且有意义的词汇构成\n+ comment 包含Sprint中对应任务id 及此分支功能描述\n+ 开发完成后, 提交PR(pull request) 到 origin develop分支,  PR merge到develop分支后并删除此分支\n\n#### release分支:\n\n+ 发布分支, 准备上线版本时 使用的分支. \n+ 准备发布新版本时，从develop 切出一个 release 分支，来做发布前的准备\n+ 在修复线上紧急BUG时, 从 master 切出一个 release(hotfix)分支, 来做发布前的准备\n+ release分支 测试发现的bug直接在 release分支进行修复, 上线后 合并至 master 分支 和 develop分支\n+ 上线发布完成后, 可以选择删除release分支\n\n### 操作流程示例\n\n+ 两个长期分支:  master 和 develop.  日常开发中, 逐渐丰富develop分支功能 \n\n<img src=\"./git-0.png\" alt=\"image-20220316161954036\" style=\"zoom:42%;\" />\n\n+ 多人协作开发时,  提交PR前先在本地 pull并rebase最新的远端develop分支,   git pull origin develop --rebase;\n\n<img src=\"./git-1-1.png\" alt=\"image-20220318105311716\" style=\"zoom:35%;\" />\n\n+ 开发过程中准备一些新功能上线. 首先, 团队一起挑选出要上线的commit点\n\n<img src=\"./git-1.png\" alt=\"image-20220316160232302\" style=\"zoom:50%;\" />\n\n+ 从该commit切出release分支 , 发布到UAT环境 并交给测试和业务同事验证功能, 如符合预期 则使用该版本应用包上线. 上线完成后合并至 master 分支.\n\n<img src=\"/Users/talentxiet/Library/Application Support/typora-user-images/image-20220316160610988.png\" alt=\"image-20220316160610988\" style=\"zoom:50%;\" />\n\n+ 若该release分支测试时出了问题, 则直接在该分支修复问题. 知道符合预期后 发布生产, 并将新改动合并至master和develop分支.\n\n<img src=\"./git-3.png\" alt=\"image-20220316160903903\" style=\"zoom:50%;\" />\n\n+ 若从develop分支切release分支时, 有不想跟随本次上线的commit, 使用git cherry-pick精确选择要上线的commit, 从而产出符合预期的release分支.\n\n<img src=\"./git-4.png\" alt=\"image-20220316161230112\" style=\"zoom:50%;\" />\n\n+ 当生产环境出现要紧急修复的BUG时, 从线上对应的master分支commit 切出release分支, 修复bug后上线发布, 完成后合并至master和develop.\n\n<img src=\"./git-5.png\" alt=\"image-20220316161359901\" style=\"zoom:50%;\" />\n\n## 设计规范\n\n### 前言\n\n此处谈不上是规范, 希望大家一起探讨,总结出工作中必要的一些设计及文档产出. \n\n+ 比较复杂的需求开始前, 往往需要提前进行方案设计和评审, 那我们要评审些什么?  评审产出什么样的结果?\n  + 评估需求实现的技术方案&细节&可行性 -> 如何描述技术方案?  \n  + 方案带来的改动点 -> 参与方对改动内容达成一致\n  + 不同方案的优缺点&成本 -> 拍板确定实施方案\n  + 优雅的设计细节 -> 保证复用性和拓展性\n  + ...\n+ 代码或项目开发完成后,  如何验证符合预期?  -> 遵循文档约定\n\n### 阿里设计规约\n\n![image-20220318111434810](./design-1.png)\n\n### 本组UML图示例\n\n我们组开发的一个电话系统\n\n#### 1. 一通电话生命周期的状态图:\n\n![image-20220318112715504](./design1.png)\n\n#### 2. 通话发起到接听的时序图\n\n![image-20220318112918395](./design2.png)\n\n#### 3. 与协作方外部系统交互的 活动图\n\n<img src=\"./design3.png\" alt=\"image-20220318113905621\" style=\"zoom:55%;\" />\n\n#### 4. UAT测试环境各个服务间的部署图\n\n![image-20220318113430160](./design4.png)\n\n## 阿里巴巴 Java开发手册解读\n\n下载链接: https://github.com/alibaba/p3c\n\n\n\n","slug":"codingGuidelines/codingGuidelines","published":1,"date":"2022-03-16T08:23:38.820Z","updated":"2022-03-18T03:53:46.731Z","_id":"cl0vvw5sg0002469rbu879f1u","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><p>Git分支管理规范</p>\n<ul>\n<li>常用分支说明</li>\n<li>操作流程实例</li>\n</ul>\n</li>\n<li><p>设计规范</p>\n<ul>\n<li><p>前言</p>\n</li>\n<li><p>阿里设计规约</p>\n</li>\n<li><p>本组UML图示例</p>\n</li>\n</ul>\n</li>\n<li><p>阿里巴巴Java开发规范解读</p>\n</li>\n</ul>\n<h2 id=\"Git分支管理规范\"><a href=\"#Git分支管理规范\" class=\"headerlink\" title=\"Git分支管理规范\"></a>Git分支管理规范</h2><h3 id=\"常用分支说明\"><a href=\"#常用分支说明\" class=\"headerlink\" title=\"常用分支说明\"></a>常用分支说明</h3><h4 id=\"master分支\"><a href=\"#master分支\" class=\"headerlink\" title=\"master分支:\"></a>master分支:</h4><ul>\n<li>线上版本分支, 对应线上的每一个版本, 用tag标记</li>\n<li>保护分支, 不允许在该分支直接提代码</li>\n<li>稳定长期存在</li>\n</ul>\n<h4 id=\"develop分支\"><a href=\"#develop分支\" class=\"headerlink\" title=\"develop分支:\"></a>develop分支:</h4><ul>\n<li>开发分支, 包含所有最新功能和代码, 所有开发基于此分支进行</li>\n<li>保护分支, 不允许直接在该分支提代码</li>\n<li>开发新功能时, 基于最新的develop分支切出自己的feature分支进行</li>\n<li>稳定长期存在</li>\n</ul>\n<h4 id=\"feature-amp-fix分支\"><a href=\"#feature-amp-fix分支\" class=\"headerlink\" title=\"feature &amp; fix分支:\"></a>feature &amp; fix分支:</h4><ul>\n<li>新功能分支,  或修复BUG分支, 通常对应Sprint中的一个特定任务</li>\n<li>分支命名用 feature-xxx 或 fix-xxx 开头,且有意义的词汇构成</li>\n<li>comment 包含Sprint中对应任务id 及此分支功能描述</li>\n<li>开发完成后, 提交PR(pull request) 到 origin develop分支,  PR merge到develop分支后并删除此分支</li>\n</ul>\n<h4 id=\"release分支\"><a href=\"#release分支\" class=\"headerlink\" title=\"release分支:\"></a>release分支:</h4><ul>\n<li>发布分支, 准备上线版本时 使用的分支. </li>\n<li>准备发布新版本时，从develop 切出一个 release 分支，来做发布前的准备</li>\n<li>在修复线上紧急BUG时, 从 master 切出一个 release(hotfix)分支, 来做发布前的准备</li>\n<li>release分支 测试发现的bug直接在 release分支进行修复, 上线后 合并至 master 分支 和 develop分支</li>\n<li>上线发布完成后, 可以选择删除release分支</li>\n</ul>\n<h3 id=\"操作流程示例\"><a href=\"#操作流程示例\" class=\"headerlink\" title=\"操作流程示例\"></a>操作流程示例</h3><ul>\n<li>两个长期分支:  master 和 develop.  日常开发中, 逐渐丰富develop分支功能 </li>\n</ul>\n<img src=\"./git-0.png\" alt=\"image-20220316161954036\" style=\"zoom:42%;\" />\n\n<ul>\n<li>多人协作开发时,  提交PR前先在本地 pull并rebase最新的远端develop分支,   git pull origin develop –rebase;</li>\n</ul>\n<img src=\"./git-1-1.png\" alt=\"image-20220318105311716\" style=\"zoom:35%;\" />\n\n<ul>\n<li>开发过程中准备一些新功能上线. 首先, 团队一起挑选出要上线的commit点</li>\n</ul>\n<img src=\"./git-1.png\" alt=\"image-20220316160232302\" style=\"zoom:50%;\" />\n\n<ul>\n<li>从该commit切出release分支 , 发布到UAT环境 并交给测试和业务同事验证功能, 如符合预期 则使用该版本应用包上线. 上线完成后合并至 master 分支.</li>\n</ul>\n<img src=\"/Users/talentxiet/Library/Application Support/typora-user-images/image-20220316160610988.png\" alt=\"image-20220316160610988\" style=\"zoom:50%;\" />\n\n<ul>\n<li>若该release分支测试时出了问题, 则直接在该分支修复问题. 知道符合预期后 发布生产, 并将新改动合并至master和develop分支.</li>\n</ul>\n<img src=\"./git-3.png\" alt=\"image-20220316160903903\" style=\"zoom:50%;\" />\n\n<ul>\n<li>若从develop分支切release分支时, 有不想跟随本次上线的commit, 使用git cherry-pick精确选择要上线的commit, 从而产出符合预期的release分支.</li>\n</ul>\n<img src=\"./git-4.png\" alt=\"image-20220316161230112\" style=\"zoom:50%;\" />\n\n<ul>\n<li>当生产环境出现要紧急修复的BUG时, 从线上对应的master分支commit 切出release分支, 修复bug后上线发布, 完成后合并至master和develop.</li>\n</ul>\n<img src=\"./git-5.png\" alt=\"image-20220316161359901\" style=\"zoom:50%;\" />\n\n<h2 id=\"设计规范\"><a href=\"#设计规范\" class=\"headerlink\" title=\"设计规范\"></a>设计规范</h2><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>此处谈不上是规范, 希望大家一起探讨,总结出工作中必要的一些设计及文档产出. </p>\n<ul>\n<li>比较复杂的需求开始前, 往往需要提前进行方案设计和评审, 那我们要评审些什么?  评审产出什么样的结果?<ul>\n<li>评估需求实现的技术方案&amp;细节&amp;可行性 -&gt; 如何描述技术方案?  </li>\n<li>方案带来的改动点 -&gt; 参与方对改动内容达成一致</li>\n<li>不同方案的优缺点&amp;成本 -&gt; 拍板确定实施方案</li>\n<li>优雅的设计细节 -&gt; 保证复用性和拓展性</li>\n<li>…</li>\n</ul>\n</li>\n<li>代码或项目开发完成后,  如何验证符合预期?  -&gt; 遵循文档约定</li>\n</ul>\n<h3 id=\"阿里设计规约\"><a href=\"#阿里设计规约\" class=\"headerlink\" title=\"阿里设计规约\"></a>阿里设计规约</h3>\n\n<h3 id=\"本组UML图示例\"><a href=\"#本组UML图示例\" class=\"headerlink\" title=\"本组UML图示例\"></a>本组UML图示例</h3><p>我们组开发的一个电话系统</p>\n<h4 id=\"1-一通电话生命周期的状态图\"><a href=\"#1-一通电话生命周期的状态图\" class=\"headerlink\" title=\"1. 一通电话生命周期的状态图:\"></a>1. 一通电话生命周期的状态图:</h4>\n\n<h4 id=\"2-通话发起到接听的时序图\"><a href=\"#2-通话发起到接听的时序图\" class=\"headerlink\" title=\"2. 通话发起到接听的时序图\"></a>2. 通话发起到接听的时序图</h4>\n\n<h4 id=\"3-与协作方外部系统交互的-活动图\"><a href=\"#3-与协作方外部系统交互的-活动图\" class=\"headerlink\" title=\"3. 与协作方外部系统交互的 活动图\"></a>3. 与协作方外部系统交互的 活动图</h4><img src=\"./design3.png\" alt=\"image-20220318113905621\" style=\"zoom:55%;\" />\n\n<h4 id=\"4-UAT测试环境各个服务间的部署图\"><a href=\"#4-UAT测试环境各个服务间的部署图\" class=\"headerlink\" title=\"4. UAT测试环境各个服务间的部署图\"></a>4. UAT测试环境各个服务间的部署图</h4>\n\n<h2 id=\"阿里巴巴-Java开发手册解读\"><a href=\"#阿里巴巴-Java开发手册解读\" class=\"headerlink\" title=\"阿里巴巴 Java开发手册解读\"></a>阿里巴巴 Java开发手册解读</h2><p>下载链接: <a href=\"https://github.com/alibaba/p3c\">https://github.com/alibaba/p3c</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><p>Git分支管理规范</p>\n<ul>\n<li>常用分支说明</li>\n<li>操作流程实例</li>\n</ul>\n</li>\n<li><p>设计规范</p>\n<ul>\n<li><p>前言</p>\n</li>\n<li><p>阿里设计规约</p>\n</li>\n<li><p>本组UML图示例</p>\n</li>\n</ul>\n</li>\n<li><p>阿里巴巴Java开发规范解读</p>\n</li>\n</ul>\n<h2 id=\"Git分支管理规范\"><a href=\"#Git分支管理规范\" class=\"headerlink\" title=\"Git分支管理规范\"></a>Git分支管理规范</h2><h3 id=\"常用分支说明\"><a href=\"#常用分支说明\" class=\"headerlink\" title=\"常用分支说明\"></a>常用分支说明</h3><h4 id=\"master分支\"><a href=\"#master分支\" class=\"headerlink\" title=\"master分支:\"></a>master分支:</h4><ul>\n<li>线上版本分支, 对应线上的每一个版本, 用tag标记</li>\n<li>保护分支, 不允许在该分支直接提代码</li>\n<li>稳定长期存在</li>\n</ul>\n<h4 id=\"develop分支\"><a href=\"#develop分支\" class=\"headerlink\" title=\"develop分支:\"></a>develop分支:</h4><ul>\n<li>开发分支, 包含所有最新功能和代码, 所有开发基于此分支进行</li>\n<li>保护分支, 不允许直接在该分支提代码</li>\n<li>开发新功能时, 基于最新的develop分支切出自己的feature分支进行</li>\n<li>稳定长期存在</li>\n</ul>\n<h4 id=\"feature-amp-fix分支\"><a href=\"#feature-amp-fix分支\" class=\"headerlink\" title=\"feature &amp; fix分支:\"></a>feature &amp; fix分支:</h4><ul>\n<li>新功能分支,  或修复BUG分支, 通常对应Sprint中的一个特定任务</li>\n<li>分支命名用 feature-xxx 或 fix-xxx 开头,且有意义的词汇构成</li>\n<li>comment 包含Sprint中对应任务id 及此分支功能描述</li>\n<li>开发完成后, 提交PR(pull request) 到 origin develop分支,  PR merge到develop分支后并删除此分支</li>\n</ul>\n<h4 id=\"release分支\"><a href=\"#release分支\" class=\"headerlink\" title=\"release分支:\"></a>release分支:</h4><ul>\n<li>发布分支, 准备上线版本时 使用的分支. </li>\n<li>准备发布新版本时，从develop 切出一个 release 分支，来做发布前的准备</li>\n<li>在修复线上紧急BUG时, 从 master 切出一个 release(hotfix)分支, 来做发布前的准备</li>\n<li>release分支 测试发现的bug直接在 release分支进行修复, 上线后 合并至 master 分支 和 develop分支</li>\n<li>上线发布完成后, 可以选择删除release分支</li>\n</ul>\n<h3 id=\"操作流程示例\"><a href=\"#操作流程示例\" class=\"headerlink\" title=\"操作流程示例\"></a>操作流程示例</h3><ul>\n<li>两个长期分支:  master 和 develop.  日常开发中, 逐渐丰富develop分支功能 </li>\n</ul>\n<img src=\"./git-0.png\" alt=\"image-20220316161954036\" style=\"zoom:42%;\" />\n\n<ul>\n<li>多人协作开发时,  提交PR前先在本地 pull并rebase最新的远端develop分支,   git pull origin develop –rebase;</li>\n</ul>\n<img src=\"./git-1-1.png\" alt=\"image-20220318105311716\" style=\"zoom:35%;\" />\n\n<ul>\n<li>开发过程中准备一些新功能上线. 首先, 团队一起挑选出要上线的commit点</li>\n</ul>\n<img src=\"./git-1.png\" alt=\"image-20220316160232302\" style=\"zoom:50%;\" />\n\n<ul>\n<li>从该commit切出release分支 , 发布到UAT环境 并交给测试和业务同事验证功能, 如符合预期 则使用该版本应用包上线. 上线完成后合并至 master 分支.</li>\n</ul>\n<img src=\"/Users/talentxiet/Library/Application Support/typora-user-images/image-20220316160610988.png\" alt=\"image-20220316160610988\" style=\"zoom:50%;\" />\n\n<ul>\n<li>若该release分支测试时出了问题, 则直接在该分支修复问题. 知道符合预期后 发布生产, 并将新改动合并至master和develop分支.</li>\n</ul>\n<img src=\"./git-3.png\" alt=\"image-20220316160903903\" style=\"zoom:50%;\" />\n\n<ul>\n<li>若从develop分支切release分支时, 有不想跟随本次上线的commit, 使用git cherry-pick精确选择要上线的commit, 从而产出符合预期的release分支.</li>\n</ul>\n<img src=\"./git-4.png\" alt=\"image-20220316161230112\" style=\"zoom:50%;\" />\n\n<ul>\n<li>当生产环境出现要紧急修复的BUG时, 从线上对应的master分支commit 切出release分支, 修复bug后上线发布, 完成后合并至master和develop.</li>\n</ul>\n<img src=\"./git-5.png\" alt=\"image-20220316161359901\" style=\"zoom:50%;\" />\n\n<h2 id=\"设计规范\"><a href=\"#设计规范\" class=\"headerlink\" title=\"设计规范\"></a>设计规范</h2><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>此处谈不上是规范, 希望大家一起探讨,总结出工作中必要的一些设计及文档产出. </p>\n<ul>\n<li>比较复杂的需求开始前, 往往需要提前进行方案设计和评审, 那我们要评审些什么?  评审产出什么样的结果?<ul>\n<li>评估需求实现的技术方案&amp;细节&amp;可行性 -&gt; 如何描述技术方案?  </li>\n<li>方案带来的改动点 -&gt; 参与方对改动内容达成一致</li>\n<li>不同方案的优缺点&amp;成本 -&gt; 拍板确定实施方案</li>\n<li>优雅的设计细节 -&gt; 保证复用性和拓展性</li>\n<li>…</li>\n</ul>\n</li>\n<li>代码或项目开发完成后,  如何验证符合预期?  -&gt; 遵循文档约定</li>\n</ul>\n<h3 id=\"阿里设计规约\"><a href=\"#阿里设计规约\" class=\"headerlink\" title=\"阿里设计规约\"></a>阿里设计规约</h3>\n\n<h3 id=\"本组UML图示例\"><a href=\"#本组UML图示例\" class=\"headerlink\" title=\"本组UML图示例\"></a>本组UML图示例</h3><p>我们组开发的一个电话系统</p>\n<h4 id=\"1-一通电话生命周期的状态图\"><a href=\"#1-一通电话生命周期的状态图\" class=\"headerlink\" title=\"1. 一通电话生命周期的状态图:\"></a>1. 一通电话生命周期的状态图:</h4>\n\n<h4 id=\"2-通话发起到接听的时序图\"><a href=\"#2-通话发起到接听的时序图\" class=\"headerlink\" title=\"2. 通话发起到接听的时序图\"></a>2. 通话发起到接听的时序图</h4>\n\n<h4 id=\"3-与协作方外部系统交互的-活动图\"><a href=\"#3-与协作方外部系统交互的-活动图\" class=\"headerlink\" title=\"3. 与协作方外部系统交互的 活动图\"></a>3. 与协作方外部系统交互的 活动图</h4><img src=\"./design3.png\" alt=\"image-20220318113905621\" style=\"zoom:55%;\" />\n\n<h4 id=\"4-UAT测试环境各个服务间的部署图\"><a href=\"#4-UAT测试环境各个服务间的部署图\" class=\"headerlink\" title=\"4. UAT测试环境各个服务间的部署图\"></a>4. UAT测试环境各个服务间的部署图</h4>\n\n<h2 id=\"阿里巴巴-Java开发手册解读\"><a href=\"#阿里巴巴-Java开发手册解读\" class=\"headerlink\" title=\"阿里巴巴 Java开发手册解读\"></a>阿里巴巴 Java开发手册解读</h2><p>下载链接: <a href=\"https://github.com/alibaba/p3c\">https://github.com/alibaba/p3c</a></p>\n"}],"PostAsset":[{"_id":"source/_posts/network-base/BGP_example.png","slug":"BGP_example.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/BGP_speaker.png","slug":"BGP_speaker.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/av_protocols.png","slug":"av_protocols.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/ble_osi.png","slug":"ble_osi.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/bridge_pic.png","slug":"bridge_pic.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/data_link_layer_frame.png","slug":"data_link_layer_frame.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/datalink_timewindow.png","slug":"datalink_timewindow.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/datalinklayer_sublayers.png","slug":"datalinklayer_sublayers.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/dhcp.png","slug":"dhcp.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/dns.png","slug":"dns.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/http_protocol.png","slug":"http_protocol.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/hub_pic.png","slug":"hub_pic.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/icmp_kinds.png","slug":"icmp_kinds.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/ip_group_question.png","slug":"ip_group_question.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/ip_nets.png","slug":"ip_nets.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/ip_offset.png","slug":"ip_offset.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/ip_packet.png","slug":"ip_packet.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/ip_routing_protocol.png","slug":"ip_routing_protocol.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/ipsec.png","slug":"ipsec.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/mac_addr.png","slug":"mac_addr.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/manchester.png","slug":"manchester.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/net_sec_key.png","slug":"net_sec_key.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/osi7.png","slug":"osi7.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/osi_pdu_pass.png","slug":"osi_pdu_pass.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/osi_transfer_example.png","slug":"osi_transfer_example.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/preamble.png","slug":"preamble.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/real_f5.png","slug":"real_f5.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/real_router.png","slug":"real_router.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/real_switch.png","slug":"real_switch.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/rip.png","slug":"rip.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/router_trans.png","slug":"router_trans.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/router_trans2.png","slug":"router_trans2.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/router_wan_lan.png","slug":"router_wan_lan.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/routing_table.png","slug":"routing_table.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/rtcp.png","slug":"rtcp.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/rtp_protocol.png","slug":"rtp_protocol.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/sec_mac.png","slug":"sec_mac.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/signature.png","slug":"signature.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/smtp.png","slug":"smtp.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/socket2.png","slug":"socket2.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/ssl.png","slug":"ssl.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/ssl_procedure.png","slug":"ssl_procedure.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/switch_net.png","slug":"switch_net.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/switch_pic.png","slug":"switch_pic.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/syscall.png","slug":"syscall.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/tcp_buffer.png","slug":"tcp_buffer.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/tcp_bye_handshake.png","slug":"tcp_bye_handshake.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/tcp_bytes_stream.png","slug":"tcp_bytes_stream.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/tcp_congest.png","slug":"tcp_congest.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/tcp_handshake.png","slug":"tcp_handshake.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/tcp_protocol.png","slug":"tcp_protocol.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/tcp_rto.png","slug":"tcp_rto.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/tcp_sack.png","slug":"tcp_sack.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/tcp_slow_start.png","slug":"tcp_slow_start.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/tcp_state.png","slug":"tcp_state.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/tcp_window.png","slug":"tcp_window.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/transport_process.png","slug":"transport_process.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/udp_protocol.png","slug":"udp_protocol.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/对称密钥分配.png","slug":"对称密钥分配.png","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0},{"_id":"source/_posts/network-base/网络通信.drawio","slug":"网络通信.drawio","post":"ckzcu8epe0000u4je09ey43dg","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[],"Tag":[]}}